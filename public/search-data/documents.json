[
  {
    "slug": "/data-management/databases",
    "title": "Bases de Datos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/databases/mongodb",
    "title": "Mongo DB",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/databases/postgres",
    "title": "Postgres",
    "description": "Esta",
    "content": ""
  },
  {
    "slug": "/data-management/databases/sql",
    "title": "SQL",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management",
    "title": "Administración de datos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/platforms",
    "title": "Plataformas de administración de datos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/platforms/supabase",
    "title": "Supabase",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/platforms/supabase/local-development/configuration",
    "title": "Configuración de CLI de Supabase",
    "description": "Desarrollar localmente, implementar en la plataforma Supabase y configurar flujos de trabajo de CI/CD",
    "content": "<CardGrid>\n  <Card title=\"Fuente\" href=\"https://supabase.com/docs/guides/local-development/cli/config\" icon=\"alignJustify\" variant=\"small\" external={true} />\n</CardGrid>\n\nSe genera un archivo `supabase/config.toml` después de ejecutar `supabase init`.\n\nPuede editar este archivo para cambiar la configuración de su proyecto que se ejecuta localmente. Después de realizar los cambios, deberá reiniciar usando `supabase stop` y luego `supabase start` para que los cambios surtan efecto.\n\n## CONFIGURACION GENERAL\n\n### project\\_id\n\n| Nombre       | Default |                    Requerido |\r\n| :------------ | :----------------: | -----------------------: |\r\n| `project_id` |     None      | `true` |\n\n**Descripción**\n\nUna cadena que se utiliza para distinguir diferentes proyectos de Supabase en el mismo `host`. El valor predeterminado es el nombre del directorio de trabajo cuando se ejecuta `supabase init`.\n\n***\n\n## CONFIGURACION DE AUTENTICACION\n\n### auth.enabled\\#\n\n| Nombre       | Default |                    Requerido |\r\n| :------------ | :----------------: | -----------------------: |\r\n| `auth.enabled` |     true      | `false` |\n\n**Descripción**\n\nHabilite el servicio GoTrue local.\n\n**Ve también**\n\n* [Configuración del servidor de autenticación](https://supabase.com/docs/reference/self-hosting-auth/generates-an-email-action-link)\n"
  },
  {
    "slug": "/data-management/platforms/supabase/local-development/getting-started",
    "title": "Supabase CLI",
    "description": "Desarrollar localmente, implementar en la plataforma Supabase y configurar flujos de trabajo de CI/CD",
    "content": "<CardGrid>\n  <Card title=\"Fuente\" href=\"https://supabase.com/docs/guides/local-development/cli/getting-started?queryGroups=platform&platform=npm\" icon=\"alignJustify\" variant=\"small\" external={true} />\n</CardGrid>\n\nSupabase CLI le permite ejecutar toda la pila de Supabase de forma local, en su máquina o en un entorno de CI. Con solo dos comandos, puede configurar e iniciar un nuevo proyecto local:\n\n1. para crear un nuevo proyecto local\n\n   ```bash\n   supabase init\n   ```\n2. para iniciar los servicios de Supabase\n\n   ```bash\n   supabase start\n   ```\n\n## INSTALACION DEL CLI DE SUPABASE\n\ninstalar la CLI como dependencia de desarrollo a través de npm:\n\n```bash\nnpm install supabase --save-dev\n```\n\n## ACTUALIZACION DEL CLI DE SUPABASE\n\nSi ha instalado la CLI como dependencia de desarrollo a través de npm, puede actualizarla con:\n\n```bash\nnpm update supabase --save-dev\n```\n\nSi tiene contenedores de Supabase ejecutándose localmente, deténgalos y elimine sus volúmenes de datos antes de continuar con la actualización. Esto garantiza que los servicios administrados de Supabase puedan aplicar nuevas migraciones en un estado limpio de la base de datos local.\n\n<Note title=\"Realizar copias de seguridad y detener la ejecución de contenedores\">\n  Recuerde guardar todos los cambios en el esquema local y en los datos antes de detenerse porque el indicador `--no-backup` los eliminará.\n\n  ```bash\n  supabase db diff -f my_schema\r\n  supabase db dump --local --data-only > supabase/seed.sql\r\n  supabase stop --no-backup\n  ```\n</Note>\n\n## EJECUCION DE SUPABASE LOCALMENTE\n\nLa CLI de Supabase utiliza contenedores Docker para administrar la pila de desarrollo local. Siga la guía oficial para instalar y configurar Docker Desktop:\n\n![Docker](https://supabase.com/docs/_next/image?url=%2Fdocs%2Fimg%2Fguides%2Fcli%2Fdocker-win.png\\&w=3840\\&q=75\\&dpl=dpl_9xAnUGkSbk4dufV62sNRezafXykJ)\n\n<Note title=\"Alternativamente, puede utilizar una herramienta de contenedor diferente que ofrezca API compatibles con Docker.\">\n  * **Rancher Desktop** (macOS, Windows, Linux)\n  * **Podman** (macOS, Windows, Linux)\n  * **OrbStack** (macOS)\n  * **colima** (macOS)\n</Note>\n\nDentro de la carpeta donde quieres crear tu proyecto, ejecuta:\n\n```bash\nsupabase init\n```\n\nEsto creará una nueva carpeta `Supabase`. Es seguro enviar esta carpeta a su sistema de control de versiones.\n\nAhora, para iniciar el Supabase stack, ejecute:\n\n```bash\nsupabase start\n```\n\nEsto lleva tiempo en la primera ejecución porque el CLI necesita descargar las imágenes de Docker a su máquina local. El CLI incluye todo el conjunto de herramientas de Supabase y algunas imágenes adicionales que son útiles para el desarrollo local (como un servidor SMTP local y una herramienta de comparación de bases de datos).\n\n## ACCEDE A LOS SERVICIOS DE TU PROYECTO\n\nUna vez que todos los servicios de Supabase estén en ejecución, verá un resultado que contiene sus credenciales locales de Supabase. Debería verse así, con las URL y las claves que usará en su proyecto local:\n\n```bash\n\r\nStarted supabase local development setup.\r\n\r\n         API URL: http://localhost:54321\r\n          DB URL: postgresql://postgres:postgres@localhost:54322/postgres\r\n      Studio URL: http://localhost:54323\r\n    Inbucket URL: http://localhost:54324\r\n        anon key: eyJh......\r\nservice_role key: eyJh......\r\n\n```\n\n## STUDIO\n\n```bash\n# Default URL:\r\nhttp://localhost:54323\n```\n\nEl entorno de desarrollo local incluye Supabase Studio, una interfaz gráfica para trabajar con su base de datos.\n\n![Studio](https://supabase.com/docs/img/guides/cli/local-studio.png)\n\n## DETENER LOS SERVICIOS LOCALES\n\nCuando haya terminado de trabajar en su proyecto de Supabase, puede detener la pila (sin restablecer su base de datos local):\n\n```bash\nsupabase stop\n```\n"
  },
  {
    "slug": "/data-management/platforms/supabase/local-development",
    "title": "Desarrollo Local y CLI",
    "description": "Cómo configurar un entorno de desarrollo local para Supabase.",
    "content": "<CardGrid>\n  <Card title=\"Fuente\" href=\"https://supabase.com/docs/guides/local-development\" icon=\"alignJustify\" variant=\"small\" external={true} />\n</CardGrid>\n\nPuedes ejecutar Supabase localmente usando el Supabase CLI. Esto te permite desarrollar y probar tu aplicación en un entorno aislado antes de desplegarla en la nube.\n\n## REQUISITOS PREVIOS\n\n* [Docker](https://www.docker.com/get-started/)\n* [Supabase CLI](https://supabase.com/docs/reference/cli/installing-the-cli)\n\n## COMENZAR\n\n1. Instala Suplabase CLI:\n\n   ```bash\n   npm install supabase --save-dev\r\n\n   ```\n\n2. Inicializa un nuevo proyecto:\n\n   ```bash\n   supabase init\n   ```\n\n3. Inicia Supabase:\n\n   ```bash\n   supabase start\n   ```\n\n   Esto iniciará todos los servicios de Supabase en Docker. La primera vez que ejecutes este comando, Docker descargará las imágenes necesarias, lo cual puede tardar unos minutos.\n\n4. Tu API de Supabase ahora debería estar disponible en `http://localhost:54321`.\n\n## DESARROLLO LOCAL\n\nEl desarrollo local con Supabase le permite trabajar en sus proyectos en un entorno autónomo en su máquina local. Trabajar localmente tiene varias ventajas:\n\n1. **Desarrollo más rápido**: puede realizar cambios y ver los resultados al instante sin tener que esperar a que se realicen implementaciones remotas.\n\n2. **Trabajo sin conexión**: puede continuar con el desarrollo incluso sin una conexión a Internet.\n\n3. **Rentabilidad**: el desarrollo local es gratuito y no consume la cuota de su proyecto.\n\n4. **Privacidad mejorada**: los datos confidenciales permanecen en su máquina local durante el desarrollo.\n\n5. **Pruebas sencillas**: puede experimentar con diferentes configuraciones y funciones sin afectar su entorno de producción.\n\nPara comenzar con el desarrollo local, deberá instalar la CLI de Supabase y Docker. La CLI de Supabase le permite iniciar y administrar su pila local de Supabase, mientras que Docker se utiliza para ejecutar los servicios necesarios.\n\nUna vez configurado, puede inicializar un nuevo proyecto de Supabase, iniciar la pila local y comenzar a desarrollar su aplicación utilizando los servicios locales de Supabase. Esto incluye acceso a una base de datos Postgres local, autenticación, almacenamiento y otras funciones de Supabase.\n\n## CLI\n\nLa CLI de Supabase es una herramienta poderosa que permite a los desarrolladores administrar sus proyectos de Supabase directamente desde la terminal. Proporciona un conjunto de comandos para varias tareas, que incluyen:\n\n* Configurar y administrar entornos de desarrollo locales\n* Generar tipos de TypeScript para el esquema de su base de datos\n* Manejar migraciones de bases de datos\n* Administrar variables de entorno y secretos\n* Implementar su proyecto en la plataforma Supabase\n\nCon la CLI, puede optimizar su flujo de trabajo de desarrollo, automatizar tareas repetitivas y mantener la coherencia en diferentes entornos. Es una herramienta esencial tanto para el desarrollo local como para los procesos de CI/CD.\n"
  },
  {
    "slug": "/deployments/docker",
    "title": "Docker",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/deployments",
    "title": "Despliegue de proyectos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/deployments/vercel",
    "title": "Vercel",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/documentation",
    "title": "Sobre documentación",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/documentation/installation",
    "title": "Uso",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/frameworks",
    "title": "Frameworks para desarrollo",
    "description": "Desc",
    "content": "[Mermaid para gráfica](https://mermaid.js.org/intro/)\n"
  },
  {
    "slug": "/frameworks/nextjs/images-fonts",
    "title": "Imágenes y fuentes",
    "description": "optimización automática de imágenes y fuentes para un mejor rendimiento.",
    "content": "<CardGrid>\n  <Card title=\"Configuración nuevo proyecto\" href=\"https://nextjs.org/docs/app/getting-started/layouts-and-pages\" icon=\"alignJustify\" variant=\"small\" external={true} />\n</CardGrid>\n\n***\n\n## Cómo optimizar imágenes y fuentes\n\n***Next.js*** incluye optimización automática de imágenes y fuentes para un mejor rendimiento y experiencia del usuario. Esta página le indicará cómo comenzar a utilizarlas.\n\n## Manejo de activos estáticos\n\nPuedes almacenar archivos estáticos, como imágenes y fuentes, en una carpeta llamada `public` en el directorio raíz. Luego, tu código puede hacer referencia a los archivos dentro de `public` a partir de la URL base (`/`).\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fpublic-folder.png\\&w=1920\\&q=75)\n\n***\n\n## Optimización de imágenes\n\nEl componente `<Image>` de ***Next.js*** extiende el elemento ***HTML*** `<img>` para proporcionar:\n\n* Optimización de tamaño: Entrega automática de imágenes con el tamaño correcto para cada dispositivo, utilizando formatos de imagen modernos como ***WebP*** y ***AVIF***.\n* Estabilidad visual: evita que el diseño se modifique automáticamente cuando se cargan las imágenes.\n* Cargas de página más rápidas: las imágenes se cargan solo cuando ingresan a la ventana gráfica mediante la carga diferida nativa del navegador, con marcadores de posición de desenfoque opcionales.\n* Flexibilidad de activos: cambio de tamaño de imágenes a pedido, incluso imágenes almacenadas en servidores remotos.\n\nPara comenzar a usar `<Image>`, impórtelo desde `next/image` y represéntelo dentro de su componente.\n\n`app/page.tsx`\n\n```tsx\nimport Image from 'next/image'\r\n\r\nexport default function Page() {\r\n    return <Image src=\"\" alt=\"\" />\r\n}\n```\n\nLa propiedad `src` puede ser una imagen ***local*** o ***remota***.\n\n### Imágenes locales\n\nPara utilizar una imagen local, importe sus archivos de imagen `.jpg`, `.png` o `.webp` desde su carpeta pública.\n\n`app/page.tsx`\n\n```tsx\nimport Image from 'next/image'\r\nimport profilePic from './me.png'\r\n\r\nexport default function Page() {\r\n    return (\r\n        <Image\r\n        src={profilePic}\r\n        alt=\"Picture of the author\"\r\n        // width={500} automatically provided\r\n        // height={500} automatically provided\r\n        // blurDataURL=\"data:...\" automatically provided\r\n        // placeholder=\"blur\" // Optional blur-up while loading\r\n        />\r\n    )\r\n}\n```\n\n***Next.js*** determinará automáticamente el ancho y la altura intrínsecos de la imagen en función del archivo importado. Estos valores se utilizan para determinar la relación de aspecto de la imagen y evitar cambios de diseño acumulativos mientras se carga la imagen.\n\n### Imágenes remotas\n\nPara utilizar una imagen remota, puede proporcionar una cadena ***URL*** para la propiedad `src`.\n\n`app/page.tsx`\n\n```tsx\nimport Image from 'next/image'\r\n\r\nexport default function Page() {\r\n    return (\r\n        <Image\r\n        src=\"https://s3.amazonaws.com/my-bucket/profile.png\"\r\n        alt=\"Picture of the author\"\r\n        width={500}\r\n        height={500}\r\n        />\r\n    )\r\n}\n```\n\nDado que ***Next.js*** no tiene acceso a archivos remotos durante el proceso de compilación, deberá proporcionar manualmente los atributos de `width`, `height` y `blurDataURL` opcional. Los atributos de ancho y alto se utilizan para inferir la relación de aspecto correcta de la imagen y evitar cambios de diseño a partir de la carga de la imagen.\n\nLuego, para permitir de forma segura imágenes de servidores remotos, debe definir una lista de patrones de ***URL*** compatibles en `next.config.js`. Sea lo más específico posible para evitar un uso malintencionado. Por ejemplo, la siguiente configuración solo permitirá imágenes de un depósito de ***AWS S3*** específico:\n\n`next.config.ts`\n\n```tsx\nimport { NextConfig } from 'next'\r\n\r\nconst config: NextConfig = {\r\n    images: {\r\n        remotePatterns: [\r\n        {\r\n            protocol: 'https',\r\n            hostname: 's3.amazonaws.com',\r\n            port: '',\r\n            pathname: '/my-bucket/**',\r\n            search: '',\r\n        },\r\n        ],\r\n    },\r\n}\r\n\r\nexport default config\n```\n\n# Optimización de fuentes\n\nEl módulo `next/font` optimiza automáticamente sus fuentes y elimina las solicitudes de red externa para mejorar la privacidad y el rendimiento.\n\nIncluye alojamiento automático integrado para cualquier archivo de fuente. Esto significa que puedes cargar fuentes web de manera óptima sin cambiar el diseño.\n\nPara comenzar a usar `next/font`, impórtelo desde `next/font/local` o `next/font/google`, llámelo como una función con las opciones adecuadas y configure el nombre de clase del elemento al que desea aplicar la fuente. Por ejemplo:\n\n`app/layout.tsx`\n\n```tsx\nimport { Geist } from 'next/font/google'\r\n\r\nconst geist = Geist({\r\n    subsets: ['latin'],\r\n})\r\n\r\nexport default function Layout({ children }: { children: React.ReactNode }) {\r\n    return (\r\n        <html lang=\"en\" className={geist.className}>\r\n        <body>{children}</body>\r\n        </html>\r\n    )\r\n}\n```\n\n### Fuentes de Google\n\nPuedes alojar automáticamente cualquier ***fuente de Google***. Las fuentes se incluyen en la implementación y se distribuyen desde el mismo dominio que tu implementación, lo que significa que el navegador no envía solicitudes a ***Google*** cuando el usuario visita tu sitio.\n\nPara comenzar a usar una ***fuente de Google***, importe la fuente elegida desde `next/font/google`:\r\n`app/layout.tsx`\n\n```tsx\nimport { Geist } from 'next/font/google'\r\n\r\nconst geist = Geist({\r\n    subsets: ['latin'],\r\n})\r\n\r\nexport default function RootLayout({\r\n    children,\r\n}: {\r\n    children: React.ReactNode\r\n}) {\r\n    return (\r\n        <html lang=\"en\" className={geist.className}>\r\n        <body>{children}</body>\r\n        </html>\r\n    )\r\n}\n```\n\nRecomendamos utilizar fuentes variables para obtener el mejor rendimiento y flexibilidad. Pero si no puede utilizar una fuente variable, deberá especificar un peso:\n\n```tsx\nimport { Roboto } from 'next/font/google'\r\n\r\nconst roboto = Roboto({\r\n    weight: '400',\r\n    subsets: ['latin'],\r\n})\r\n\r\nexport default function RootLayout({\r\n    children,\r\n}: {\r\n    children: React.ReactNode\r\n}) {\r\n    return (\r\n        <html lang=\"en\" className={roboto.className}>\r\n        <body>{children}</body>\r\n        </html>\r\n    )\r\n}\n```\n\n### Fuentes locales\n\nPara utilizar una fuente local, importe su fuente desde `next/font/local` y especifique el origen de su archivo de fuente local en la carpeta `public`.\n\n`app/layout.tsx`\n\n```tsx\nimport localFont from 'next/font/local'\r\n\r\nconst myFont = localFont({\r\n    src: './my-font.woff2',\r\n})\r\n\r\nexport default function RootLayout({\r\n    children,\r\n}: {\r\n    children: React.ReactNode\r\n}) {\r\n    return (\r\n        <html lang=\"en\" className={myFont.className}>\r\n        <body>{children}</body>\r\n        </html>\r\n    )\r\n}\n```\n\nSi desea utilizar varios archivos para una sola familia de fuentes, `src` puede ser una matriz:\n\n```tsx\nconst roboto = localFont({\r\n    src: [\r\n        {\r\n        path: './Roboto-Regular.woff2',\r\n        weight: '400',\r\n        style: 'normal',\r\n        },\r\n        {\r\n        path: './Roboto-Italic.woff2',\r\n        weight: '400',\r\n        style: 'italic',\r\n        },\r\n        {\r\n        path: './Roboto-Bold.woff2',\r\n        weight: '700',\r\n        style: 'normal',\r\n        },\r\n        {\r\n        path: './Roboto-BoldItalic.woff2',\r\n        weight: '700',\r\n        style: 'italic',\r\n        },\r\n    ],\r\n})\n```\n"
  },
  {
    "slug": "/frameworks/nextjs",
    "title": "Next.js",
    "description": "Configuración de nuevo proyecto en Next.js",
    "content": "<CardGrid>\n  <Card title=\"Configuración nuevo proyecto\" href=\"https://nextjs.org/docs/app/getting-started/installation\" icon=\"alignJustify\" variant=\"small\" external={true} />\n</CardGrid>\n\n***\n\n## Cómo configurar un nuevo proyecto Next.js\n\n### Requisitos del sistema\n\n* Node.js 18.18 o posterior.\n* Se admiten macOS, Windows (incluido WSL) y Linux.\n\n***\n\n## Instalación automática\n\nRecomendamos iniciar una nueva aplicación ***Next.js*** usando `create-next-app`, que configura todo automáticamente. Para crear un proyecto, ejecute:\n\n```bash\nnpx create-next-app@latest\n```\n\nOn installation, you'll see the following prompts:\n\n```bash\nWhat is your project named? my-app\r\nWould you like to use TypeScript? No / Yes\r\nWould you like to use ESLint? No / Yes\r\nWould you like to use Tailwind CSS? No / Yes\r\nWould you like your code inside a `src/` directory? No / Yes\r\nWould you like to use App Router? (recommended) No / Yes\r\nWould you like to use Turbopack for `next dev`?  No / Yes\r\nWould you like to customize the import alias (`@/*` by default)? No / Yes\r\nWhat import alias would you like configured? @/*\n```\n\nDespués de las indicaciones, `create-next-app` creará una carpeta con el nombre de su proyecto e instalará las dependencias requeridas.\n\n***\n\n## instalación manual\n\nPara crear manualmente una nueva aplicación ***Next.js***, instale los paquetes necesarios:\n\n```bash\nnpm install next@latest react@latest react-dom@latest\n```\n\nAbra su archivo `package.json` y agregue los siguientes scripts:\n\n```json\n{\r\n    \"scripts\": {\r\n        \"dev\": \"next dev\",\r\n        \"build\": \"next build\",\r\n        \"start\": \"next start\",\r\n        \"lint\": \"next lint\"\r\n    }\r\n}\n```\n\nEstos scripts hacen referencia a las diferentes etapas del desarrollo de una aplicación:\n\n* `dev`: ejecuta `next dev` para iniciar ***Next.js*** en modo de desarrollo.\n* `build`: ejecuta la `next build` para crear la aplicación para uso en producción.\n* `start`: ejecuta el `next start` para iniciar un servidor de producción ***Next.js***.\n* `lint`: ejecuta `next lint` para configurar la configuración ***ESLint*** incorporada de Next.js.\n\n### Crear el directorio de la aplicación\n\n***Next.js*** utiliza enrutamiento del sistema de archivos, lo que significa que las rutas en su aplicación están determinadas por cómo estructura sus archivos.\n\nCree una carpeta de aplicación, luego agregue un archivo `layout.tsx` y `page.tsx`. Estos se representarán cuando el usuario visite la raíz de su aplicación (`/`).\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fapp-getting-started.png\\&w=1920\\&q=75)\n\nCree un diseño raíz dentro de `app/layout.tsx` con las etiquetas `<html>` y `<body>` requeridas:\n\n`app/layout.tsx`\n\n```tsx\nexport default function RootLayout({\r\n    children,\r\n}: {\r\n    children: React.ReactNode\r\n}) {\r\n    return (\r\n        <html lang=\"en\">\r\n        <body>{children}</body>\r\n        </html>\r\n    )\r\n}\n```\n\nFinalmente, cree una página de inicio `app/page.tsx` con algún contenido inicial:\n\n`app/page.tsx`\n\n```tsx\nexport default function Page() {\r\n    return <h1>Hello, Next.js!</h1>\r\n}\n```\n\n<aside>\n  ℹ️\n\n  Es bueno saberlo:\n\n  * Si olvida crear `layout.tsx`, ***Next.js*** creará automáticamente este archivo cuando ejecute el servidor de desarrollo con `next dev`.\n  * Opcionalmente, puedes usar un directorio `src` en la raíz de tu proyecto para separar el código de tu aplicación de los archivos de configuración.\n</aside>\n\n### Crea la carpeta pública (opcional)\n\nOpcionalmente, puede crear una carpeta pública en la raíz de su proyecto para almacenar activos estáticos como imágenes, fuentes, etc. Luego, su código puede hacer referencia a los archivos dentro de `public` a partir de la URL base (`/`).\n\n***\n\n## Ejecute el servidor de desarrollo\n\n1. Ejecute `npm run dev` para iniciar el servidor de desarrollo.\n2. Visite [http://localhost:3000](http://localhost:3000/) para ver su aplicación.\n3. Edite el archivo `app/page.tsx` y guárdelo para ver el resultado actualizado en su navegador.\n\n***\n\n## Configurar TypeScript\n\n<aside>\n  ℹ️\n\n  Versión mínima de TypeScript: v4.5.2\n</aside>\n\n***Next.js*** viene con soporte ***TypeScript*** incorporado. Para agregar ***TypeScript*** a su proyecto, cambie el nombre de un archivo a `.ts/.tsx`. Ejecute `next dev`, ***Next.js*** instalará automáticamente las dependencias necesarias y agregará un archivo `tsconfig.json` con las opciones de configuración recomendadas.\n\n### Complemento IDE\n\n***Next.js*** incluye un complemento ***TypeScript*** personalizado y un verificador de tipos, que ***VSCode*** y otros editores de código pueden usar para la verificación de tipos avanzada y el autocompletado.\n\nPuede habilitar el complemento en ***VSCode*** de la siguiente manera:\n\n1. Abrir la paleta de comandos (`Ctrl/⌘` + `Shift + P`)\n2. Buscando *\"TypeScript: Select TypeScript Version”*\n3. Seleccionar *\"Use Workspace Version”*\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Ftypescript-command-palette.png\\&w=1920\\&q=75)\n\nAhora, al editar archivos, se habilitará el complemento personalizado. Cuando se ejecute la próxima compilación, se utilizará el verificador de tipo personalizado.\n\nConsulte la página de configuración de ***TypeScript*** para obtener más información sobre cómo usar ***TypeScript*** en su proyecto.\n\n***\n\n## Configurar ESLint\n\n***Next.js*** viene con ***ESLint*** incorporado, que instala automáticamente los paquetes necesarios y configura los ajustes adecuados cuando crea un nuevo proyecto con `create-next-app`.\n\nPara agregar ***ESLint*** a un proyecto existente, agregue el siguiente ***lint*** como ***script*** a `package.json`:\n\n`package.json`\n\n```json\n{\r\n    \"scripts\": {\r\n        \"lint\": \"next lint\"\r\n    }\r\n}\n```\n\nLuego, ejecute `npm run lint` y se le guiará a través del proceso de instalación y configuración.\n\n```bash\npnpm lint\n```\n\nVerás un mensaje como este:\n\n<aside>\n  ? How would you like to configure ESLint?\n\n  ❯ Strict (recommended)\r\n  Base\r\n  Cancel\n</aside>\n\n* **`Strict`**: incluye la configuración ***ESLint*** básica de ***Next.js*** junto con un conjunto de reglas ***Core Web Vitals*** más estricto. Esta es la configuración recomendada para los desarrolladores que configuran ***ESLint*** por primera vez.\n* **`Base`**: incluye la configuración ***ESLint*** base de ***Next.js***.\n* **`Cancel`**: No incluye ninguna configuración de ***ESLint***. Seleccione esta opción solo si planea configurar su propia configuración ***ESLint*** personalizada.\n\nSi se selecciona cualquiera de las dos opciones de configuración, ***Next.js*** instalará automáticamente `eslint` y `eslint-config-next` como dependencias en su aplicación y creará un archivo `.eslintrc.json` en la raíz de su proyecto que incluye la configuración seleccionada.\n\nAhora puede ejecutar `next lint` cada vez que desee ejecutar ***ESLint*** para detectar errores. Una vez que se haya configurado ***ESLint***, también se ejecutará automáticamente durante cada compilación (siguiente compilación). Los errores harán que la compilación falle, mientras que las advertencias no.\n\nConsulte la página del complemento ***ESLint*** para obtener más información sobre cómo configurar ***ESLint*** en su proyecto.\n\n***\n\n## Configurar importaciones absolutas y alias de ruta de módulo\n\n***Next.js*** tiene soporte incorporado para las opciones *\"paths\"* y *\"baseUrl\"* de los archivos `tsconfig.json` y `jsconfig.json`. Estas opciones le permiten asignar alias a los directorios del proyecto en rutas absolutas, lo que facilita la importación de módulos. Por ejemplo:\n\n```tsx\n// Before\r\nimport { Button } from '../../../components/button'\r\n\r\n// After\r\nimport { Button } from '@/components/button'\n```\n\nPara configurar importaciones absolutas, agregue la opción de configuración ***baseUrl*** a su archivo `tsconfig.json` o `jsconfig.json`. Por ejemplo:\n\n```json\n{\r\n    \"compilerOptions\": {\r\n        \"baseUrl\": \"src/\"\r\n    }\r\n}\n```\n\nAdemás de configurar la ruta ***baseUrl***, puede utilizar la opción *\"paths\"* para *\"alias\"* las rutas del módulo.\n\nPor ejemplo, la siguiente configuración asigna `@/components/*` a `componentes/*`:\n\n`tsconfig.json` o `jsconfig.json`\n\n```json\n{\r\n    \"compilerOptions\": {\r\n        \"baseUrl\": \"src/\",\r\n        \"paths\": {\r\n        \"@/styles/*\": [\"styles/*\"],\r\n        \"@/components/*\": [\"components/*\"]\r\n        }\r\n    }\r\n}\n```\n\nCada una de los *\"paths\"* es relativa a la ubicación de ***baseUrl***. Por ejemplo:\n\n`src/app/page.tsx`\n\n```tsx\nimport Button from '@/components/button'\r\nimport '@/styles/styles.css'\r\n\r\nexport default function HomePage() {\r\n    return (\r\n        <div>\r\n        <h1>Hello World</h1>\r\n        <Button />\r\n        </div>\r\n    )\r\n}\n```\n"
  },
  {
    "slug": "/frameworks/nextjs/layouts-pages",
    "title": "Layout y Pages",
    "description": "enrutamiento basado en el sistema de archivos.",
    "content": "<CardGrid>\n  <Card title=\"Configuración nuevo proyecto\" href=\"https://nextjs.org/docs/app/getting-started/layouts-and-pages\" icon=\"alignJustify\" variant=\"small\" external={true} />\n</CardGrid>\n\n***\n\n## CREANDO UNA `page`\n\nUna página es una interfaz de usuario que se representa en una ruta específica. Para crear una página, agregue un archivo de página dentro del directorio de la aplicación y exporte un componente de ***React*** de manera predeterminada. Por ejemplo, para crear una página de índice (`/`):\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fpage-special-file.png\\&w=1920\\&q=75)\n\n`app/page.tsx`\n\n```tsx\nexport default function Page() {\r\n  return <h1>Hello Next.js!</h1>\r\n}\n```\n\n***\n\n## CREANDO UN `layout`\n\nUn ***layout*** es una interfaz de usuario que se comparte entre varias ***páginas***. Durante la navegación, los ***layouts*** conservan el estado, siguen siendo interactivos y no se vuelven a mostrar.\n\nPuedes definir un ***layout*** de forma predeterminada exportando un componente ***React*** desde un archivo de ***layout***. El componente debe aceptar un `children` que puede ser una página u otro ***layout***.\n\nPor ejemplo, para crear un ***layout*** que acepte su página de índice como secundaria, agregue un archivo de ***layout*** dentro del directorio de la aplicación:\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Flayout-special-file.png\\&w=1920\\&q=75)\n\n`app/layout.tsx`\n\n```tsx\nexport default function DashboardLayout({\r\n    children,\r\n}: {\r\n    children: React.ReactNode\r\n}) {\r\n    return (\r\n        <html lang=\"en\">\r\n        <body>\r\n            {/* Layout UI */}\r\n            {/* Place children where you want to render a page or nested layout */}\r\n            <main>{children}</main>\r\n        </body>\r\n        </html>\r\n    )\r\n}\n```\n\nEl diseño anterior se denomina ***root layout*** porque se define en la raíz del directorio de la aplicación. El diseño raíz es obligatorio y debe contener etiquetas `<html>` y de `<body>`.\n\n***\n\n## CREANDO UNA RUTA ANIDADA\n\nUna ruta anidada es una ruta compuesta por varios segmentos de ***URL***. Por ejemplo, la ruta `/blog/[slug]` está compuesta por tres segmentos:\n\n* `/` (Segmento raíz)\n* `blog` (Segmento)\n* `[slug]` (Segmento de hoja)\n\nEn ***Next.js***:\n\n* Las carpetas se utilizan para definir los segmentos de ruta que se asignan a los segmentos de URL.\n* Los archivos (como la ***page*** y el ***layout***) se utilizan para crear la interfaz de usuario que se muestra para un segmento.\n\nPara crear rutas anidadas, puedes anidar carpetas unas dentro de otras. Por ejemplo, para agregar una ruta para `/blog`, crea una carpeta llamada ***blog*** en el directorio de la aplicación. Luego, para que `/blog` sea accesible públicamente, agrega un archivo de página:\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fblog-nested-route.png\\&w=1920\\&q=75)\n\n`app/blog/page.tsx`\n\n```tsx\nimport { getPosts } from '@/lib/posts'\r\nimport { Post } from '@/ui/post'\r\n\r\nexport default async function Page() {\r\n    const posts = await getPosts()\r\n    \r\n    return (\r\n        <ul>\r\n        {posts.map((post) => (\r\n            <Post key={post.id} post={post} />\r\n        ))}\r\n        </ul>\r\n    )\r\n}\n```\n\nPuede continuar anidando carpetas para crear rutas anidadas. Por ejemplo, para crear una ruta para una publicación de blog específica, cree una nueva carpeta `[slug]` dentro del blog y agregue un archivo de página (`page.tsx`):\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fblog-post-nested-route.png\\&w=1920\\&q=75)\n\n`app/blog/[slug]/page.tsx`\n\n```tsx\nfunction generateStaticParams() {}\r\n\r\nexport default function Page() {\r\n    return <h1>Hello, Blog Post Page!</h1>\r\n}\n```\n\n<aside>\n  ℹ️\n\n  Bueno saber\n\n  Al incluir el nombre de una carpeta entre corchetes (por ejemplo, `[slug]`), se crea un segmento de ruta dinámica especial que se utiliza para generar varias páginas a partir de datos. Esto resulta útil para publicaciones de blogs, páginas de productos, etc.\n</aside>\n\n***\n\n## `layouts` ANIDADOS\n\nDe manera predeterminada, los ***layouts*** en la jerarquía de carpetas también están anidados, lo que significa que envuelven los ***layouts*** secundarios a través de su `children`. Puedes anidar `layouts` agregando un `layout` dentro de segmentos de ruta específicos (`carpetas`).\n\nPor ejemplo, para crear un `layout` para la ruta `/blog`, agregue un nuevo archivo de `layout` dentro de la ***carpeta blog***.\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fnested-layouts.png\\&w=1920\\&q=75)\n\n`app/blog/layout.tsx`\n\n```tsx\nexport default function BlogLayout({\r\n    children,\r\n}: {\r\n    children: React.ReactNode\r\n}) {\r\n    return <section>{children}</section>\r\n}\n```\n\nSi combinara los dos ***layouts*** anteriores, el ***root layout*** (`app/layout.js`) envolvería el ***layout*** del blog (`app/blog/layout.js`), que envolvería el blog (`app/blog/page.js`) y la página de publicación del blog (`app/blog/[slug]/page.js`).\n\n## ENLACES ENTRE PAGINAS\n\nPuede utilizar el componente `<Link>` para navegar entre rutas. `<Link>` es un componente integrado de ***Next.js*** que extiende la etiqueta ***HTML*** `<a>` para proporcionar precarga y navegación del lado del cliente.\n\nPor ejemplo, para generar una lista de publicaciones de ***blog***, importe `<Link>` desde `next/link` y pase una propiedad `href` al componente:\n\n`app/ui/post.tsx`\n\n```tsx\nimport Link from 'next/link'\r\n\r\nexport default async function Post({ post }) {\r\n    const posts = await getPosts()\r\n    \r\n    return (\r\n        <ul>\r\n        {posts.map((post) => (\r\n            <li key={post.slug}>\r\n            <Link href={`/blog/${post.slug}`}>{post.title}</Link>\r\n            </li>\r\n        ))}\r\n        </ul>\r\n    )\r\n}\n```\n\n`<Link>` es la forma principal y recomendada de navegar entre rutas en su aplicación ***Next.js***. Sin embargo, también puede usar el ***hook*** `useRouter` para una navegación más avanzada.\n"
  },
  {
    "slug": "/frameworks/nextjs/project-structure",
    "title": "Estructura y organización del proyecto",
    "description": "proporciona una descripción general de las convenciones de carpetas y archivos en ***Next.js***",
    "content": "<CardGrid>\n  <Card title=\"Configuración nuevo proyecto\" href=\"https://nextjs.org/docs/app/getting-started/installation\" icon=\"alignJustify\" variant=\"small\" external={true} />\n</CardGrid>\n\n***\n\n## Convenciones de carpetas y archivos\n\n### Carpetas de nivel superior\n\nLas carpetas de nivel superior se utilizan para organizar el código y los activos estáticos de su aplicación.\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Ftop-level-folders.png\\&w=1920\\&q=75)\n\n| `app` | Enrutador de aplicaciones |\r\n| --- | --- |\r\n| `pages` | Enrutador de páginas |\r\n| `public` | Activos estáticos a servir |\r\n| `src` | Carpeta de origen de la aplicación opcional |\n\n### Archivos de nivel superior\n\nLos archivos de nivel superior se utilizan para configurar su aplicación, administrar dependencias, ejecutar ***middleware***, integrar herramientas de monitoreo y definir variables de entorno.\n\n***\n\n***Next.js***\n\n| `next.config.js` | Archivo de configuración para ***Next.js*** |\r\n| --- | --- |\r\n| `package.json` | Dependencias y scripts del proyecto. |\r\n| `intrumentation.ts` | Archivo ***OpenTelemetría*** e Instrumentación |\r\n| `middleware.ts` | ***Middleware*** de solicitud `next.js` |\r\n| `.env` | Variables ambientales |\r\n| `.env.local` | Variables de entorno local |\r\n| `env.production` | Variables del entorno de producción. |\r\n| `env.development` | Variables del entorno de desarrollo |\r\n| `eslintrc.json` | Archivo de configuración para ***ESLint*** |\r\n| `.gitignore` | Archivos y carpetas de ***Git*** para ignorar |\r\n| `next-env.d.ts` | Archivo de declaración ***TypeScript*** para ***Next.js*** |\r\n| `tsconfig.json` | Archivo de configuración para ***TypeScript*** |\r\n| `jsconfig.json` | Archivo de configuración para ***JavaScript*** |\n\n### Archivos de enrutamiento\n\n| `layout` | `.js .jsx .tsx` | Disposición |\r\n| --- | --- | --- |\r\n| `page` | `.js .jsx .tsx` | Página |\r\n| `loading` | `.js .jsx .tsx` | Interfaz de Usuario de carga |\r\n| `not-found` | `.js .jsx .tsx` | Interfaz de Usuario no encontrada |\r\n| `error` | `.js .jsx .tsx` | Interfaz de Usuario de error |\r\n| `global-error` | `.js .jsx .tsx` | Interfaz de Usuario de error global |\r\n| `route` | `.js .jsx .tsx` | API endpoint |\r\n| `template` | `.js .jsx`  | Diseño renderizado nuevamente |\r\n| `default` | `.js .jsx .tsx` | Página alternativa de ruta paralela |\n\n### Rutas anidadas\n\n| `folder` | Segmento de ruta |\r\n| --- | --- |\r\n| `folder/folder` | Segmento de ruta anidado |\n\n### Rutas dinámicas\n\n| `[folder]` | Segmento de ruta dinámica |\r\n| --- | --- |\r\n| `[…folder]` | Segmento de ruta general |\r\n| `[[…folder]]` | Segmento de ruta general opcional |\n\n### Grupos de rutas y carpetas privadas\n\n| `(folder)` | Rutas grupales sin afectar la ruta |\r\n| --- | --- |\r\n| `_folder` | Optar carpeta y todos los segmentos secundarios fuera del enrutamiento |\n\n### Rutas paralelas e interceptadas\n\n| `@folder` | Ranura con nombre |\r\n| --- | --- |\r\n| `(.)folder` | Interceptar el mismo nivel |\r\n| `(..)folder` | Interceptar un nivel por encima |\r\n| `(..)(..)folder` | Interceptar dos niveles por encima |\r\n| `(…)folder` | Interceptar desde la raíz |\n\n### Convenciones de archivos de metadatos\n\n#### Iconos de aplicaciones\n\n| `favicon` | `.ico` | Archivo ***favicon*** |\r\n| --- | --- | --- |\r\n| `icon` | `.ico .jpg .jpeg .png .svg` | Archivo de icono de la aplicación |\r\n| `icon` | `.js .ts .tsx` | Icono de aplicación generado |\r\n| `apple-icon` | `.jpg .jpeg .png` | Archivo de icono de la aplicación de ***Apple*** |\r\n| `apple-icon` | `.js .ts .tsx` | Icono de la aplicación de ***Apple*** generado |\n\n#### Imágenes de Open Graph y Twitter\n\n| `opengraph-image` | `.jpg .jpeg .png .gif` | Archivo de imagen ***Open Graph*** |\r\n| --- | --- | --- |\r\n| `opengraph-image` | `.js .ts .tsx` | Imagen de ***Open Graph*** generada |\r\n| `twitter-image` | `.jpg .jpeg .png .gif` | Archivo de imagen de ***Twitter*** |\r\n| `twitter-image` | `.js .ts .tsx` | Imagen de ***Twitter*** generada |\n\n#### SEO\n\n| `sitemap` | `.xml` | Archivo de mapa del sitio |\r\n| --- | --- | --- |\r\n| `sitemap` | `.js .ts` | Mapa del sitio generado |\r\n| `robots` | `.txt` | Archivo de robots |\r\n| `robots` | `.js .ts` | Archivo Robots generado |\n\n***\n\n## Jerarquía de componentes\n\nLos componentes ***React*** definidos en archivos especiales de un segmento de ruta se representan en una jerarquía específica:\n\n* `layout.js`\n* `template.js`\n* `error.js`\n* `loading.js`\n* `not-found.js`\n* `page.js` o anidado `layout.js`\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Ffile-conventions-component-hierarchy.png\\&w=1920\\&q=75)\n\nEn una ruta anidada, los componentes de un segmento estarán anidados dentro de los componentes de su segmento principal.\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fnested-file-conventions-component-hierarchy.png\\&w=1920\\&q=75)\n\n***\n\n## Organizando tu proyecto\n\nAparte de las convenciones de carpetas y archivos, ***Next.js*** no tiene una opinión clara sobre cómo organizar y colocar los archivos de su proyecto, pero sí ofrece varias funciones que lo ayudarán a organizar su proyecto.\n\n### Colocación\n\nEn el directorio de la aplicación, las carpetas anidadas definen la estructura de la ruta. Cada carpeta representa un segmento de ruta que se asigna a un segmento correspondiente en una ruta URL.\n\nSin embargo, aunque la estructura de la ruta se define a través de carpetas, una ruta no es accesible públicamente hasta que se agrega un archivo `page.js` o `route.js` a un segmento de ruta.\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fproject-organization-not-routable.png\\&w=1920\\&q=75)\n\nE incluso cuando una ruta se hace accesible al público, solo se envía al cliente el contenido devuelto por `page.js` o `route.js`.\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fproject-organization-routable.png\\&w=1920\\&q=75)\n\nEsto significa que los archivos del proyecto se pueden ubicar de forma segura dentro de segmentos de ruta en el directorio de la aplicación sin que se puedan enrutar accidentalmente.\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fproject-organization-colocation.png\\&w=1920\\&q=75)\n\n<aside>\n  ℹ️\n\n  Bueno saber:\n\n  * Si bien puedes ubicar los archivos de tu proyecto en la aplicación, no es necesario que lo hagas. Si lo prefieres, puedes mantenerlos fuera del directorio de la aplicación.\n</aside>\n\n### Carpetas privadas\n\nSe pueden crear carpetas privadas anteponiendo un guión bajo a la carpeta: `_folderName`\n\nEsto indica que la carpeta es un detalle de implementación privado y no debe ser considerada por el sistema de enrutamiento, por lo que excluye la carpeta y todas sus subcarpetas del enrutamiento.\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fproject-organization-private-folders.png\\&w=1920\\&q=75)\n\nDado que los archivos del directorio de la aplicación se pueden colocar de forma segura de forma predeterminada, no se requieren carpetas privadas para la colocación. Sin embargo, pueden ser útiles para:\n\n* Separar la lógica de UI de la lógica de enrutamiento.\n* Organizar consistentemente archivos internos en un proyecto y en el ecosistema ***Next.js.***\n* Ordenar y agrupar archivos en editores de código.\n* Evitar posibles conflictos de nombres con futuras convenciones de archivos ***Next.js***.\n\n<aside>\n  ℹ️\n\n  Bueno saber:\n\n  * Si bien no es una convención marco, también puedes considerar marcar archivos fuera de carpetas privadas como \"privados\" utilizando el mismo patrón de guión bajo.\n  * Puede crear segmentos de URL que comiencen con un guión bajo anteponiendo `%5F` (la forma codificada en URL de un guión bajo) al nombre de la carpeta: `%5FfolderName`.\n  * Si no utiliza carpetas privadas, sería útil conocer las convenciones de archivos especiales de ***Next.js*** para evitar conflictos de nombres inesperados.\n</aside>\n\n### Grupos de rutas\n\nLos grupos de rutas se pueden crear envolviendo una carpeta entre paréntesis: (`folderName`)\n\nEsto indica que la carpeta es para fines organizativos y no debe incluirse en la ruta URL de la ruta.\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fproject-organization-route-groups.png\\&w=1920\\&q=75)\n\nLos grupos de rutas son útiles para:\n\n* Los grupos de rutas son útiles para: organizar rutas en grupos, por ejemplo, por sección del sitio, intención o equipo.\n* Habilitar diseños anidados en el mismo nivel de segmento de ruta:\n  * Creación de múltiples diseños anidados en el mismo segmento, incluidos múltiples diseños raíz\n  * Agregar un diseño a un subconjunto de rutas en un segmento común\n\n### Directorio src\n\n***Next.js*** permite almacenar el código de la aplicación (incluida la aplicación) dentro de un directorio `src` opcional. Esto separa el código de la aplicación de los archivos de configuración del proyecto, que en su mayoría se encuentran en la raíz de un proyecto.\n\n***Next.js*** permite almacenar el código de la aplicación (incluido `app`) dentro de un directorio [`src`](https://nextjs.org/docs/app/building-your-application/configuring/src-directory) opcional. Esto separa el código de la aplicación de los archivos de configuración del proyecto, que en su mayoría se encuentran en la raíz de un proyecto.\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fproject-organization-src-directory.png\\&w=1920\\&q=75)\n\n### Estrategias comunes\n\nEn la siguiente sección se ofrece una descripción general de las estrategias más comunes. La conclusión más sencilla es elegir una estrategia que funcione para usted y su equipo y ser coherente en todo el proyecto.\n\n<aside>\n  ℹ️\n\n  Bueno saber:\n\n  En nuestros ejemplos a continuación, usamos componentes y carpetas `lib` como marcadores de posición generalizados, su nombre no tiene un significado especial en el marco y sus proyectos pueden usar otras carpetas como `ui`, `utils`, `hooks`, `estilos`, etc.\n</aside>\n\n#### Almacenar archivos de proyecto fuera de la aplicación\n\nEsta estrategia almacena todo el código de la aplicación en carpetas compartidas en la raíz de su proyecto y mantiene el directorio de la aplicación exclusivamente para fines de enrutamiento.\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fproject-organization-project-root.png\\&w=1920\\&q=75)\n\n#### Almacenar archivos de proyecto en carpetas de nivel superior dentro de la aplicación\n\nEsta estrategia almacena todo el código de la aplicación en carpetas compartidas en la raíz del directorio de la aplicación.\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fproject-organization-app-root.png\\&w=1920\\&q=75)\n\n#### Dividir archivos de proyecto por función o ruta\n\nEsta estrategia almacena el código de aplicación compartido globalmente en el directorio de la aplicación raíz y divide el código de aplicación más específico en los segmentos de ruta que los utilizan.\n\n![image.png](https://nextjs.org/_next/image?url=https%3A%2F%2Fh8DxKfmAPhn8O0p3.public.blob.vercel-storage.com%2Fdocs%2Fdark%2Fproject-organization-app-root-split.png\\&w=1920\\&q=75)\n"
  },
  {
    "slug": "/frameworks/shadcn-ui/components-json",
    "title": "components.json",
    "description": "Configuración para su proyecto.",
    "content": "<CardGrid>\n  <Card title=\"components.json\" href=\"https://ui.shadcn.com/docs/components-json\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n</CardGrid>\n\n***\n\nEl archivo `components.json` contiene la configuración de su proyecto.\n\nLo usamos para comprender cómo está configurado su proyecto y cómo generar componentes personalizados para él.\n\n<Note title=\"Nota\">\n  El archivo `component.json` es opcional y solo es necesario si usas la ***CLI*** para agregar componentes a tu proyecto. Si usas el método de copiar y pegar, no necesitas este archivo.\n</Note>\n\nPuede crear un archivo `component.json` en su proyecto ejecutando el siguiente comando:\n\nConsulte la sección CLI para obtener más información.\n\n## $schema\n\nPuedes ver el esquema JSON de componentes.json aquí.\n\n`componentes.json`\n\n```json\n{\r\n    \"$schema\": \"https://ui.shadcn.com/schema.json\"\r\n}\n```\n\n## style\n\nEl estilo de sus componentes. **No se puede cambiar después de la inicialización**.\n\n`components.json`\n\n```json\n{\r\n    \"style\": \"new-york\"\r\n}\n```\n\nEl estilo predeterminado ha quedado obsoleto. Utilice el estilo Nueva York en su lugar.\n\n## tailwind\n\nConfiguración para ayudar a la ***CLI*** a comprender cómo se configura **Tailwind CSS** en su proyecto.\n\nConsulte la sección de instalación para saber cómo configurar **Tailwind CSS**.\n\n### tailwind.config\n\nRuta donde se encuentra su archivo `tailwind.config.js`. Para **Tailwind CSS v4**, déjelo en blanco.\n\n`components.json`\n\n```json\n{\r\n    \"tailwind\": {\r\n        \"config\": \"tailwind.config.js\" | \"tailwind.config.ts\"\r\n    }\r\n}\n```\n\n### tailwind.css\n\nRuta al archivo **CSS** que importa **Tailwind CSS** a tu proyecto.\n\ncomponents.json\n\n```json\n{\r\n    \"tailwind\": {\r\n        \"css\": \"styles/global.css\"\r\n    }\r\n}\n```\n\n### tailwind.baseColor\n\nSe utiliza para generar la paleta de colores predeterminada para los componentes. No se puede cambiar después de la inicialización.\n\n`components.json`\n\n```json\n{\r\n    \"tailwind\": {\r\n        \"baseColor\": \"gray\" / \"neutral\" / \"slate\" / \"stone\" / \"zinc\"\r\n    }\r\n}\n```\n\n## tailwind.cssVariables\n\nPuede elegir entre usar variables CSS o clases de utilidad CSS de Tailwind para la creación de temas.\n\nPara usar clases de utilidad para la creación de temas, configure tailwind.cssVariables como `false`. Para las variables CSS, configure tailwind.cssVariables como `true`.\n\n`components.json`\n\n```json\n{\r\n    \"tailwind\": {\r\n        \"cssVariables\": `true` / `false`\r\n    }\r\n}\n```\n\nPara obtener más información, consulte la documentación de temas.\n\nEsto no se puede cambiar después de la inicialización. Para cambiar entre variables CSS y clases de utilidad, deberá eliminar y volver a instalar sus componentes.\n\n### tailwind.prefix\n\nEl prefijo que se utilizará para sus clases de utilidad CSS Tailwind. Los componentes se agregarán con este prefijo.\n\n`component.json`\n\n```json\n{\r\n    \"tailwind\": {\r\n        \"prefix\": \"tw-\"\r\n    }\r\n}\n```\n\n## rsc\n\nSi se habilitará o no la compatibilidad con los componentes de **React Server**.\n\nLa **CLI** agrega automáticamente una directiva de uso del cliente a los componentes del cliente cuando se configura como verdadero.\n\n`components.json`\n\n```json\n{\r\n    \"rsc\": `true` / `false`\r\n}\n```\n\n## tsx\n\nElija entre componentes **TypeScript** o **JavaScript**.\n\nSi se establece esta opción en falso, se pueden agregar componentes como JavaScript con la extensión de archivo `.jsx`.\n\n`components.json`\n\n```json\n{\r\n    \"tsx\": `true` / `false`\r\n}\n```\n\n## alias\n\nLa **CLI** utiliza estos valores y la configuración de rutas de su archivo `tsconfig.json` o `jsconfig.json` para colocar los componentes generados en la ubicación correcta.\n\nLos alias de ruta deben configurarse en su archivo `tsconfig.json` o `jsconfig.json`.\n\n<Note title=\"Importante\">\n  Si está utilizando el directorio `src`, asegúrese de que esté incluido en las rutas en su archivo `tsconfig.json` o `jsconfig.json`.\n</Note>\n\n### aliases.utils\n\nImporta alias para tus funciones de utilidad.\n\n`components.json`\n\n```json\n{\r\n    \"aliases\": {\r\n        \"utils\": \"@/lib/utils\"\r\n    }\r\n}\n```\n\n### aliases.components\n\nImporta alias para tus componentes.\n\n`components.json`\n\n```json\n{\r\n    \"aliases\": {\r\n        \"components\": \"@/components\"\r\n    }\r\n}\n```\n\n### aliases.ui\n\nImportar alias para componentes de la interfaz de usuario.\n\nLa ***CLI*** utilizará el valor `aliases.ui` para determinar dónde colocar los componentes de la interfaz de usuario. Utilice esta configuración si desea personalizar el directorio de instalación para los componentes de la interfaz de usuario.\n\n`components.json`\n\n```json\n{\r\n    \"aliases\": {\r\n        \"ui\": \"@/app/ui\"\r\n    }\r\n}\n```\n\n### aliases.lib\n\nImporta alias para funciones de biblioteca como `format-date` o `generate-id`.\n\n`components.json`\n\n```json\n{\r\n    \"aliases\": {\r\n        \"lib\": \"@/lib\"\r\n    }\r\n}\n```\n\n### aliases.hooks\n\nImporta alias para hooks como `use-media-query` o `use-toast`.\n\n`components.json`\n\n```json\n{\r\n    \"aliases\": {\r\n        \"hooks\": \"@/hooks\"\r\n    }\r\n}\n```\n"
  },
  {
    "slug": "/frameworks/shadcn-ui/dark-mode",
    "title": "Modo Oscuro",
    "description": "Añade el modo oscuro a tu próxima aplicación.",
    "content": "<CardGrid>\n  <Card title=\"Tematización\" href=\"https://ui.shadcn.com/docs/dark-mode/next\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n</CardGrid>\n\n***\n\n## INSTALAR `next-themes`\n\nComience instalando `next-themes`:\n\n## CREAR UN PROVEEDOR DE TEMAS\n\n`components/theme-provider.tsx`\n\n```tsx\n\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\r\n\r\nexport function ThemeProvider({\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof NextThemesProvider>) {\r\n    return <NextThemesProvider {...props}>{children}</NextThemesProvider>\r\n}\n```\n\n## ENVUELVA EL ROOT LAYOUT\n\nAgregue `ThemeProvider` a su diseño raíz y agregue la propiedad `suppressHydrationWarning` a la etiqueta `html`.\n\n`app/layout.tsx`\n\n```tsx\nimport { ThemeProvider } from \"@/components/theme-provider\"\r\n\r\nexport default function RootLayout({ children }: RootLayoutProps) {\r\n    return (\r\n        <>\r\n        <html lang=\"en\" suppressHydrationWarning>\r\n            <head />\r\n            <body>\r\n                <ThemeProvider\r\n                    attribute=\"class\"\r\n                    defaultTheme=\"system\"\r\n                    enableSystem\r\n                    disableTransitionOnChange\r\n                >\r\n                    {children}\r\n                </ThemeProvider>\r\n            </body>\r\n        </html>\r\n        </>\r\n    )\r\n}\n```\n\n## AGREGA UN INTERRUPTOS DE MODO\n\nColoca un interruptor de modo en tu sitio para alternar entre el modo claro y el oscuro.\n\n```tsx\n\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Moon, Sun } from \"lucide-react\"\r\nimport { useTheme } from \"next-themes\"\r\n\r\nimport { Button } from \"@/components/ui/button\"\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\n\r\nexport function ModeToggle() {\r\n    const { setTheme } = useTheme()\r\n\r\n    return (\r\n        <DropdownMenu>\r\n        <DropdownMenuTrigger asChild>\r\n            <Button variant=\"outline\" size=\"icon\">\r\n            <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\r\n            <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\r\n            <span className=\"sr-only\">Toggle theme</span>\r\n            </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent align=\"end\">\r\n            <DropdownMenuItem onClick={() => setTheme(\"light\")}>\r\n            Light\r\n            </DropdownMenuItem>\r\n            <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\r\n            Dark\r\n            </DropdownMenuItem>\r\n            <DropdownMenuItem onClick={() => setTheme(\"system\")}>\r\n            System\r\n            </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n\n```\n"
  },
  {
    "slug": "/frameworks/shadcn-ui",
    "title": "Shadcn UI",
    "description": "shadcn/ui es un conjunto de componentes accesibles y de hermoso diseño, y una plataforma de distribución de código. Funciona con tus frameworks y modelos de IA favoritos. Código abierto.",
    "content": "<CardGrid>\n  <Card title=\"Shadcn UI\" href=\"https://ui.shadcn.com/docs\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n</CardGrid>\n\n***\n\nEsta no es una biblioteca de componentes. Es la manera en que construyes tu biblioteca de componentes.\n\nSabes cómo funcionan la mayoría de las bibliotecas de componentes tradicionales: instalas un paquete desde `npm`, importas los componentes y los usas en tu aplicación.\n\nEste enfoque funciona bien hasta que necesitas personalizar un componente para que se ajuste a tu sistema de diseño o requieres uno que no está incluido en la biblioteca. A menudo, terminas envolviendo componentes de la biblioteca, escribiendo soluciones alternativas para anular estilos o mezclando componentes de diferentes bibliotecas con API incompatibles.\n\nEsto es lo que shadcn/ui pretende resolver. Está construido en torno a los siguientes principios:\n\n* **Código abierto**: la capa superior de tu código de componente está abierta a modificaciones.\n* **Composición**: cada componente usa una interfaz común y componible, lo que los hace predecibles.\n* **Distribución**: un esquema de archivo plano y una herramienta de línea de comandos facilitan la distribución de componentes.\n* **Valores predeterminados hermosos**: estilos predeterminados cuidadosamente elegidos, para que obtengas un excelente diseño listo para usar.\n* **Listo para IA**: código abierto para que los LLM lo lean, comprendan y mejoren.\n\n## CODIGO ABIERTO\n\nshadcn/ui te entrega el código del componente real. Tienes control total para personalizar y ampliar los componentes según tus necesidades. Esto significa:\n\n* **Transparencia total**: ves exactamente cómo se construye cada componente.\n* **Personalización sencilla**: modifica cualquier parte de un componente para que se ajuste a tus requisitos de diseño y funcionalidad.\n* **Integración de IA**: el acceso al código hace que sea sencillo para los LLM leer, comprender e incluso mejorar tus componentes.\n\nEn una biblioteca típica, si necesitas cambiar el comportamiento de un botón, tienes que anular los estilos o encapsular el componente. Con shadcn/ui, simplemente editas el código del botón directamente.\n\n**¿COMO PUEDO OBTENER ACTUALIZACIONES ASCENDENTES EN UN ENFOQUE DE CODIGO ABIERTO?**\n\nshadcn/ui sigue una arquitectura de componentes sin interfaz gráfica. Esto significa que el núcleo de su aplicación puede recibir correcciones mediante la actualización de sus dependencias, por ejemplo, radix-ui o input-otp.\n\nLa capa superior, es decir, la más cercana a su sistema de diseño, no está acoplada con la implementación de la biblioteca. Permanece abierta a modificaciones.\n\n## COMPOSICION\n\nTodos los componentes de shadcn/ui comparten una interfaz común y componible. Si un componente no existe, lo incorporamos, lo hacemos componible y ajustamos su estilo para que coincida y funcione con el resto del sistema de diseño.\n\nUna interfaz compartida y componible significa que es predecible tanto para su equipo como para los LLM. No está aprendiendo diferentes API para cada componente nuevo. Incluso para los de terceros.\n\n## DISTRIBUCION\n\nshadcn/ui también es un sistema de distribución de código. Define un esquema para los componentes y una CLI para distribuirlos.\n\n* **Esquema**: una estructura de archivo plano que define los componentes, sus dependencias y propiedades.\n* **CLI**: una herramienta de línea de comandos para distribuir e instalar componentes en proyectos con soporte entre marcos.\n\nPuede usar el esquema para distribuir sus componentes a otros proyectos o hacer que la IA genere componentes completamente nuevos basados ​​en el esquema existente.\n\n## VALORES PREDETERMINADOS\n\nshadcn/ui viene con una gran colección de componentes que tienen estilos predeterminados cuidadosamente elegidos. Están diseñados para lucir bien por sí solos y para funcionar bien juntos como un sistema consistente:\n\n* **Buena configuración inicial**: su interfaz de usuario tiene un aspecto limpio y minimalista sin trabajo adicional.\n* **Diseño unificado**: los componentes se adaptan naturalmente entre sí. Cada componente está diseñado para combinar con los demás, lo que mantiene la coherencia de su interfaz de usuario.\n* **Fácilmente personalizable**: si desea cambiar algo, es simple anular y extender los valores predeterminados.\n\n## LISTO PARA IA\n\nEl diseño de shadcn/ui facilita que las herramientas de IA trabajen con su código. Su código abierto y API consistente permiten que los modelos de IA lean, comprendan e incluso generen nuevos componentes.\n\nUn modelo de IA puede aprender cómo funcionan sus componentes y sugerir mejoras o incluso crear nuevos componentes que se integren con su diseño existente.\n"
  },
  {
    "slug": "/frameworks/shadcn-ui/installation",
    "title": "Instalación en Next",
    "description": "Instalar y configurar shadcn/ui para Next.js.",
    "content": "<CardGrid>\n  <Card title=\"Shadcn UI\" href=\"https://ui.shadcn.com/docs\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n</CardGrid>\n\n***\n\n<Note title=\"Nota\">\n  La siguiente guía es para Tailwind v4. Si utiliza Tailwind v3, utilice shadcn@2.3.0.\n</Note>\n\n<Step>\n  <StepItem title=\"Crear proyecto\">\n    Ejecute el comando init para crear un nuevo proyecto Next.js o para configurar uno existente:\n\n    Elija entre un proyecto Next.js o un Monorepo.\n  </StepItem>\n\n  <StepItem title=\"Agregar componente\">\n    Ahora puedes comenzar a agregar componentes a tu proyecto.\n\n    El comando anterior agregará el componente Button a su proyecto. Luego, puede importarlo de esta manera:\n\n    ```typescript\n    import { Button } from \"@/components/ui/button\"\r\n\r\n        export default function Home() {\r\n            return (\r\n                <div>\r\n                <Button>Click me</Button>\r\n                </div>\r\n            )\r\n        }\n    ```\n  </StepItem>\n</Step>\n"
  },
  {
    "slug": "/frameworks/shadcn-ui/monorepo",
    "title": "Monorepo",
    "description": "Uso de componentes shadcn/ui y CLI en un monorepositorio.",
    "content": "<CardGrid>\n  <Card title=\"Tematización\" href=\"https://ui.shadcn.com/docs/monorepo\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n</CardGrid>\n\n***\n\nHasta ahora, usar ***shadcn/ui*** en un monorepo era un poco complicado. Podías agregar componentes usando la ***CLI***, pero tenías que administrar dónde se instalaban los componentes y corregir manualmente las rutas de importación.\n\nCon la nueva compatibilidad con monorepo en la ***CLI***, hemos hecho que sea mucho más fácil usar ***shadcn/ui*** en un monorepo.\n\nLa ***CLI*** ahora entiende la estructura del monorepo e instalará los componentes, las dependencias y las dependencias del registro en las rutas correctas y manejará las importaciones por ti.\n\n## COMENZAR\n\n### CREAR UN NUEVO PROYECTO MONOREPO\n\nPara crear un nuevo proyecto monorepo, ejecute el comando `init`. Se le solicitará que seleccione el tipo de proyecto que está creando.\n\nSeleccione la opción` Next.js (Monorepo)`.\n\n```bash\n? Would you like to start a new project?\r\n    Next.js\r\n❯   Next.js (Monorepo)\n```\n\nEsto creará un nuevo proyecto monorepo con dos espacios de trabajo: **web** e **interfaz de usuario**, y Turborepo como sistema de compilación.\n\nTodo está configurado para que puedas comenzar a agregar componentes a tu proyecto.\n\n**Nota**: El monorepo usa **React 19** y **Tailwind CSS v4**.\n\n### AGREGAR COMPONENTES A TU PROYECTO\n\nPara agregar componentes a tu proyecto, ejecuta el comando `add` en la ruta de tu aplicación.\n\n```bash\ncd apps/web\r\n\n```\n\nLa ***CLI*** determinará qué tipo de componente estás agregando e instalará los archivos correctos en la ruta correcta.\n\nPor ejemplo, si ejecutas` npx shadcn@canary add button`, la ***CLI*** instalará el componente de botón en `packages/ui` y actualizará la ruta de importación para los componentes en `apps/web`.\n\nSi ejecutas `npx shadcn@canary add login-01`, la **CLI** instalará los componentes de botón, etiqueta, entrada y tarjeta en `packages/ui` y el componente de formulario de inicio de sesión en `apps/web/components`.\n\n### IMPORTACION DE COMPONENTES\n\nPuede importar componentes desde el paquete @workspace/ui de la siguiente manera:\n\n```tsx\nimport { Button } from \"@workspace/ui/components/button\"\n```\n\nTambién puedes importar hooks y utilidades desde el paquete @workspace/ui.\n\n```tsx\nimport { useTheme } from \"@workspace/ui/hooks/use-theme\"\r\nimport { cn } from \"@workspace/ui/lib/utils\"\n```\n\n## ESTRUCTURA DE ARCHIVOS\n\nCuando crea un nuevo proyecto monorepo, la ***CLI*** creará la siguiente estructura de archivos:\n\n```bash\napps\r\n└── web         # Your app goes here.\r\n    ├── app\r\n    │   └── page.tsx\r\n    ├── components\r\n    │   └── login-form.tsx\r\n    ├── components.json\r\n    └── package.json\r\npackages\r\n└── ui          # Your components and dependencies are installed here.\r\n    ├── src\r\n    │   ├── components\r\n    │   │   └── button.tsx\r\n    │   ├── hooks\r\n    │   ├── lib\r\n    │   │   └── utils.ts\r\n    │   └── styles\r\n    │       └── globals.css\r\n    ├── components.json\r\n    └── package.json\r\npackage.json\r\nturbo.json\r\n\n```\n\n## REQUISITOS\n\n1. Cada espacio de trabajo debe tener un archivo `component.json`. Un archivo `package.json` le indica a `npm` cómo instalar las dependencias. Un archivo `component.json` le indica a la ***CLI*** cómo y dónde instalar los componentes.\n\n2. El archivo `component.json` debe definir correctamente los alias para el espacio de trabajo. Esto le indica a la ***CLI*** cómo importar componentes, hooks, utilidades, etc.\n\n3) Asegúrate de tener el mismo estilo, `iconLibrary` y `baseColor` en ambos archivos `component.json`.\n\n4) Para ***Tailwind CSS v4***, deja la configuración de Tailwind vacía en el archivo `component.json`.\n\nSi sigues estos requisitos, la ***CLI*** podrá instalar componentes de la interfaz de usuario, bloques, bibliotecas y hooks en las rutas correctas y gestionar las importaciones por ti.\n"
  },
  {
    "slug": "/frameworks/shadcn-ui/shadcn-cli",
    "title": "Shadcn CLI",
    "description": "Utilice la CLI shadcn para agregar componentes a su proyecto.",
    "content": "<CardGrid>\n  <Card title=\"Tematización\" href=\"https://ui.shadcn.com/docs/cli\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n</CardGrid>\n\n***\n\n## `init`\n\nUse el comando `init` para inicializar la configuración y las dependencias de un nuevo proyecto.\n\nEl comando `init` instala las dependencias, agrega la utilidad `cn` y configura las variables **CSS** para el proyecto.\n\n### OPCIONES `init`\n\n```bash\nUsage: shadcn init [options] [components...]\r\n\r\ninitialize your project and install dependencies\r\n\r\nArguments:\r\n    components         the components to add or a url to the component.\r\n\r\nOptions:\r\n    -y, --yes           skip confirmation prompt. (default: true)\r\n    -d, --defaults,     use default configuration. (default: false)\r\n    -f, --force         force overwrite of existing configuration. (default: false)\r\n    -c, --cwd <cwd>     the working directory. defaults to the current directory. (default: \"/Users/shadcn/Desktop\")\r\n    -s, --silent        mute output. (default: false)\r\n    --src-dir           use the src directory when creating a new project. (default: false)\r\n    --no-src-dir        do not use the src directory when creating a new project.\r\n    --css-variables     use css variables for theming. (default: true)\r\n    --no-css-variables  do not use css variables for theming.\r\n    -h, --help          display help for command\n```\n\n## `add`\n\nUtilice el comando `add` para agregar componentes y dependencias a su proyecto.\n\n### OPCIONES `add`\n\n```bash\nUsage: shadcn add [options] [components...]\r\n\r\nadd a component to your project\r\n\r\nArguments:\r\n    components         the components to add or a url to the component.\r\n\r\nOptions:\r\n    -y, --yes           skip confirmation prompt. (default: false)\r\n    -o, --overwrite     overwrite existing files. (default: false)\r\n    -c, --cwd <cwd>     the working directory. defaults to the current directory. (default: \"/Users/shadcn/Desktop\")\r\n    -a, --all           add all available components (default: false)\r\n    -p, --path <path>   the path to add the component to.\r\n    -s, --silent        mute output. (default: false)\r\n    --src-dir           use the src directory when creating a new project. (default: false)\r\n    --no-src-dir        do not use the src directory when creating a new project.\r\n    --css-variables     use css variables for theming. (default: true)\r\n    --no-css-variables  do not use css variables for theming.\r\n    -h, --help          display help for command\n```\n\n## `build`\n\nUtilice el comando `build` para generar los archivos **JSON** del registro.\n\nEste comando lee el archivo `registry.json` y genera los archivos **JSON** del registro en el directorio `public/r`.\n\n## OPCIONES `build`\n\n```bash\nUsage: shadcn build [options] [registry]\r\n\r\nbuild components for a shadcn registry\r\n\r\nArguments:\r\n    registry             path to registry.json file (default: \"./registry.json\")\r\n\r\nOptions:\r\n    -o, --output <path>  destination directory for json files (default: \"./public/r\")\r\n    -c, --cwd <cwd>      the working directory. defaults to the current directory. (default:\r\n                        \"/Users/shadcn/Code/shadcn/ui/packages/shadcn\")\r\n    -h, --help           display help for command\r\n\n```\n\nPara personalizar el directorio de salida, utilice la opción `--output`.\n"
  },
  {
    "slug": "/frameworks/shadcn-ui/theming",
    "title": "Tematización",
    "description": "Uso de variables CSS y utilidades de color para temas.",
    "content": "<CardGrid>\n  <Card title=\"Tematización\" href=\"https://ui.shadcn.com/docs/components-json\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n</CardGrid>\n\n***\n\nPuede elegir entre utilizar variables **CSS** (recomendado) o clases de utilidad para la creación de temas.\n\n## VARIABLES CSS\n\n```tsx\n<div className=\"bg-background text-foreground\" />\n```\n\nPara usar variables **CSS** para la creación de temas, configure `tailwind.cssVariables` como verdadero en su archivo `component.json`.\n\n`component.json`\n\n```json\n{\r\n    \"style\": \"default\",\r\n    \"rsc\": true,\r\n    \"tailwind\": {\r\n        \"config\": \"\",\r\n        \"css\": \"app/globals.css\",\r\n        \"baseColor\": \"neutral\",\r\n        \"cssVariables\": true\r\n    },\r\n    \"aliases\": {\r\n        \"components\": \"@/components\",\r\n        \"utils\": \"@/lib/utils\",\r\n        \"ui\": \"@/registry/new-york-v4/ui\",\r\n        \"lib\": \"@/lib\",\r\n        \"hooks\": \"@/hooks\"\r\n    },\r\n    \"iconLibrary\": \"lucide\"\r\n}\r\n\n```\n\n## CLASES DE UTILIDAD\n\n```tsx\n<div className=\"bg-zinc-950 dark:bg-white\" />\n```\n\nPara usar clases de utilidad para la creación de temas, configure `tailwind.cssVariables` como `false` en su archivo `component.json`.\n\n`component.json`\n\n```json\n    {\r\n    \"style\": \"default\",\r\n    \"rsc\": true,\r\n    \"tailwind\": {\r\n        \"config\": \"\",\r\n        \"css\": \"app/globals.css\",\r\n        \"baseColor\": \"slate\",\r\n        \"cssVariables\": false\r\n    },\r\n    \"aliases\": {\r\n        \"components\": \"@/components\",\r\n        \"utils\": \"@/lib/utils\",\r\n        \"ui\": \"@/registry/new-york-v4/ui\",\r\n        \"lib\": \"@/lib\",\r\n        \"hooks\": \"@/hooks\"\r\n    },\r\n    \"iconLibrary\": \"lucide\"\r\n}\r\n\n```\n\n## CONVENCION\n\nUtilizamos una convención simple de fondo y primer plano para los colores. La variable de fondo se utiliza para el color de fondo del componente y la variable de primer plano se utiliza para el color del texto.\n\n<Note>\n  El sufijo de fondo se omite cuando la variable se utiliza para el color de fondo del componente.\n</Note>\n\nDadas las siguientes variables CSS:\n\n```css\n--primary: oklch(0.205 0 0);\r\n--primary-foreground: oklch(0.985 0 0);\n```\n\nEl color de fondo del siguiente componente será `var(--primary)` y el color de primer plano será `var(--primary-foreground)`.\n\n```tsx\n<div className=\"bg-primary text-primary-foreground\">Hello</div>\n```\n\n## LISTA DE VARIABLES\n\nA continuación se muestra la lista de variables disponibles para personalización:\n\n`app/globals.css`\n\n```css\n:root {\r\n    --background: oklch(1 0 0);\r\n    --foreground: oklch(0.145 0 0);\r\n    --card: oklch(1 0 0);\r\n    --card-foreground: oklch(0.145 0 0);\r\n    --popover: oklch(1 0 0);\r\n    --popover-foreground: oklch(0.145 0 0);\r\n    --primary: oklch(0.205 0 0);\r\n    --primary-foreground: oklch(0.985 0 0);\r\n    --secondary: oklch(0.97 0 0);\r\n    --secondary-foreground: oklch(0.205 0 0);\r\n    --muted: oklch(0.97 0 0);\r\n    --muted-foreground: oklch(0.556 0 0);\r\n    --accent: oklch(0.97 0 0);\r\n    --accent-foreground: oklch(0.205 0 0);\r\n    --destructive: oklch(0.577 0.245 27.325);\r\n    --destructive-foreground: oklch(0.577 0.245 27.325);\r\n    --border: oklch(0.922 0 0);\r\n    --input: oklch(0.922 0 0);\r\n    --ring: oklch(0.708 0 0);\r\n    --chart-1: oklch(0.646 0.222 41.116);\r\n    --chart-2: oklch(0.6 0.118 184.704);\r\n    --chart-3: oklch(0.398 0.07 227.392);\r\n    --chart-4: oklch(0.828 0.189 84.429);\r\n    --chart-5: oklch(0.769 0.188 70.08);\r\n    --radius: 0.625rem;\r\n    --sidebar: oklch(0.985 0 0);\r\n    --sidebar-foreground: oklch(0.145 0 0);\r\n    --sidebar-primary: oklch(0.205 0 0);\r\n    --sidebar-primary-foreground: oklch(0.985 0 0);\r\n    --sidebar-accent: oklch(0.97 0 0);\r\n    --sidebar-accent-foreground: oklch(0.205 0 0);\r\n    --sidebar-border: oklch(0.922 0 0);\r\n    --sidebar-ring: oklch(0.708 0 0);\r\n}\r\n\r\n.dark {\r\n    --background: oklch(0.145 0 0);\r\n    --foreground: oklch(0.985 0 0);\r\n    --card: oklch(0.145 0 0);\r\n    --card-foreground: oklch(0.985 0 0);\r\n    --popover: oklch(0.145 0 0);\r\n    --popover-foreground: oklch(0.985 0 0);\r\n    --primary: oklch(0.985 0 0);\r\n    --primary-foreground: oklch(0.205 0 0);\r\n    --secondary: oklch(0.269 0 0);\r\n    --secondary-foreground: oklch(0.985 0 0);\r\n    --muted: oklch(0.269 0 0);\r\n    --muted-foreground: oklch(0.708 0 0);\r\n    --accent: oklch(0.269 0 0);\r\n    --accent-foreground: oklch(0.985 0 0);\r\n    --destructive: oklch(0.396 0.141 25.723);\r\n    --destructive-foreground: oklch(0.637 0.237 25.331);\r\n    --border: oklch(0.269 0 0);\r\n    --input: oklch(0.269 0 0);\r\n    --ring: oklch(0.556 0 0);\r\n    --chart-1: oklch(0.488 0.243 264.376);\r\n    --chart-2: oklch(0.696 0.17 162.48);\r\n    --chart-3: oklch(0.769 0.188 70.08);\r\n    --chart-4: oklch(0.627 0.265 303.9);\r\n    --chart-5: oklch(0.645 0.246 16.439);\r\n    --sidebar: oklch(0.205 0 0);\r\n    --sidebar-foreground: oklch(0.985 0 0);\r\n    --sidebar-primary: oklch(0.488 0.243 264.376);\r\n    --sidebar-primary-foreground: oklch(0.985 0 0);\r\n    --sidebar-accent: oklch(0.269 0 0);\r\n    --sidebar-accent-foreground: oklch(0.985 0 0);\r\n    --sidebar-border: oklch(0.269 0 0);\r\n    --sidebar-ring: oklch(0.439 0 0);\r\n}\n```\n\n## COMO AGREGAR NUEVOS COLORES\n\nPara agregar nuevos colores, debes agregarlos a tu archivo CSS y a tu archivo `tailwind.config.js`.\n\n`app/globals.css`\n\n```css\n:root {\r\n    --warning: oklch(0.84 0.16 84);\r\n    --warning-foreground: oklch(0.28 0.07 46);\r\n}\r\n\r\n.dark {\r\n    --warning: oklch(0.41 0.11 46);\r\n    --warning-foreground: oklch(0.99 0.02 95);\r\n}\r\n\r\n@theme inline {\r\n    --color-warning: var(--warning);\r\n    --color-warning-foreground: var(--warning-foreground);\r\n}\n```\n\nAhora puede utilizar la clase de utilidad de advertencia en sus componentes.\n\n```tsx\n<div className=\"bg-warning text-warning-foreground\" />\n```\n"
  },
  {
    "slug": "/programming/git/commands",
    "title": "Comandos de Git",
    "description": "Exploración detallada de los comandos de Git esenciales para la gestión de versiones en proyectos de software.",
    "content": "La sección de comandos de Git es el corazón de la herramienta.  Permite controlar el versionado de tu código. Comandos como `add`, `commit`, `push`, `pull`, `branch`, `merge`, y `rebase` son esenciales.  `add` prepara cambios, `commit` guarda esos cambios localmente, `push` sube los cambios a un repositorio remoto, `pull` descarga los cambios remotos, `branch` crea ramificaciones para desarrollo paralelo, y `merge` y `rebase` integran cambios de diferentes ramas. Dominar estos comandos es clave para una gestión eficiente del código con Git.\n\n## COMANDOS FUNDAMENTALES DE GIT\n\nA continuación, se describen los comandos de Git más utilizados, agrupados por su función principal:\n\n### 1. CONFIGURACION E INICIALIZACION\n\n* **`git config`**:  Configura las opciones de Git, como el nombre de usuario, el correo electrónico, el editor de texto predeterminado, etc.  Se puede configurar a nivel local (para un solo repositorio), global (para todos los repositorios del usuario) o de sistema (para todos los usuarios del sistema).\n\n  ```bash\n  git config --global user.name \"Tu Nombre\"\r\n  git config --global user.email \"tu_correo@ejemplo.com\"\n  ```\n\n* **`git init`**:  Inicializa un nuevo repositorio de Git en el directorio actual.  Crea un directorio oculto `.git` que contiene la información de configuración del repositorio.\n\n  ```bash\n  git init\n  ```\n\n* **`git clone`**:  Crea una copia local de un repositorio remoto existente. Descarga todos los archivos y el historial completo del repositorio.\n\n  ```bash\n  git clone https://github.com/usuario/repositorio.git\n  ```\n\n### 2.  GESTION DE CAMBIOS\n\n* **`git status`**:  Muestra el estado actual del repositorio, incluyendo los archivos modificados, los archivos en stage (preparados para el commit) y los archivos sin seguimiento.\n\n  ```bash\n  git status\n  ```\n\n* **`git add`**:  Añade los archivos modificados al área de stage (staging area).  El área de stage es una zona intermedia donde se preparan los cambios que se van a incluir en el próximo commit.\n\n  ```bash\n  git add archivo.txt\r\n  git add .  # Añade todos los archivos modificados\n  ```\n\n* **`git commit`**:  Guarda los cambios que están en el área de stage en el historial del repositorio.  Cada commit tiene un mensaje descriptivo que explica los cambios realizados.\n\n  ```bash\n  git commit -m \"Mensaje descriptivo del commit\"\n  ```\n\n* **`git rm`**:  Elimina un archivo del repositorio y del sistema de archivos.\n\n  ```bash\n  git rm archivo.txt\r\n  git commit -m \"Elimina archivo.txt\"\n  ```\n\n* **`git mv`**:  Renombra o mueve un archivo en el repositorio.\n\n  ```bash\n  git mv archivo_viejo.txt archivo_nuevo.txt\r\n  git commit -m \"Renombra archivo_viejo.txt a archivo_nuevo.txt\"\n  ```\n\n### 3.  RAMAS (BRANCHES)\n\n* **`git branch`**:  Lista, crea o elimina ramas. Una rama es una línea de desarrollo independiente del tronco principal (master o main).\n\n  ```bash\n  git branch  # Lista las ramas locales\r\n  git branch nueva_rama  # Crea una nueva rama llamada \"nueva_rama\"\r\n  git branch -d rama_a_eliminar # Elimina una rama (si ya se ha fusionado)\r\n  git branch -D rama_a_eliminar # Elimina una rama (forzando la eliminación)\n  ```\n\n* **`git checkout`**:  Cambia entre ramas.  Permite trabajar en diferentes líneas de desarrollo sin afectar la rama principal.\n\n  ```bash\n  git checkout nueva_rama  # Cambia a la rama \"nueva_rama\"\r\n  git checkout -b nueva_rama # Crea y cambia a la rama \"nueva_rama\"\n  ```\n\n* **`git merge`**:  Fusiona los cambios de una rama en otra.  Combina el historial de las dos ramas.\n\n  ```bash\n  git checkout master\r\n  git merge nueva_rama # Fusiona los cambios de \"nueva_rama\" en \"master\"\n  ```\n\n* **`git rebase`**:  Integra los cambios de una rama en otra moviendo la base de la rama actual a la base de la otra rama.  Produce un historial más limpio que `git merge`, pero puede ser más complejo de usar y potencialmente peligroso si no se entiende bien.\n\n  ```bash\n  git checkout nueva_rama\r\n  git rebase master # Mueve la base de \"nueva_rama\" a la última versión de \"master\"\n  ```\n\n### 4.  TRABAJO REMOTO\n\n* **`git remote add <nombre> <url>`**:  Añade una nueva conexión a un repositorio remoto.  `<nombre>` es un alias que le das al repositorio remoto (por ejemplo, `origin`, `upstream`).  `<url>` es la URL del repositorio remoto (por ejemplo, `https://github.com/usuario/repositorio.git`).\n\n  ```bash\n  git remote add origin https://github.com/usuario/repositorio.git\r\n  git remote add upstream https://github.com/otro_usuario/repositorio.git\n  ```\n\n  ```\n  ```\n\n* **`git remote rename <viejo_nombre> <nuevo_nombre>`**:  Renombra una conexión remota existente.\n\n  ```bash\n  git remote rename origin nuevo_origin\n  ```\n\n* **`git remote remove <nombre>` o `git remote rm <nombre>`**:  Elimina una conexión remota.\n\n  ```bash\n  git remote remove origin\n  ```\n\n* **`git remote set-url <nombre> <nueva_url>`**:  Cambia la URL asociada a una conexión remota existente.\n\n  ```bash\n  git remote set-url origin https://nuevo_dominio/usuario/repositorio.git\n  ```\n\n* **`git remote show <nombre>`**:  Muestra información detallada sobre una conexión remota específica, incluyendo la URL, las ramas rastreadas, las ramas locales que están configuradas para hacer push a ese remoto, y más.\n\n  ```bash\n  git remote show origin\n  ```\n\n* **`git remote update <nombre>`**:  Descarga información actualizada sobre las ramas y etiquetas del repositorio remoto especificado, sin fusionar los cambios en tus ramas locales.  Es similar a `git fetch`, pero se centra en actualizar la información de seguimiento de las ramas remotas.\n\n  ```bash\n  git remote update origin\n  ```\n\n* **`git remote prune <nombre>`**:  Elimina las referencias a ramas remotas que ya no existen en el repositorio remoto.  Esto ayuda a mantener tu repositorio local limpio y actualizado.\n\n  ```bash\n  git remote prune origin\n  ```\n\n* **`git fetch`**:  Descarga los cambios de un repositorio remoto sin fusionarlos en la rama local.  Permite inspeccionar los cambios antes de integrarlos.\n\n  ```bash\n  git fetch origin\n  ```\n\n* **`git pull`**:  Descarga los cambios de un repositorio remoto y los fusiona automáticamente en la rama local.  Es una combinación de `git fetch` y `git merge`.\n\n  ```bash\n  git pull origin master # Descarga y fusiona los cambios de la rama \"master\" del repositorio \"origin\"\n  ```\n\n* **`git push`**:  Sube los cambios de la rama local a un repositorio remoto.\n\n  ```bash\n  git push origin master # Sube los cambios de la rama \"master\" al repositorio \"origin\"\r\n  git push -u origin master # Establece el rastreo entre la rama local y la rama remota (solo la primera vez)\n  ```\n\n### 5.  DESHACER CAMBIOS\n\n* **`git reset`**:  Revierte el estado del repositorio a un commit anterior.  Puede modificar el área de stage, los archivos modificados o incluso el historial del repositorio, dependiendo del tipo de reset que se utilice.\n\n  * `git reset --soft <commit>`:  Mueve el HEAD al commit especificado, pero mantiene los cambios en el área de stage.\n  * `git reset --mixed <commit>`:  Mueve el HEAD al commit especificado y elimina los cambios del área de stage, dejándolos como archivos modificados.  (Este es el comportamiento predeterminado si no se especifica ningún tipo).\n  * `git reset --hard <commit>`:  Mueve el HEAD al commit especificado y descarta todos los cambios en el área de stage y los archivos modificados.  ¡PELIGRO!  Esta opción puede provocar la pérdida de datos si no se usa con cuidado.\n\n  ```bash\n  git reset --soft HEAD^ # Revierte al commit anterior (mantiene los cambios en stage)\r\n  git reset --hard  a1b2c3d # Revierte al commit con hash a1b2c3d (descarta todos los cambios)\n  ```\n\n* **`git revert`**:  Crea un nuevo commit que deshace los cambios introducidos por un commit anterior.  No modifica el historial existente, sino que añade un nuevo commit que revierte los cambios.  Es una forma segura de deshacer cambios, ya que no altera el historial.\n\n  ```bash\n  git revert a1b2c3d # Crea un nuevo commit que deshace los cambios del commit con hash a1b2c3d\n  ```\n\n### 6. OTROS COMANDOS UTILES\n\n* **`git log`**:  Muestra el historial de commits del repositorio. Permite ver la fecha, el autor, el mensaje y el hash de cada commit.\n\n  ```bash\n  git log\r\n  git log --oneline # Muestra el historial en una sola línea por commit\r\n  git log --graph # Muestra el historial como un gráfico\r\n  git log --author=\"Tu Nombre\" # Muestra los commits realizados por un autor específico\n  ```\n\n  Para salir de `git log`, solo basta presionar la letra ***Q***.\n\n* **`git diff`**:  Muestra las diferencias entre archivos, commits o ramas.\n\n  ```bash\n  git diff # Muestra las diferencias entre el área de stage y los archivos modificados\r\n  git diff HEAD # Muestra las diferencias entre el último commit y los archivos modificados\r\n  git diff rama1 rama2 # Muestra las diferencias entre las ramas rama1 y rama2\n  ```\n\n* **`git stash`**:  Guarda temporalmente los cambios no confirmados.  Permite cambiar de rama o realizar otras tareas sin tener que hacer commit de los cambios incompletos.\n\n  ```bash\n  git stash # Guarda los cambios no confirmados\r\n  git stash pop # Recupera los últimos cambios guardados\r\n  git stash list # Lista los stashes guardados\r\n  git stash apply stash@{2} # Aplica un stash específico\n  ```\n\n* **`.gitignore`**:  Un archivo que especifica los archivos y directorios que Git debe ignorar.  Es útil para evitar que archivos temporales, archivos de configuración o archivos generados automáticamente se incluyan en el repositorio.\n\n  ```text\n  # Ejemplo de archivo .gitignore\r\n  *.log\r\n  tmp/\r\n  config.ini\n  ```\n"
  },
  {
    "slug": "/programming/git/github",
    "title": "GitHub",
    "description": "Plataforma de desarrollo colaborativo basada en la nube para el control de versiones con Git.",
    "content": "GitHub es una plataforma de desarrollo colaborativo basada en la nube que permite a los desarrolladores almacenar, gestionar y controlar las versiones de su código. Es una herramienta esencial en el mundo del desarrollo de software moderno, facilitando la colaboración, el seguimiento de cambios y la gestión de proyectos de cualquier tamaño. GitHub se basa en el sistema de control de versiones distribuido Git, lo que significa que cada desarrollador tiene una copia completa del repositorio del proyecto en su máquina local, permitiendo trabajar de forma offline y sincronizar los cambios posteriormente.\n\n### HISTORIA\n\nGitHub fue fundado en 2008 por Tom Preston-Werner, Chris Wanstrath, PJ Hyett y Scott Chacon. La idea surgió de la necesidad de una plataforma que facilitara la colaboración entre desarrolladores utilizando Git. Antes de GitHub, Git era utilizado principalmente a través de la línea de comandos, lo que podía ser intimidante para algunos. GitHub proporcionó una interfaz web intuitiva y características adicionales que hicieron que Git fuera más accesible y atractivo para una audiencia más amplia.\n\nLa plataforma rápidamente ganó popularidad en la comunidad de código abierto, convirtiéndose en el hogar de miles de proyectos. En 2018, Microsoft adquirió GitHub por 7.5 mil millones de dólares, una decisión que generó tanto entusiasmo como preocupación en la comunidad. Sin embargo, Microsoft ha mantenido su compromiso de apoyar el código abierto y ha continuado invirtiendo en la plataforma, mejorando sus características y servicios.\n\n### OBJETIVOS CLAVE\n\n* **Control de Versiones:** GitHub permite a los desarrolladores realizar un seguimiento de todos los cambios realizados en el código a lo largo del tiempo. Esto facilita la identificación y corrección de errores, la reversión a versiones anteriores y la comprensión de la evolución del proyecto.\n* **Colaboración:** GitHub facilita la colaboración entre desarrolladores, permitiendo que varios miembros del equipo trabajen en el mismo proyecto simultáneamente. A través de características como pull requests y issues, los desarrolladores pueden revisar el código de otros, discutir cambios y contribuir al proyecto de manera organizada.\n* **Gestión de Proyectos:** GitHub proporciona herramientas para la gestión de proyectos, como la capacidad de crear y asignar tareas, establecer hitos y realizar un seguimiento del progreso. Esto ayuda a los equipos a mantenerse organizados y a cumplir con los plazos.\n* **Descubrimiento de Código:** GitHub es una plataforma donde los desarrolladores pueden descubrir y explorar proyectos de código abierto. Esto fomenta el aprendizaje, la reutilización de código y la contribución a la comunidad.\n* **Automatización:** GitHub Actions permite automatizar tareas de desarrollo de software, como pruebas, integración continua y despliegue. Esto ayuda a los equipos a mejorar la eficiencia y la calidad de su trabajo.\n\n### CARACTERISTICAS PRINCIPALES\n\n* **Repositorios:** Los repositorios son el corazón de GitHub. Un repositorio es un directorio donde se almacenan todos los archivos de un proyecto, junto con el historial de cambios. Los repositorios pueden ser públicos (accesibles para todos) o privados (accesibles solo para los miembros del equipo).\n* **Branches:** Las branches (ramas) permiten a los desarrolladores trabajar en nuevas características o correcciones de errores sin afectar la rama principal del proyecto (generalmente llamada \"main\" o \"master\"). Una vez que los cambios están listos, se pueden fusionar (merge) de nuevo en la rama principal.\n* **Commits:** Un commit es una instantánea de los cambios realizados en el código en un momento dado. Cada commit tiene un mensaje que describe los cambios realizados.\n* **Pull Requests:** Los pull requests (solicitudes de extracción) son una forma de proponer cambios a un repositorio. Un desarrollador crea una branch, realiza los cambios necesarios y luego envía un pull request para que otros miembros del equipo revisen el código.\n* **Issues:** Los issues (problemas) se utilizan para realizar un seguimiento de errores, solicitar nuevas características o discutir ideas. Los issues pueden ser asignados a miembros del equipo, etiquetados y cerrados una vez que se han resuelto.\n* **Forking:** Forking permite a los desarrolladores crear una copia de un repositorio en su propia cuenta. Esto les permite realizar cambios en el código sin afectar el repositorio original. Si desean contribuir con sus cambios al repositorio original, pueden enviar un pull request.\n* **GitHub Actions:** GitHub Actions es una plataforma de automatización que permite a los desarrolladores crear flujos de trabajo personalizados para automatizar tareas de desarrollo de software.\n\n### FLUJO DE TRABAJO TIPICO\n\n1. **Crear un Repositorio:** El primer paso es crear un repositorio en GitHub para el proyecto.\n2. **Clonar el Repositorio:** Clonar el repositorio en la máquina local del desarrollador utilizando el comando `git clone`.\n3. **Crear una Branch:** Crear una nueva branch para trabajar en una nueva característica o corrección de errores.\n4. **Realizar Cambios:** Realizar los cambios necesarios en el código.\n5. **Commit los Cambios:** Commit los cambios con un mensaje descriptivo utilizando el comando `git commit`.\n6. **Subir los Cambios:** Subir los cambios a la branch remota en GitHub utilizando el comando `git push`.\n7. **Crear un Pull Request:** Crear un pull request para que otros miembros del equipo revisen el código.\n8. **Revisar el Código:** Los miembros del equipo revisan el código y proporcionan comentarios.\n9. **Fusionar el Pull Request:** Una vez que el código ha sido aprobado, el pull request se puede fusionar en la rama principal.\n\n### INFORMACION ADICIONAL\n\n* GitHub ofrece una variedad de planes de precios, incluyendo un plan gratuito para proyectos públicos y planes de pago para proyectos privados con características adicionales.\n* GitHub tiene una gran comunidad de usuarios y una amplia documentación disponible en su sitio web.\n* GitHub se integra con una variedad de herramientas y servicios de desarrollo de software, como IDEs, herramientas de integración continua y plataformas de despliegue.\n\nEn resumen, GitHub es una plataforma esencial para el desarrollo de software moderno, que facilita la colaboración, el control de versiones y la gestión de proyectos. Su amplia gama de características y su gran comunidad de usuarios la convierten en una herramienta indispensable para cualquier desarrollador.\n"
  },
  {
    "slug": "/programming/git/gitignore",
    "title": ".gitignore",
    "description": "Archivo de configuración para especificar archivos y directorios que Git debe ignorar.",
    "content": "El archivo `.gitignore` es un archivo de texto plano que reside en el directorio raíz de un repositorio Git. Su propósito principal es decirle a Git qué archivos y directorios no deben ser rastreados ni incluidos en los commits. Esto es crucial para mantener un repositorio limpio, evitar la inclusión de archivos sensibles (como contraseñas o claves privadas), y optimizar el rendimiento de Git al reducir la cantidad de archivos que necesita monitorear.\n\nEl archivo `.gitignore` utiliza patrones para especificar qué archivos y directorios deben ser ignorados. Estos patrones pueden ser nombres de archivos específicos, nombres de directorios, o patrones más generales utilizando comodines. Git evalúa estos patrones en orden, y si un archivo o directorio coincide con un patrón en `.gitignore`, se ignora.\n\n## FUNCIONAMIENTO BASICO\n\n1. **Ubicación:** El archivo `.gitignore` se coloca en el directorio raíz del repositorio. También se pueden crear archivos `.gitignore` en subdirectorios para aplicar reglas de ignorado específicas a esas carpetas. Las reglas en un archivo `.gitignore` de un subdirectorio tienen precedencia sobre las reglas en el archivo `.gitignore` del directorio raíz.\n\n2. **Sintaxis:** La sintaxis del archivo `.gitignore` es sencilla:\n\n   * Cada línea representa un patrón.\n   * Las líneas que comienzan con `#` son comentarios y se ignoran.\n   * Las líneas en blanco también se ignoran.\n   * Se pueden usar comodines para crear patrones más generales:\n     * `*`: Coincide con cero o más caracteres.\n     * `?`: Coincide con un solo carácter.\n     * `[]`: Coincide con un rango de caracteres.\n     * `**`: Coincide con cualquier número de directorios.\n   * Un prefijo `!` niega un patrón. Es decir, si un archivo coincide con un patrón negado, se incluirá incluso si coincide con un patrón anterior.\n   * Un `/` al final de un patrón indica que solo debe coincidir con un directorio.\n\n3. **Prioridad:** Git evalúa las reglas de ignorado en el siguiente orden:\n\n   1. Reglas leídas desde la línea de comandos (`git add -f`).\n   2. Reglas en el archivo `.gitignore` en el mismo directorio que el archivo o en cualquier directorio padre.\n   3. Reglas especificadas en el archivo `$GIT_DIR/info/exclude`.\n   4. Reglas especificadas en la configuración global de Git (core.excludesfile).\n\n## EJEMPLOS DE IMPLEMENTACION\n\nAquí hay algunos ejemplos de cómo usar `.gitignore`:\n\n1. **Ignorar archivos `.log`:**\n\n   ```\n   *.log\n   ```\n\n   Esto ignorará todos los archivos que tengan la extensión `.log` en cualquier directorio del repositorio.\n\n2. **Ignorar el directorio `node_modules`:**\n\n   ```\n   node_modules/\n   ```\n\n   Esto ignorará el directorio `node_modules` y todo su contenido.\n\n3. **Ignorar archivos `.DS_Store` (comunes en macOS):**\n\n   ```\n   .DS_Store\n   ```\n\n   Esto ignorará los archivos `.DS_Store` que macOS crea en cada directorio.\n\n4. **Ignorar todos los archivos `.txt` excepto `important.txt`:**\n\n   ```\n   *.txt\r\n   !important.txt\n   ```\n\n   Esto ignorará todos los archivos `.txt` excepto el archivo `important.txt`.\n\n5. **Ignorar un directorio específico y todos sus subdirectorios:**\n\n   ```\n   build/\n   ```\n\n   Esto ignorará el directorio `build` y todos sus subdirectorios y archivos.\n\n6. **Ignorar archivos de configuración locales:**\n\n   ```\n   config/local_settings.py\n   ```\n\n   Esto ignorará el archivo `local_settings.py` dentro del directorio `config`.\n\nEn resumen, el archivo `.gitignore` es una herramienta esencial para cualquier proyecto Git. Su uso adecuado ayuda a mantener el repositorio limpio, seguro y eficiente, facilitando la colaboración y el desarrollo a largo plazo.\n"
  },
  {
    "slug": "/programming/git",
    "title": "Git",
    "description": "Git es un sistema de control de versiones distribuido que rastrea los cambios en archivos y coordina el trabajo entre múltiples personas. Permite a los desarrolladores (y a cualquier persona) gestionar el historial de sus proyectos, colaborar fácilmente y revertir a versiones anteriores si es necesario. Cada persona tiene una copia completa del proyecto, lo que permite trabajar sin conexión y reduce la dependencia de un servidor central. Es la herramienta estándar para el desarrollo de software colaborativo moderno.",
    "content": "![GIT](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Git-logo.svg/800px-Git-logo.svg.png)\n\n## ¿QUE ES GIT?\n\nGit es un sistema de control de versiones distribuido (DVCS) diseñado para rastrear los cambios en archivos de computadora y coordinar el trabajo en esos archivos entre múltiples personas. En esencia, es una herramienta que permite a los desarrolladores gestionar el código fuente de manera eficiente y colaborativa, pero se puede usar para rastrear cambios en cualquier tipo de archivo (documentos, imágenes, configuraciones, etc.).\n\n### CARACTERISTICAS CLAVES\n\n* **Sistema de Control de Versiones Distribuido**: A diferencia de los sistemas centralizados (como Subversion o CVS), Git permite que cada desarrollador tenga una copia completa del repositorio, incluyendo todo el historial de cambios. Esto ofrece varias ventajas:\n\n* **Trabajo Offline**: Los desarrolladores pueden trabajar y hacer commits localmente sin necesidad de una conexión constante al servidor central.\n\n* **Rendimiento**: Las operaciones locales (como ver el historial o hacer commits) son mucho más rápidas, ya que no requieren acceso a la red.\n\n* **Resiliencia**: Si el servidor central falla, el proyecto no se pierde, ya que cada desarrollador tiene una copia completa.\n\n* **Ramas (Branching) y Combinación (Merging)**: Git facilita la creación de ramas (líneas de desarrollo paralelas) para implementar nuevas funcionalidades, corregir errores o experimentar con ideas. Luego, estas ramas se pueden combinar (merge) de nuevo en la rama principal. Este modelo de branching permite un flujo de trabajo flexible y no lineal.\n\n* **Eficiencia**: Git está diseñado para ser rápido y eficiente, incluso con proyectos muy grandes. Utiliza algoritmos de compresión y almacenamiento de datos inteligentes para minimizar el espacio en disco y el tiempo de acceso.\n\n* **Integridad de Datos**: Git utiliza un algoritmo de hash SHA-1 para identificar y rastrear cada cambio. Esto garantiza la integridad de los datos y detecta cualquier corrupción accidental.\n\n* **Área de Preparación (Staging Area)**: Git tiene un área de preparación intermedia entre el directorio de trabajo y el repositorio. Esto permite seleccionar los cambios específicos que se incluirán en el próximo commit, ofreciendo un control más granular sobre el historial.\n\n* **Gratuito y de Código Abierto**: Git es un proyecto de código abierto licenciado bajo la GPLv2, lo que significa que es gratuito para usar, modificar y distribuir.\n\n### OBJETIVOS DE GIT\n\n* **Control de Versiones**: Rastrear todos los cambios realizados en los archivos a lo largo del tiempo, permitiendo volver a versiones anteriores, comparar diferencias y auditar modificaciones.\n\n* **Colaboración**: Facilitar el trabajo en equipo en proyectos de software, permitiendo a múltiples desarrolladores trabajar simultáneamente en el mismo código base sin conflictos.\n\n* **Gestión de Ramas**: Proporcionar un modelo flexible para crear, combinar y gestionar ramas de desarrollo, lo que permite experimentar con nuevas funcionalidades sin afectar la estabilidad del proyecto principal.\n\n* **Desarrollo Paralelo**: Permitir que varios desarrolladores trabajen en diferentes partes del proyecto al mismo tiempo, sin interferir entre sí.\n\n* **Deshacer Cambios**: Ofrecer herramientas para deshacer cambios, revertir a versiones anteriores y corregir errores.\n\n* **Seguridad**: Garantizar la integridad de los datos y prevenir la pérdida de información.\n\n* **Auditoría**: Facilitar el seguimiento de quién hizo qué cambios y cuándo.\n\n* **Gestión de Grandes Proyectos**: Escalar bien para proyectos de software de gran tamaño con muchos archivos y un historial de cambios extenso.\n\n## INSTALACION\n\nLa instalación de Git varía dependiendo de tu sistema operativo. Aquí tienes las instrucciones para los sistemas más comunes:\n\n### 1. WINDOWS\n\n* **Descargar**: Descarga el instalador de Git para Windows desde el sitio web oficial: [https://git-scm.com/download/win](https://git-scm.com/download/win)\n\n* **Ejecutar**: Ejecuta el archivo descargado. Sigue los pasos del asistente de instalación. Puedes aceptar las opciones por defecto en la mayoría de los casos.\n\n* **Editor de Texto**: El instalador te preguntará qué editor de texto quieres usar con Git (por ejemplo, Notepad++, Visual Studio Code, Vim). Elige el que prefieras. Si no estás seguro, puedes dejar el valor por defecto (que suele ser Vim).\n\n* **Ajuste del PATH**: Asegúrate de que la opción \"Use Git from Git Bash only\" NO esté seleccionada, a menos que estés seguro de que solo quieres usar Git desde la línea de comandos de Git Bash. La opción recomendada es \"Git from the command line and also from 3rd-party software\".\n\n* **Terminal**: Puedes elegir el emulador de terminal que quieres usar con Git Bash (MinTTY o el terminal de Windows predeterminado).\n\n* **Verificar Instalación**: Abre una ventana de símbolo del sistema (cmd) o PowerShell y escribe git --version. Si Git está instalado correctamente, mostrará la versión instalada.\n\n### 2. MACOS\n\n1. ***Opción 1*** - Instalador (Recomendado)\n\n   * **Descargar**: Descarga el instalador de Git para macOS desde el sitio web oficial: [https://git-scm.com/download/mac](https://git-scm.com/download/mac)\n\n   * **Ejecutar**: Ejecuta el archivo descargado (normalmente un archivo .dmg), sigue las instrucciones del instalador.\n\n   * **Verificar**: Verifica la instalación abriendo una Terminal y escribiendo git --version.\n\n2. ***Opción 2*** - Homebrew\n\n   Si tienes Homebrew instalado, puedes instalar Git con el siguiente comando:\n\n   ```bash\n   brew install git\n   ```\n\n   * **Verificar**: Verifica la instalación abriendo una Terminal y escribiendo git --version.\n\n3. ***Opción 3*** - Xcode Command Line Tools\n\n   Si tienes Xcode instalado, Git puede ya estar presente como parte de las *Command Line Tools*. Abre la Terminal y escribe lo siguiente.\n\n   ```bash\n   git --version\n   ```\n\n   Si no está instalado, *macOS* te pedirá que instales las *Command Line Tools*.\n\n### 3. LINUX (Debian/Ubuntu)\n\nAbre una terminal y ejecuta el siguiente comando.\n\n```bash\nsudo apt update\r\nsudo apt install git\n```\n\nConfirma la instalación escribiendo.\n\n```bash\ngit --version\n```\n\n### 4. LINUX (Fedora/CentOS/RHEL):\n\nAbre una terminal y ejecuta el siguiente comando.\n\n```bash\nsudo dnf install git\r\n# o en sistemas más antiguos:\r\n# sudo yum install git\n```\n\nConfirma la instalación escribiendo.\n\n```bash\ngit --version\n```\n\n## CONFIGURACION INICIAL\n\nDespués de instalar Git, es importante configurar tu nombre de usuario y dirección de correo electrónico, ya que esta información se asociará con tus *commits*, reemplaza ***\"Tu Nombre\"*** y ***\"tu@email.com\"*** con tu información real. La opción `--global` guarda esta configuración para todos tus repositorios Git.\n\n```bash\ngit config --global user.name <tu nombre>\r\ngit config --global user.email <tu@email.com>\n```\n\nPuedes verificar tu configuración con los siguientes comandos\n\n```bash\ngit config --global user.name\r\ngit config --global user.email\n```\n"
  },
  {
    "slug": "/programming",
    "title": "Herramientas de Programación",
    "description": "Una visión general de los lenguajes de programación, su historia, tipos, paradigmas y ejemplos.",
    "content": ""
  },
  {
    "slug": "/programming/languages/bestpp",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages/dart",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages",
    "title": "Lenguajes de Programación",
    "description": "Una visión general de los lenguajes de programación, su historia, tipos, paradigmas y ejemplos.",
    "content": "## ¿QUE SON LOS LENGUAJES DE PROGRAMACION?\n\nUn **lenguaje de programación** es un sistema formal diseñado para expresar computaciones que pueden ser realizadas por una máquina, como una computadora. Permite a los programadores comunicar instrucciones a las computadoras en un formato que estas puedan entender y ejecutar.  En esencia, un lenguaje de programación actúa como un intermediario entre el pensamiento humano y la lógica binaria de las máquinas.\n\n### HISTORIA\n\nLa historia de los lenguajes de programación es tan antigua como la de las propias computadoras.\n\n* **Inicios (Década de 1940-1950):**  Las primeras computadoras se programaban directamente en código máquina, utilizando secuencias de 0s y 1s. Esto era extremadamente tedioso y propenso a errores.  Un hito importante fue la creación de **Short Code** en 1949, considerado uno de los primeros lenguajes de programación de alto nivel, aunque requería interpretación en cada ejecución.  **A-0** (1951) fue otro sistema temprano que facilitó la programación al permitir la especificación de operaciones mediante códigos numéricos.\n* **La Era de los Primeros Lenguajes de Alto Nivel (Década de 1950):**  La necesidad de simplificar la programación llevó al desarrollo de los primeros lenguajes de alto nivel.  **FORTRAN** (Formula Translation, 1957), creado por John Backus en IBM, fue diseñado para cálculos científicos e ingeniería.  **LISP** (List Processor, 1958), desarrollado por John McCarthy en el MIT, se centró en el procesamiento de listas y se convirtió en el lenguaje preferido para la investigación en inteligencia artificial.  **COBOL** (Common Business-Oriented Language, 1959), creado por Grace Hopper, se orientó a aplicaciones empresariales y procesamiento de datos.\n* **La Expansión y Diversificación (Década de 1960-1970):**  Esta época vio una explosión en la creación de lenguajes.  **ALGOL** (Algorithmic Language, 1960) influyó en el diseño de muchos lenguajes posteriores.  **BASIC** (Beginner's All-purpose Symbolic Instruction Code, 1964) fue diseñado para ser fácil de aprender y usar.  **Simula 67** introdujo conceptos de programación orientada a objetos.  **Pascal** (1970), creado por Niklaus Wirth, se diseñó para la enseñanza de la programación estructurada.  **C** (1972), desarrollado por Dennis Ritchie en Bell Labs, se convirtió en un lenguaje poderoso y versátil para la programación de sistemas.\n* **La Programación Orientada a Objetos (Década de 1980-1990):**  La programación orientada a objetos (POO) ganó popularidad.  **Smalltalk** (década de 1970, pero popularizado en los 80) fue uno de los primeros lenguajes puramente orientados a objetos.  **C++** (1983) añadió características de POO a C.  **Objective-C** se utilizó ampliamente en el desarrollo de software para Apple.\n* **La Era de Internet y los Lenguajes de Scripting (Década de 1990-2000):**  El auge de Internet impulsó la creación de lenguajes de scripting.  **Python** (1991), creado por Guido van Rossum, se destacó por su legibilidad y versatilidad.  **Java** (1995), desarrollado por Sun Microsystems, se diseñó para ser multiplataforma (\"escribe una vez, ejecuta en cualquier lugar\").  **JavaScript** (1995) se convirtió en el lenguaje estándar para la programación del lado del cliente en la web.  **PHP** (1995) se popularizó para el desarrollo de aplicaciones web dinámicas.\n* **El Siglo XXI: Diversificación y Especialización:**  La tendencia hacia la diversificación continúa.  **C#** (2000), desarrollado por Microsoft, se integra estrechamente con la plataforma .NET.  **Ruby** (1995) ganó popularidad con el framework Ruby on Rails.  **Go** (2009), desarrollado por Google, se diseñó para la programación de sistemas concurrentes.  **Swift** (2014), desarrollado por Apple, reemplazó a Objective-C como el lenguaje principal para el desarrollo de iOS y macOS.  **Kotlin** (2011) se ha convertido en un lenguaje popular para el desarrollo de Android.  Además, han surgido lenguajes especializados para áreas como ciencia de datos (R), aprendizaje automático (TensorFlow, PyTorch) y computación cuántica (Q#).\n\n### OBJETIVOS CLAVE\n\n* **Expresividad:**  Permitir a los programadores expresar algoritmos y lógica de manera clara y concisa.\n* **Legibilidad:**  Facilitar la comprensión del código por parte de otros programadores (y por el propio programador en el futuro).\n* **Eficiencia:**  Permitir la creación de programas que se ejecuten de manera rápida y utilicen los recursos de la computadora de manera eficiente.\n* **Portabilidad:**  Permitir que los programas se ejecuten en diferentes plataformas (sistemas operativos, arquitecturas de hardware) sin necesidad de modificaciones significativas.\n* **Confiabilidad:**  Facilitar la creación de programas que funcionen correctamente y sean robustos ante errores.\n* **Mantenibilidad:**  Facilitar la modificación y actualización del código a lo largo del tiempo.\n\n### TIPOS DE LENGUAJES DE PROGRAMACION\n\nLos lenguajes de programación se pueden clasificar de diversas maneras:\n\n* **Por Nivel de Abstracción:**\n  * **Lenguajes de Bajo Nivel:**  Están más cerca del hardware de la computadora.  Ejemplos:  Ensamblador, código máquina.  Ofrecen un control preciso sobre el hardware, pero son difíciles de programar.\n  * **Lenguajes de Alto Nivel:**  Son más abstractos y fáciles de usar.  Ejemplos:  Python, Java, C++.  Ofrecen mayor portabilidad y productividad, pero pueden ser menos eficientes en algunos casos.\n* **Por Paradigma de Programación:**\n  * **Imperativos:**  Describen *cómo* se debe realizar un cálculo, especificando una secuencia de instrucciones.  Ejemplos:  C, Pascal, FORTRAN.\n  * **Declarativos:**  Describen *qué* se debe calcular, sin especificar los detalles de la implementación.  Ejemplos:  SQL, Prolog, Haskell.\n  * **Orientados a Objetos:**  Organizan el código en torno a \"objetos\" que encapsulan datos y comportamiento.  Ejemplos:  Java, C++, Python, C#.\n  * **Funcionales:**  Basados en el concepto de funciones matemáticas.  Ejemplos:  Haskell, Lisp, Scala.\n* **Por Propósito:**\n  * **De Propósito General:**  Se pueden utilizar para una amplia variedad de tareas.  Ejemplos:  Python, Java, C++.\n  * **De Propósito Específico:**  Diseñados para tareas específicas.  Ejemplos:  SQL (bases de datos), R (estadística), MATLAB (cálculo numérico).\n* **Por Tipo de Ejecución:**\n  * **Compilados:**  El código fuente se traduce a código máquina ejecutable antes de la ejecución.  Ejemplos:  C, C++, Go.\n  * **Interpretados:**  El código fuente se ejecuta directamente por un intérprete, línea por línea.  Ejemplos:  Python, JavaScript, PHP.\n  * **Híbridos:**  Utilizan una combinación de compilación e interpretación.  Ejemplo:  Java (el código se compila a bytecode, que luego se interpreta por la JVM).\n\n### PARADIGMAS DE PROGRAMACION\n\nUn **paradigma de programación** es un estilo o \"filosofía\" de programación.  Define cómo se estructura y organiza el código.  Algunos de los paradigmas más comunes son:\n\n* **Programación Imperativa:**  Se basa en la ejecución secuencial de instrucciones que modifican el estado del programa.  El programador especifica paso a paso cómo se debe realizar un cálculo.\n* **Programación Orientada a Objetos (POO):**  Se basa en el concepto de \"objetos\" que encapsulan datos (atributos) y comportamiento (métodos).  La POO promueve la reutilización de código, la modularidad y la abstracción.\n* **Programación Funcional:**  Se basa en el concepto de funciones matemáticas puras, que no tienen efectos secundarios (no modifican el estado del programa).  La programación funcional promueve la inmutabilidad, la recursión y la composición de funciones.\n* **Programación Declarativa:**  Se centra en *qué* se debe calcular, en lugar de *cómo*.  El programador especifica las relaciones entre los datos y el sistema se encarga de encontrar la solución.\n\n### SINTAXIS Y SEMANTICA\n\n* **Sintaxis:**  Las reglas que definen la estructura válida de un programa.  Es como la gramática de un lenguaje natural.  Si un programa tiene errores de sintaxis, el compilador o intérprete no podrá entenderlo.\n* **Semántica:**  El significado de las construcciones del lenguaje.  Define qué hace un programa cuando se ejecuta.  Un programa puede ser sintácticamente correcto pero semánticamente incorrecto (por ejemplo, realizar un cálculo incorrecto).\n\n### COMPILADORES E INTERPRETES\n\n* **Compilador:**  Un programa que traduce el código fuente de un lenguaje de programación a código máquina (o a otro lenguaje intermedio).  El código compilado se puede ejecutar directamente por la computadora.\n* **Intérprete:**  Un programa que ejecuta el código fuente directamente, línea por línea.  No se genera un archivo ejecutable separado.\n\n## INFORMACION DE INTERES\n\n***Lenguajes de Dominio Específico (DSL)***: Lenguajes diseñados para un dominio específico, como el diseño de hardware (VHDL, Verilog) o la manipulación de datos (SQL).\n\n***Metaprogramación***: La capacidad de un programa para manipular otros programas (o a sí mismo) como datos. Algunos lenguajes, como Lisp y Smalltalk, son especialmente adecuados para la metaprogramación.\n\n***Evolución de los Lenguajes***: Los lenguajes de programación están en constante evolución, adaptándose a las nuevas tecnologías y necesidades. Nuevos lenguajes surgen regularmente, y los lenguajes existentes se actualizan con nuevas características y mejoras.\n\n***La Importancia de Elegir el Lenguaje Correcto***: La elección del lenguaje de programación adecuado depende del proyecto, los requisitos de rendimiento, la experiencia del equipo y otros factores. No existe un \"mejor\" lenguaje para todos los casos.\n\n## FUENTES DE INFORMACION\n\nWikipedia: https://es.wikipedia.org/wiki/Lenguaje\\_de\\_programaci%C3%B3n\n\nFreeCodeCamp: https://www.freecodecamp.org/news/what-is-a-programming-language/\n\nGeeksforGeeks: https://www.geeksforgeeks.org/programming-languages/\n\nEste documento proporciona una introducción general a los lenguajes de programación. Para obtener información más detallada sobre un lenguaje específico, se recomienda consultar la documentación oficial del lenguaje y otros recursos especializados.\n"
  },
  {
    "slug": "/programming/languages/javascript",
    "title": "Javascript",
    "description": "Lenguaje de programación esencial para el desarrollo web, conocido por su versatilidad y capacidad para crear experiencias interactivas en navegadores.",
    "content": "JavaScript es un lenguaje de programación de alto nivel, interpretado y multiparadigma. Esencialmente, es el lenguaje que da vida a la web, permitiendo la creación de páginas interactivas y dinámicas. Aunque inicialmente se diseñó para ejecutarse en navegadores web, su versatilidad lo ha llevado a ser utilizado en una amplia gama de entornos, desde el desarrollo de aplicaciones móviles hasta la programación del lado del servidor.\n\n## HISTORIA DE JAVASCRIPT\n\nJavaScript fue creado en 1995 por Brendan Eich, un programador de Netscape. Originalmente, se llamaba Mocha, luego LiveScript, y finalmente JavaScript. Su creación fue impulsada por la necesidad de añadir interactividad a las páginas web, que en ese entonces eran estáticas. Netscape Navigator 2.0 fue el primer navegador en soportar JavaScript, y rápidamente se convirtió en un estándar de la industria.\n\nA pesar de su nombre, JavaScript no está directamente relacionado con Java. El nombre \"JavaScript\" fue una estrategia de marketing para aprovechar la popularidad de Java en ese momento.\n\n## OBJETIVOS CLAVE DE JAVASCRIPT\n\n* **Interactividad:** Permitir a los desarrolladores crear páginas web que respondan a las acciones del usuario, como clics, movimientos del ratón y pulsaciones de teclas.\n* **Dinamismo:** Modificar el contenido de una página web en tiempo real, sin necesidad de recargar la página.\n* **Validación de datos:** Verificar la información ingresada por el usuario en formularios web antes de enviarla al servidor.\n* **Desarrollo Frontend:** Construir interfaces de usuario ricas y complejas para aplicaciones web.\n* **Desarrollo Backend:** Utilizar Node.js para crear aplicaciones del lado del servidor con JavaScript.\n* **Compatibilidad:** Funcionar en una amplia variedad de navegadores y dispositivos.\n\n## INFORMACION RELEVANTE SOBRE JAVASCRIPT\n\n### CARACTERISTICAS PRINCIPALES\n\n* **Lenguaje Interpretado:** El código JavaScript se ejecuta directamente en el navegador, sin necesidad de compilación previa.\n* **Tipado Dinámico:** El tipo de una variable se determina en tiempo de ejecución, lo que facilita la escritura de código pero requiere más pruebas para evitar errores.\n* **Multiparadigma:** Soporta programación orientada a objetos, programación funcional y programación imperativa.\n* **Basado en Prototipos:** Utiliza prototipos en lugar de clases para la herencia y la creación de objetos.\n* **Manejo de Eventos:** Permite responder a eventos del usuario, como clics, movimientos del ratón y pulsaciones de teclas.\n* **Asíncrono:** Facilita la ejecución de tareas en segundo plano sin bloquear la interfaz de usuario.\n\n### ECMASCRIPT\n\nECMAScript es el estándar que define la especificación del lenguaje JavaScript. A lo largo de los años, se han publicado varias versiones de ECMAScript, cada una con nuevas características y mejoras. Las versiones más recientes, como ES6 (ECMAScript 2015) y ES7 (ECMAScript 2016), han introducido características importantes como clases, módulos, funciones de flecha y promesas.\n\n### JAVASCRIPT EN EL FRONTEND\n\nEn el desarrollo frontend, JavaScript se utiliza para manipular el Document Object Model (DOM), que representa la estructura de una página web. Esto permite a los desarrolladores modificar el contenido, el estilo y el comportamiento de una página web en respuesta a las acciones del usuario.\n\n### JAVASCRIPT EN EL BACKEND\n\nNode.js es un entorno de ejecución de JavaScript que permite a los desarrolladores utilizar JavaScript para construir aplicaciones del lado del servidor. Esto significa que puedes usar el mismo lenguaje tanto en el frontend como en el backend, lo que facilita la colaboración y el intercambio de código entre los equipos de desarrollo.\n\n### FRAMEWORKS Y LIBRERIAS DE JAVASCRIPT\n\nExisten numerosos frameworks y librerías de JavaScript que facilitan el desarrollo de aplicaciones web complejas. Algunos de los más populares incluyen:\n\n* **React:** Una librería para construir interfaces de usuario, especialmente adecuada para aplicaciones con grandes cantidades de datos y componentes reutilizables.\n* **Angular:** Un framework completo para construir aplicaciones web de una sola página (SPA).\n* **Vue.js:** Un framework progresivo para construir interfaces de usuario, conocido por su facilidad de uso y flexibilidad.\n* **jQuery:** Una librería que simplifica la manipulación del DOM y la gestión de eventos.\n\n## PROCESO DE INSTALACION\n\nJavaScript no requiere una instalación explícita para ejecutarse en un navegador web. Simplemente necesitas un navegador moderno que soporte JavaScript. Para el desarrollo del lado del servidor con Node.js, debes instalar Node.js en tu sistema.\n\n1. **Descarga Node.js:** Visita el sitio web oficial de Node.js ([https://nodejs.org/](https://nodejs.org/)) y descarga la versión adecuada para tu sistema operativo.\n2. **Instala Node.js:** Ejecuta el instalador descargado y sigue las instrucciones.\n3. **Verifica la instalación:** Abre una terminal o línea de comandos y ejecuta el comando `node -v`. Esto debería mostrar la versión de Node.js instalada.\n4. **Instala un editor de código:** Puedes utilizar cualquier editor de código para escribir código JavaScript, como Visual Studio Code, Sublime Text o Atom.\n\n## FUENTES DE INVESTIGACION\n\n* **Mozilla Developer Network (MDN):** [https://developer.mozilla.org/](https://developer.mozilla.org/)\n* **ECMAScript Specification:** [https://www.ecma-international.org/](https://www.ecma-international.org/)\n* **Node.js Official Website:** [https://nodejs.org/](https://nodejs.org/)\n* **React Official Website:** [https://reactjs.org/](https://reactjs.org/)\n* **Angular Official Website:** [https://angular.io/](https://angular.io/)\n* **Vue.js Official Website:** [https://vuejs.org/](https://vuejs.org/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-backend/expressjs",
    "title": "Express.js",
    "description": "Framework de Node.js para construir aplicaciones web y APIs.",
    "content": "Express.js es un framework de aplicaciones web minimalista y flexible para Node.js. Proporciona un conjunto robusto de características para desarrollar aplicaciones web de una sola página, multipágina e híbridas, así como APIs (Interfaces de Programación de Aplicaciones). Se ha convertido en uno de los frameworks más populares para Node.js debido a su simplicidad, flexibilidad y la gran cantidad de middleware disponible.\n\n## OBJETIVOS CLAVE\n\n* **Simplicidad:** Ofrece una sintaxis clara y concisa que facilita el desarrollo de aplicaciones web.\n* **Flexibilidad:** Permite a los desarrolladores estructurar las aplicaciones de la manera que mejor se adapte a sus necesidades.\n* **Middleware:** Soporta el uso de middleware, funciones que pueden modificar las solicitudes y respuestas, lo que permite añadir funcionalidades de manera modular.\n* **Routing:** Proporciona un sistema de routing robusto para definir cómo la aplicación responde a las peticiones de los clientes.\n* **Comunidad:** Cuenta con una gran comunidad de desarrolladores que contribuyen con middleware y ofrecen soporte.\n\n## INSTALACION\n\nPara comenzar a utilizar Express.js, primero debes tener Node.js instalado en tu sistema. Una vez que tengas Node.js, puedes instalar Express.js utilizando npm (Node Package Manager):\n\n```bash\nnpm install express --save\n```\n\nEl flag `--save` añade Express.js como una dependencia en el archivo `package.json` de tu proyecto.\n\n## CREACION DE UN SERVIDOR BASICO\n\nA continuación, se muestra un ejemplo de cómo crear un servidor básico con Express.js:\n\n```javascript\n// Importa el módulo express\r\nconst express = require('express');\r\n\r\n// Crea una instancia de la aplicación express\r\nconst app = express();\r\n\r\n// Define el puerto en el que el servidor escuchará\r\nconst port = 3000;\r\n\r\n// Define una ruta para la raíz del sitio\r\napp.get('/', (req, res) => {\r\n  res.send('¡Hola Mundo!');\r\n});\r\n\r\n// Inicia el servidor y escucha en el puerto especificado\r\napp.listen(port, () => {\r\n  console.log(`La aplicación está escuchando en el puerto ${port}`);\r\n});\n```\n\nEste código crea un servidor que escucha en el puerto 3000 y responde con \"¡Hola Mundo!\" cuando se accede a la raíz del sitio (`/`).\n\n## ROUTING\n\nEl routing se refiere a la determinación de cómo una aplicación responde a una petición del cliente a un endpoint específico, que es una URI (Uniform Resource Identifier) y un método de petición HTTP específico (GET, POST, PUT, DELETE, etc.).\n\nExpress.js permite definir rutas utilizando los métodos HTTP estándar:\n\n```javascript\napp.get('/users', (req, res) => {\r\n  res.send('Lista de usuarios');\r\n});\r\n\r\napp.post('/users', (req, res) => {\r\n  res.send('Crear un nuevo usuario');\r\n});\r\n\r\napp.put('/users/:id', (req, res) => {\r\n  const userId = req.params.id;\r\n  res.send(`Actualizar usuario con ID ${userId}`);\r\n});\r\n\r\napp.delete('/users/:id', (req, res) => {\r\n  const userId = req.params.id;\r\n  res.send(`Eliminar usuario con ID ${userId}`);\r\n});\n```\n\nEn este ejemplo, se definen rutas para obtener, crear, actualizar y eliminar usuarios. El uso de `:id` en la ruta permite capturar parámetros de la URL.\n\n## MIDDLEWARE\n\nEl middleware son funciones que tienen acceso al objeto de petición (`req`), al objeto de respuesta (`res`) y a la siguiente función de middleware en el ciclo de petición/respuesta de la aplicación. Las funciones de middleware pueden realizar las siguientes tareas:\n\n* Ejecutar cualquier código.\n* Realizar cambios en los objetos de petición y respuesta.\n* Finalizar el ciclo de petición/respuesta.\n* Llamar a la siguiente función de middleware en la pila.\n\nExpress.js viene con varios middleware incorporados, como `express.static` para servir archivos estáticos y `express.json` para analizar el cuerpo de las peticiones con formato JSON. También puedes crear tu propio middleware:\n\n```javascript\n// Middleware personalizado para registrar la hora de cada petición\r\nconst logger = (req, res, next) => {\r\n  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);\r\n  next(); // Llama a la siguiente función de middleware\r\n};\r\n\r\n// Aplica el middleware a todas las rutas\r\napp.use(logger);\r\n\r\n// Otro ejemplo de middleware para autenticación\r\nconst authenticate = (req, res, next) => {\r\n  const apiKey = req.headers['x-api-key'];\r\n  if (apiKey === 'secreto') {\r\n    next(); // Permite el acceso a la ruta\r\n  } else {\r\n    res.status(401).send('No autorizado');\r\n  }\r\n};\r\n\r\n// Aplica el middleware de autenticación a una ruta específica\r\napp.get('/protected', authenticate, (req, res) => {\r\n  res.send('Acceso concedido');\r\n});\n```\n\nEn este ejemplo, se define un middleware `logger` que registra la hora y la URL de cada petición. También se define un middleware `authenticate` que verifica una clave de API en el encabezado de la petición.\n\n## MANEJO DE ERRORES\n\nEl manejo de errores es una parte importante de cualquier aplicación web. Express.js proporciona un mecanismo para capturar y manejar errores utilizando middleware de manejo de errores:\n\n```javascript\n// Middleware de manejo de errores\r\nconst errorHandler = (err, req, res, next) => {\r\n  console.error(err.stack);\r\n  res.status(500).send('Algo salió mal!');\r\n};\r\n\r\n// Aplica el middleware de manejo de errores al final de la pila de middleware\r\napp.use(errorHandler);\r\n\r\n// Ruta que genera un error\r\napp.get('/error', (req, res, next) => {\r\n  throw new Error('Este es un error de prueba');\r\n});\n```\n\nEn este ejemplo, se define un middleware `errorHandler` que registra el error en la consola y envía una respuesta de error al cliente.\n\n### USO DE PLANTILLAS\n\nExpress.js soporta el uso de motores de plantillas para generar HTML dinámicamente. Algunos motores de plantillas populares incluyen Pug, EJS y Handlebars.\n\nPara usar un motor de plantillas, primero debes instalarlo:\n\n```bash\nnpm install pug --save\n```\n\nLuego, debes configurar Express.js para usar el motor de plantillas:\n\n```javascript\n// Configura el motor de plantillas\r\napp.set('view engine', 'pug');\r\n\r\n// Define una ruta que renderiza una plantilla\r\napp.get('/template', (req, res) => {\r\n  res.render('index', { title: 'Hola', message: '¡Bienvenido a mi sitio!' });\r\n});\n```\n\nEn este ejemplo, se configura Express.js para usar el motor de plantillas Pug y se define una ruta que renderiza la plantilla `index.pug` con los datos proporcionados.\n\n## APIS RESTFUL\n\nExpress.js es ideal para construir APIs RESTful. Una API RESTful es una interfaz que utiliza los métodos HTTP estándar para realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) en los recursos.\n\nA continuación, se muestra un ejemplo de cómo construir una API RESTful para gestionar una lista de tareas:\n\n```javascript\n// Middleware para analizar el cuerpo de las peticiones con formato JSON\r\napp.use(express.json());\r\n\r\n// Array para almacenar las tareas (simulando una base de datos)\r\nlet tasks = [];\r\n\r\n// GET /tasks: Obtiene la lista de tareas\r\napp.get('/tasks', (req, res) => {\r\n  res.json(tasks);\r\n});\r\n\r\n// POST /tasks: Crea una nueva tarea\r\napp.post('/tasks', (req, res) => {\r\n  const task = {\r\n    id: tasks.length + 1,\r\n    title: req.body.title,\r\n    completed: false\r\n  };\r\n  tasks.push(task);\r\n  res.status(201).json(task);\r\n});\r\n\r\n// PUT /tasks/:id: Actualiza una tarea existente\r\napp.put('/tasks/:id', (req, res) => {\r\n  const taskId = parseInt(req.params.id);\r\n  const task = tasks.find(t => t.id === taskId);\r\n  if (!task) {\r\n    return res.status(404).send('Tarea no encontrada');\r\n  }\r\n  task.title = req.body.title || task.title;\r\n  task.completed = req.body.completed !== undefined ? req.body.completed : task.completed;\r\n  res.json(task);\r\n});\r\n\r\n// DELETE /tasks/:id: Elimina una tarea existente\r\napp.delete('/tasks/:id', (req, res) => {\r\n  const taskId = parseInt(req.params.id);\r\n  tasks = tasks.filter(t => t.id !== taskId);\r\n  res.status(204).send();\r\n});\n```\n\nEn este ejemplo, se definen rutas para obtener, crear, actualizar y eliminar tareas utilizando los métodos HTTP GET, POST, PUT y DELETE.\n\n## FUENTES DEL DOCUMENTO\n\n* [Express.js Official Website](https://expressjs.com/)\n* [MDN Web Docs - Express](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs)\n* [Node.js Official Website](https://nodejs.org/)\n* [npm Official Website](https://www.npmjs.com/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-backend",
    "title": "Javascript en el Backend (Node.js)",
    "description": "Uso de JavaScript en el backend con Node.js, sus características, ventajas y desventajas.",
    "content": "JavaScript, originalmente diseñado para ejecutarse en navegadores web y manipular el DOM, ha trascendido sus orígenes para convertirse en una tecnología de backend robusta y popular gracias a Node.js. Node.js permite a los desarrolladores utilizar JavaScript para construir aplicaciones del lado del servidor, abriendo un abanico de posibilidades y simplificando el desarrollo full-stack.\n\n## OBJETIVOS CLAVE\n\n* Comprender qué es Node.js y cómo permite ejecutar JavaScript en el backend.\n* Explorar las ventajas y desventajas de utilizar Node.js para el desarrollo de backend.\n* Aprender sobre el modelo de E/S no bloqueante y asíncrono de Node.js.\n* Familiarizarse con el ecosistema de Node.js, incluyendo npm y frameworks populares como Express.js.\n* Entender casos de uso comunes para Node.js en el backend.\n\n## ¿QUE ES NODE.JS?\n\nNode.js es un entorno de tiempo de ejecución (runtime environment) de JavaScript de código abierto y multiplataforma, que permite ejecutar código JavaScript fuera del navegador. Está construido sobre el motor de JavaScript V8 de Chrome, lo que le proporciona un alto rendimiento y eficiencia. Node.js utiliza un modelo de E/S no bloqueante y orientado a eventos, lo que lo hace ideal para construir aplicaciones de red escalables y en tiempo real.\n\n## VENTAJAS DE USAR NODE.JS EN EL BACKEND\n\n* **Lenguaje Unificado:** Permite utilizar JavaScript tanto en el frontend como en el backend, lo que facilita la colaboración entre equipos y reduce la curva de aprendizaje.\n* **Rendimiento:** Gracias al motor V8 y al modelo no bloqueante, Node.js ofrece un alto rendimiento y escalabilidad, especialmente en aplicaciones que manejan muchas conexiones concurrentes.\n* **Ecosistema:** Node.js cuenta con un vasto ecosistema de módulos y frameworks disponibles a través de npm (Node Package Manager), lo que facilita la reutilización de código y la aceleración del desarrollo.\n* **Desarrollo Rápido:** La naturaleza dinámica de JavaScript y la disponibilidad de frameworks como Express.js permiten un desarrollo rápido y eficiente de aplicaciones backend.\n* **Comunidad Activa:** Node.js cuenta con una gran comunidad de desarrolladores que contribuyen al desarrollo de la plataforma y ofrecen soporte.\n\n## DESVENTAJAS DE USAR NODE.JS EN EL BACKEND\n\n* **Callback Hell:** El modelo asíncrono de Node.js puede llevar al \"callback hell\" si no se gestiona adecuadamente. Sin embargo, las promesas y async/await han mitigado este problema.\n* **Manejo de Errores:** El manejo de errores en código asíncrono puede ser complejo y requiere una atención especial.\n* **No Apto para Tareas Intensivas de CPU:** Node.js no es la mejor opción para aplicaciones que requieren un alto procesamiento de CPU, ya que el hilo principal puede bloquearse.\n* **Madurez:** Aunque Node.js ha madurado significativamente, todavía es relativamente joven en comparación con otras tecnologías de backend como Java o .NET.\n\n## MODELO DE E/S NO BLOQUEANTE Y ASINCRONO\n\nEl modelo de E/S no bloqueante y asíncrono es una de las características clave de Node.js. En lugar de esperar a que una operación de E/S (como leer un archivo o realizar una consulta a la base de datos) se complete, Node.js continúa ejecutando otras tareas y recibe una notificación cuando la operación de E/S ha finalizado. Esto permite que el servidor maneje muchas conexiones concurrentes sin bloquear el hilo principal.\n\n**Ejemplo:**\n\n```javascript\nconst fs = require('fs');\r\n\r\n// Lectura asíncrona de un archivo\r\nfs.readFile('archivo.txt', 'utf8', (err, data) => {\r\n  if (err) {\r\n    console.error('Error al leer el archivo:', err);\r\n    return;\r\n  }\r\n  console.log('Contenido del archivo:', data);\r\n});\r\n\r\nconsole.log('Esta línea se ejecuta antes de que se complete la lectura del archivo.');\n```\n\nEn este ejemplo, `fs.readFile` inicia la lectura del archivo de forma asíncrona y luego continúa ejecutando la siguiente línea de código. Cuando la lectura del archivo se completa, se ejecuta la función de callback con el contenido del archivo.\n\n## ECOSISTEMA DE NODE.JS\n\nEl ecosistema de Node.js es vasto y ofrece una gran cantidad de herramientas y bibliotecas para facilitar el desarrollo de aplicaciones backend.\n\n* **npm (Node Package Manager):** Es el gestor de paquetes predeterminado para Node.js y proporciona acceso a un repositorio gigante de módulos y bibliotecas de código abierto.\n* **Express.js:** Es un framework web minimalista y flexible que facilita la creación de APIs y aplicaciones web en Node.js.\n* **Koa.js:** Es un framework web moderno diseñado por el equipo de Express.js, que utiliza async/await para mejorar el manejo de código asíncrono.\n* **NestJS:** Es un framework para construir aplicaciones de servidor escalables y mantenibles, que utiliza TypeScript y se inspira en Angular.\n* **Mongoose:** Es una biblioteca de modelado de objetos para MongoDB que facilita la interacción con la base de datos.\n* **Socket.IO:** Es una biblioteca para habilitar la comunicación bidireccional en tiempo real entre el cliente y el servidor.\n\n## CASOS DE USO COMUNES PARA NODE.JS EN EL BACKEND\n\n* **APIs RESTful:** Node.js es ideal para construir APIs RESTful debido a su alto rendimiento y escalabilidad.\n* **Aplicaciones en Tiempo Real:** Node.js es una excelente opción para aplicaciones que requieren comunicación en tiempo real, como chats, juegos multijugador y paneles de control.\n* **Microservicios:** Node.js se adapta bien a la arquitectura de microservicios debido a su ligereza y facilidad de despliegue.\n* **Herramientas de Línea de Comandos (CLI):** Node.js se puede utilizar para crear herramientas de línea de comandos para automatizar tareas y mejorar la productividad.\n* **Servidores Proxy:** Node.js puede actuar como un servidor proxy para mejorar el rendimiento y la seguridad de las aplicaciones web.\n\n## EJEMPLO DE IMPLEMENTACION CON EXPRESS.JS\n\n```javascript\nconst express = require('express');\r\nconst app = express();\r\nconst port = 3000;\r\n\r\n// Definición de una ruta\r\napp.get('/', (req, res) => {\r\n  res.send('¡Hola Mundo!');\r\n});\r\n\r\n// Inicio del servidor\r\napp.listen(port, () => {\r\n  console.log(`Servidor escuchando en el puerto ${port}`);\r\n});\n```\n\nEste ejemplo muestra cómo crear un servidor web básico con Express.js que responde con \"¡Hola Mundo!\" cuando se accede a la ruta raíz.\n\n## FUENTES DEL DOCUMENTO\n\n* [Node.js Official Website](https://nodejs.org/)\n* [Express.js Official Website](https://expressjs.com/)\n* [npm Official Website](https://www.npmjs.com/)\n* [MDN Web Docs - JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-backend/nodejs-databases",
    "title": "Bases de Datos con Node.js",
    "description": "Integración y manejo de bases de datos en aplicaciones Node.js.",
    "content": "Node.js, al ser un entorno de ejecución de JavaScript del lado del servidor, permite la creación de aplicaciones robustas y escalables que interactúan con bases de datos. La capacidad de Node.js para manejar operaciones de entrada/salida (I/O) de manera no bloqueante lo hace ideal para aplicaciones que requieren un alto rendimiento en la manipulación de datos. Este documento explora las diferentes opciones para integrar y trabajar con bases de datos en Node.js, incluyendo bases de datos relacionales (SQL) y no relacionales (NoSQL), así como el uso de Object-Relational Mappers (ORMs) y Object-Document Mappers (ODMs).\n\n## OBJETIVOS CLAVE\n\n* Comprender los diferentes tipos de bases de datos compatibles con Node.js.\n* Aprender a establecer conexiones con bases de datos desde aplicaciones Node.js.\n* Implementar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) utilizando Node.js.\n* Utilizar ORMs y ODMs para facilitar la interacción con bases de datos.\n* Optimizar el rendimiento de las consultas a bases de datos en Node.js.\n\n## TIPOS DE BASES DE DATOS Y LIBRERIAS POPULARES\n\nNode.js puede interactuar con una amplia variedad de bases de datos. A continuación, se presentan algunas de las más comunes y las librerías correspondientes para su integración:\n\n### BASES DE DATOS RELACIONALES (SQL)\n\n* **MySQL:** Una de las bases de datos relacionales de código abierto más populares.\n  * Librería: `mysql`, `mysql2`, `sequelize` (ORM)\n* **PostgreSQL:** Una base de datos relacional avanzada, conocida por su cumplimiento de los estándares SQL y su extensibilidad.\n  * Librería: `pg`, `sequelize` (ORM)\n* **SQLite:** Una base de datos ligera y autónoma, ideal para aplicaciones pequeñas y pruebas.\n  * Librería: `sqlite3`, `sequelize` (ORM)\n* **Microsoft SQL Server:** La base de datos relacional de Microsoft, utilizada en entornos empresariales.\n  * Librería: `tedious`, `sequelize` (ORM)\n\n### BASES DE DATOS NO RELACIONALES (NOSQL)\n\n* **MongoDB:** Una base de datos NoSQL orientada a documentos, muy popular para aplicaciones web modernas.\n  * Librería: `mongodb`, `mongoose` (ODM)\n* **Redis:** Una base de datos en memoria, utilizada como caché y para gestión de sesiones.\n  * Librería: `redis`\n* **Cassandra:** Una base de datos NoSQL distribuida, diseñada para manejar grandes volúmenes de datos.\n  * Librería: `cassandra-driver`\n\n## CONEXION A BASES DE DATOS\n\nEl primer paso para trabajar con una base de datos en Node.js es establecer una conexión. A continuación, se muestran ejemplos de cómo conectar a MySQL y MongoDB.\n\n### CONEXION A MYSQL\n\n```javascript\nconst mysql = require('mysql2');\r\n\r\nconst connection = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'usuario',\r\n  password: 'contraseña',\r\n  database: 'nombre_de_la_base_de_datos'\r\n});\r\n\r\nconnection.connect((err) => {\r\n  if (err) {\r\n    console.error('Error al conectar a la base de datos:', err);\r\n    return;\r\n  }\r\n  console.log('Conexión a MySQL establecida');\r\n});\r\n\r\n// Para cerrar la conexión cuando ya no se necesite\r\n// connection.end();\n```\n\n### CONEXION A MONGODB\n\n```javascript\nconst { MongoClient } = require('mongodb');\r\n\r\nconst uri = 'mongodb://usuario:contraseña@localhost:27017/nombre_de_la_base_de_datos';\r\nconst client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\r\n\r\nasync function connectToMongoDB() {\r\n  try {\r\n    await client.connect();\r\n    console.log('Conexión a MongoDB establecida');\r\n  } catch (err) {\r\n    console.error('Error al conectar a MongoDB:', err);\r\n  }\r\n}\r\n\r\nconnectToMongoDB();\r\n\r\n// Para cerrar la conexión cuando ya no se necesite\r\n// client.close();\n```\n\n## OPERACIONES CRUD\n\nUna vez establecida la conexión, se pueden realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) en la base de datos.\n\n### OPERACIONES CRUD EN MYSQL\n\n```javascript\n// Crear (Insertar)\r\nconst queryInsert = 'INSERT INTO usuarios (nombre, email) VALUES (?, ?)';\r\nconnection.query(queryInsert, ['Juan Perez', 'juan@example.com'], (err, result) => {\r\n  if (err) throw err;\r\n  console.log('Usuario insertado:', result);\r\n});\r\n\r\n// Leer (Seleccionar)\r\nconst querySelect = 'SELECT * FROM usuarios';\r\nconnection.query(querySelect, (err, results) => {\r\n  if (err) throw err;\r\n  console.log('Usuarios:', results);\r\n});\r\n\r\n// Actualizar (Modificar)\r\nconst queryUpdate = 'UPDATE usuarios SET email = ? WHERE nombre = ?';\r\nconnection.query(queryUpdate, ['juan.perez@example.com', 'Juan Perez'], (err, result) => {\r\n  if (err) throw err;\r\n  console.log('Usuario actualizado:', result);\r\n});\r\n\r\n// Eliminar (Borrar)\r\nconst queryDelete = 'DELETE FROM usuarios WHERE nombre = ?';\r\nconnection.query(queryDelete, ['Juan Perez'], (err, result) => {\r\n  if (err) throw err;\r\n  console.log('Usuario eliminado:', result);\r\n});\n```\n\n### OPERACIONES CRUD EN MONGODB\n\n```javascript\nasync function crudOperationsMongoDB() {\r\n  const db = client.db('nombre_de_la_base_de_datos');\r\n  const collection = db.collection('usuarios');\r\n\r\n  // Crear (Insertar)\r\n  const insertResult = await collection.insertOne({ nombre: 'Maria Lopez', email: 'maria@example.com' });\r\n  console.log('Usuario insertado:', insertResult);\r\n\r\n  // Leer (Seleccionar)\r\n  const findResult = await collection.find({}).toArray();\r\n  console.log('Usuarios:', findResult);\r\n\r\n  // Actualizar (Modificar)\r\n  const updateResult = await collection.updateOne({ nombre: 'Maria Lopez' }, { $set: { email: 'maria.lopez@example.com' } });\r\n  console.log('Usuario actualizado:', updateResult);\r\n\r\n  // Eliminar (Borrar)\r\n  const deleteResult = await collection.deleteOne({ nombre: 'Maria Lopez' });\r\n  console.log('Usuario eliminado:', deleteResult);\r\n}\r\n\r\ncrudOperationsMongoDB();\n```\n\n## ORMS Y ODMS\n\nLos ORMs (Object-Relational Mappers) y ODMs (Object-Document Mappers) son herramientas que facilitan la interacción con bases de datos al mapear las tablas o colecciones a objetos en el código. Esto permite escribir consultas y manipular datos de manera más intuitiva y segura.\n\n### SEQUELIZE (ORM PARA SQL)\n\nSequelize es un ORM popular para Node.js que soporta múltiples bases de datos SQL, incluyendo MySQL, PostgreSQL, SQLite y Microsoft SQL Server.\n\n```javascript\nconst { Sequelize, DataTypes } = require('sequelize');\r\n\r\nconst sequelize = new Sequelize('nombre_de_la_base_de_datos', 'usuario', 'contraseña', {\r\n  host: 'localhost',\r\n  dialect: 'mysql' // o 'postgres', 'sqlite', 'mssql'\r\n});\r\n\r\n// Definir un modelo\r\nconst Usuario = sequelize.define('Usuario', {\r\n  nombre: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false\r\n  },\r\n  email: {\r\n    type: DataTypes.STRING\r\n  }\r\n});\r\n\r\n// Sincronizar el modelo con la base de datos (crea la tabla si no existe)\r\nsequelize.sync()\r\n  .then(() => {\r\n    console.log('Tabla de usuarios creada (o ya existente)');\r\n    // Crear un nuevo usuario\r\n    return Usuario.create({\r\n      nombre: 'Carlos Gomez',\r\n      email: 'carlos@example.com'\r\n    });\r\n  })\r\n  .then(usuario => {\r\n    console.log('Nuevo usuario creado:', usuario.toJSON());\r\n    // Buscar todos los usuarios\r\n    return Usuario.findAll();\r\n  })\r\n  .then(usuarios => {\r\n    console.log('Todos los usuarios:', usuarios.map(u => u.toJSON()));\r\n  })\r\n  .catch(err => {\r\n    console.error('Error:', err);\r\n  });\n```\n\n### MONGOOSE (ODM PARA MONGODB)\n\nMongoose es un ODM popular para MongoDB que proporciona una forma elegante de modelar los datos y interactuar con la base de datos.\n\n```javascript\nconst mongoose = require('mongoose');\r\n\r\nmongoose.connect('mongodb://usuario:contraseña@localhost:27017/nombre_de_la_base_de_datos', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true\r\n})\r\n.then(() => console.log('Conexión a MongoDB establecida'))\r\n.catch(err => console.error('Error al conectar a MongoDB:', err));\r\n\r\n// Definir un esquema\r\nconst usuarioSchema = new mongoose.Schema({\r\n  nombre: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  email: String\r\n});\r\n\r\n// Crear un modelo\r\nconst Usuario = mongoose.model('Usuario', usuarioSchema);\r\n\r\n// Crear un nuevo usuario\r\nconst nuevoUsuario = new Usuario({\r\n  nombre: 'Ana Rodriguez',\r\n  email: 'ana@example.com'\r\n});\r\n\r\nnuevoUsuario.save()\r\n  .then(usuario => {\r\n    console.log('Nuevo usuario creado:', usuario);\r\n    // Buscar todos los usuarios\r\n    return Usuario.find({});\r\n  })\r\n  .then(usuarios => {\r\n    console.log('Todos los usuarios:', usuarios);\r\n  })\r\n  .catch(err => {\r\n    console.error('Error:', err);\r\n  });\n```\n\n## OPTIMIZACION DE CONSULTAS\n\nPara asegurar un buen rendimiento, es importante optimizar las consultas a la base de datos. Algunas técnicas incluyen:\n\n* **Indexación:** Crear índices en las columnas que se utilizan frecuentemente en las consultas.\n* **Uso de consultas eficientes:** Evitar consultas que escaneen toda la tabla o colección.\n* **Paginación:** Limitar el número de resultados devueltos por una consulta.\n* **Caching:** Almacenar en caché los resultados de consultas frecuentes.\n\n## CONCLUSION\n\nLa integración de bases de datos en Node.js es fundamental para el desarrollo de aplicaciones modernas. Con una amplia variedad de opciones disponibles, desde bases de datos SQL hasta NoSQL, y herramientas como ORMs y ODMs, los desarrolladores pueden construir aplicaciones robustas y escalables que manejen grandes volúmenes de datos de manera eficiente.\n\n## FUENTES DEL DOCUMENTO\n\n* [Node.js Official Website](https://nodejs.org/)\n* [MySQL Official Website](https://www.mysql.com/)\n* [PostgreSQL Official Website](https://www.postgresql.org/)\n* [MongoDB Official Website](https://www.mongodb.com/)\n* [Sequelize Documentation](https://sequelize.org/docs/v6/)\n* [Mongoose Documentation](https://mongoosejs.com/docs/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-backend/nodejs-introduction",
    "title": "Introduccion a Node.js",
    "description": "Introducción a Node.js, un entorno de ejecución para JavaScript en el lado del servidor.",
    "content": "Node.js es un entorno de ejecución de JavaScript de código abierto, multiplataforma, que permite a los desarrolladores ejecutar JavaScript en el lado del servidor. Tradicionalmente, JavaScript se utilizaba principalmente para el desarrollo del lado del cliente, ejecutándose en navegadores web. Node.js cambió esto al proporcionar un entorno que permite a JavaScript ser utilizado para desarrollar aplicaciones del lado del servidor, herramientas de línea de comandos y más.\n\n## OBJETIVOS CLAVE\n\n* **Comprender el concepto de Node.js:** Definir qué es Node.js y cómo se diferencia de JavaScript en el navegador.\n* **Arquitectura no bloqueante:** Explicar cómo la arquitectura orientada a eventos y no bloqueante de Node.js permite un alto rendimiento.\n* **Instalación y configuración:** Guiar a los usuarios a través del proceso de instalación de Node.js y npm (Node Package Manager).\n* **Creación de un servidor básico:** Mostrar cómo crear un servidor HTTP simple con Node.js.\n* **Manejo de módulos:** Introducir el sistema de módulos de Node.js y cómo importar y utilizar módulos.\n\n## ¿QUE ES NODE.JS?\n\nNode.js es un entorno de ejecución de JavaScript construido sobre el motor V8 de Chrome. Esto significa que utiliza el mismo motor que impulsa el navegador Chrome para ejecutar JavaScript, pero fuera del navegador. Node.js permite a los desarrolladores utilizar JavaScript para escribir herramientas de línea de comandos y scripts del lado del servidor.\n\n## ARQUITECTURA NO BLOQUEANTE Y ORIENTADA A EVENTOS\n\nUna de las características clave de Node.js es su arquitectura no bloqueante y orientada a eventos. En un entorno tradicional, cuando un servidor recibe una solicitud, bloquea el hilo hasta que la solicitud se completa. Esto puede llevar a un uso ineficiente de los recursos y un rendimiento más lento.\n\nNode.js, en cambio, utiliza un modelo de E/S no bloqueante. Esto significa que cuando Node.js realiza una operación de E/S (como leer un archivo o hacer una consulta a una base de datos), no espera a que la operación se complete antes de continuar con otras tareas. En su lugar, registra una función de callback que se ejecutará cuando la operación se complete. Esto permite a Node.js manejar múltiples solicitudes simultáneamente sin bloquear el hilo principal.\n\n**Ejemplo:**\n\n```javascript\nconst fs = require('fs');\r\n\r\nfs.readFile('/archivo.txt', (err, data) => {\r\n  if (err) throw err;\r\n  console.log(data);\r\n});\r\n\r\nconsole.log('Programa continua...');\n```\n\nEn este ejemplo, `fs.readFile` lee un archivo de forma asíncrona. El programa no espera a que el archivo se lea completamente antes de imprimir \"Programa continua...\". Una vez que el archivo se lee, se ejecuta la función de callback.\n\n## INSTALACION Y CONFIGURACION\n\nPara comenzar a utilizar Node.js, primero debes instalarlo en tu sistema. Puedes descargar la última versión de Node.js desde el [sitio web oficial](https://nodejs.org/). Node.js viene con npm (Node Package Manager), que se utiliza para gestionar paquetes y dependencias de JavaScript.\n\n**Pasos para la instalación:**\n\n1. **Descargar el instalador:** Ve a [nodejs.org](https://nodejs.org/) y descarga el instalador para tu sistema operativo.\n2. **Ejecutar el instalador:** Ejecuta el instalador y sigue las instrucciones. Asegúrate de que la opción \"Add to PATH\" esté seleccionada para que puedas ejecutar Node.js y npm desde la línea de comandos.\n3. **Verificar la instalación:** Abre una nueva ventana de terminal y ejecuta los siguientes comandos para verificar que Node.js y npm están instalados correctamente:\n\n```bash\nnode -v\r\nnpm -v\n```\n\nEstos comandos mostrarán las versiones instaladas de Node.js y npm.\n\n## CREACION DE UN SERVIDOR BASICO\n\nUna vez que tienes Node.js instalado, puedes crear un servidor HTTP básico para manejar solicitudes web. Aquí tienes un ejemplo simple:\n\n```javascript\nconst http = require('http');\r\n\r\nconst hostname = '127.0.0.1';\r\nconst port = 3000;\r\n\r\nconst server = http.createServer((req, res) => {\r\n  res.statusCode = 200;\r\n  res.setHeader('Content-Type', 'text/plain');\r\n  res.end('Hola Mundo\\n');\r\n});\r\n\r\nserver.listen(port, hostname, () => {\r\n  console.log(`Servidor corriendo en http://${hostname}:${port}/`);\r\n});\n```\n\n**Explicación del código:**\n\n* `require('http')`: Importa el módulo HTTP de Node.js.\n* `http.createServer((req, res) => { ... })`: Crea un nuevo servidor HTTP. La función de callback se ejecuta cada vez que el servidor recibe una solicitud.\n* `res.statusCode = 200`: Establece el código de estado de la respuesta a 200 (OK).\n* `res.setHeader('Content-Type', 'text/plain')`: Establece el tipo de contenido de la respuesta a texto plano.\n* `res.end('Hola Mundo\\n')`: Envía la respuesta al cliente y cierra la conexión.\n* `server.listen(port, hostname, () => { ... })`: Inicia el servidor y escucha las conexiones en el puerto y hostname especificados.\n\nPara ejecutar este código, guarda el archivo como `server.js` y ejecuta el siguiente comando en la terminal:\n\n```bash\nnode server.js\n```\n\nLuego, abre un navegador web y visita `http://localhost:3000`. Deberías ver el mensaje \"Hola Mundo\".\n\n## MANEJO DE MODULOS\n\nNode.js utiliza un sistema de módulos para organizar y reutilizar el código. Un módulo es un archivo que contiene código JavaScript que puede ser importado y utilizado en otros archivos. Node.js tiene dos tipos de módulos:\n\n* **Módulos Core:** Módulos que vienen con Node.js, como `http`, `fs`, `path`, etc.\n* **Módulos de Terceros:** Módulos que se instalan desde npm, como `express`, `lodash`, `moment`, etc.\n\nPara importar un módulo, utiliza la función `require()`. Por ejemplo:\n\n```javascript\nconst fs = require('fs'); // Importa el módulo 'fs' (File System)\r\nconst express = require('express'); // Importa el módulo 'express' (después de instalarlo con npm)\n```\n\nPara instalar un módulo de terceros, utiliza npm. Por ejemplo, para instalar el módulo `express`, ejecuta el siguiente comando en la terminal:\n\n```bash\nnpm install express\n```\n\nLuego, puedes importar y utilizar el módulo en tu código:\n\n```javascript\nconst express = require('express');\r\nconst app = express();\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('Hola Mundo!');\r\n});\r\n\r\napp.listen(3000, () => {\r\n  console.log('Servidor corriendo en el puerto 3000');\r\n});\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [Node.js Official Website](https://nodejs.org/)\n* [Node.js Documentation](https://nodejs.org/en/docs/)\n* [npm Official Website](https://www.npmjs.com/)\n* [MDN Web Docs](https://developer.mozilla.org/en-US/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-backend/nodejs-modules",
    "title": "Módulos en Node.js",
    "description": "Exploracion profunda de los modulos en Node.js, su importancia, tipos, creacion y uso.",
    "content": "Los módulos en Node.js son una parte fundamental de la arquitectura de esta plataforma. Permiten organizar el código en unidades reutilizables y mantenibles, facilitando la creación de aplicaciones complejas. En esencia, un módulo es un archivo de JavaScript que exporta funcionalidades para ser utilizadas en otros archivos.\n\n## OBJETIVOS CLAVE\n\n* **Comprender la importancia de los módulos:** Entender por qué los módulos son esenciales para la organización y reutilización del código en Node.js.\n* **Conocer los tipos de módulos:** Identificar los módulos principales (core modules), los módulos locales (creados por el usuario) y los módulos de terceros (instalados mediante npm).\n* **Aprender a crear y exportar módulos:** Dominar las técnicas para definir y exportar funcionalidades desde un módulo.\n* **Saber cómo importar módulos:** Utilizar la función `require()` para importar y utilizar módulos en otros archivos.\n* **Familiarizarse con `module.exports` y `exports`:** Entender las diferencias y usos de estas dos formas de exportar módulos.\n* **Explorar los módulos ES6 (ESM):** Introducción a la sintaxis `import` y `export` en Node.js.\n\n## ¿POR QUE USAR MODULOS?\n\nLos módulos son cruciales en Node.js por varias razones:\n\n* **Organización del código:** Permiten dividir una aplicación grande en partes más pequeñas y manejables.\n* **Reutilización:** Facilitan la reutilización de código en diferentes partes de la aplicación o en otros proyectos.\n* **Encapsulamiento:** Ayudan a mantener el código encapsulado, evitando conflictos de nombres y reduciendo la complejidad.\n* **Mantenibilidad:** Mejoran la mantenibilidad del código al facilitar la identificación y corrección de errores.\n\n## TIPOS DE MODULOS\n\nNode.js tiene tres tipos principales de módulos:\n\n1. **Módulos Principales (Core Modules):** Estos módulos vienen incluidos con Node.js y proporcionan funcionalidades básicas como manejo de archivos (`fs`), operaciones de red (`http`), utilidades del sistema operativo (`os`), entre otros.\n2. **Módulos Locales (User-Defined Modules):** Son los módulos que creas tú mismo para organizar tu código.\n3. **Módulos de Terceros (Third-Party Modules):** Son módulos que se instalan desde el administrador de paquetes de Node.js (npm). Estos módulos suelen ser bibliotecas o frameworks que ofrecen funcionalidades específicas.\n\n## MODULOS PRINCIPALES (CORE MODULES)\n\nLos módulos principales se cargan directamente usando `require()`. No es necesario instalarlos, ya que están integrados en Node.js.\n\n**Ejemplo: Usando el módulo `fs` (File System)**\n\n```javascript\n// Importar el módulo 'fs'\r\nconst fs = require('fs');\r\n\r\n// Leer un archivo de forma síncrona\r\ntry {\r\n    const data = fs.readFileSync('archivo.txt', 'utf8');\r\n    console.log(data);\r\n} catch (err) {\r\n    console.error(\"Error al leer el archivo:\", err);\r\n}\n```\n\n## MODULOS LOCALES (USER-DEFINED MODULES)\n\nPara crear un módulo local, simplemente creas un archivo JavaScript y exportas las funcionalidades que deseas compartir.\n\n**Ejemplo: Creando un módulo `calculadora.js`**\n\n```javascript\n// calculadora.js\r\nfunction sumar(a, b) {\r\n    return a + b;\r\n}\r\n\r\nfunction restar(a, b) {\r\n    return a - b;\r\n}\r\n\r\n// Exportar las funciones\r\nmodule.exports = {\r\n    sumar: sumar,\r\n    restar: restar\r\n};\n```\n\n**Usando el módulo `calculadora.js` en `app.js`**\n\n```javascript\n// app.js\r\nconst calculadora = require('./calculadora');\r\n\r\nconsole.log(\"Suma:\", calculadora.sumar(5, 3)); // Output: Suma: 8\r\nconsole.log(\"Resta:\", calculadora.restar(5, 3)); // Output: Resta: 2\n```\n\n## MODULOS DE TERCEROS (THIRD-PARTY MODULES)\n\nLos módulos de terceros se instalan usando npm (Node Package Manager). Primero, debes inicializar un proyecto Node.js con `npm init` y luego instalar el módulo deseado.\n\n**Ejemplo: Usando el módulo `lodash`**\n\n1. **Inicializar el proyecto:**\n\n   ```bash\n   npm init -y\n   ```\n2. **Instalar `lodash`:**\n\n   ```bash\n   npm install lodash\n   ```\n3. **Usar `lodash` en `app.js`:**\n\n   ```javascript\n   // app.js\r\n   const _ = require('lodash');\r\n\r\n   const numeros = [1, 2, 2, 3, 4, 4, 5];\r\n   const numerosUnicos = _.uniq(numeros);\r\n\r\n   console.log(\"Números únicos:\", numerosUnicos); // Output: Números únicos: [ 1, 2, 3, 4, 5 ]\n   ```\n\n## `MODULE.EXPORTS` VS. `EXPORTS`\n\nEn Node.js, hay dos formas principales de exportar módulos: `module.exports` y `exports`.\n\n* `module.exports`: Es el objeto que Node.js devuelve cuando se requiere un módulo. Puedes asignarle cualquier valor, incluyendo objetos, funciones, etc.\n* `exports`: Es una referencia al objeto `module.exports` inicial. Puedes agregar propiedades a este objeto, pero no puedes reasignarlo.\n\n**Ejemplo: Usando `module.exports`**\n\n```javascript\n// modulo.js\r\nmodule.exports = {\r\n    nombre: \"Ejemplo\",\r\n    version: \"1.0.0\",\r\n    saludar: function() {\r\n        console.log(\"Hola desde el módulo!\");\r\n    }\r\n};\n```\n\n**Ejemplo: Usando `exports`**\n\n```javascript\n// modulo.js\r\nexports.nombre = \"Ejemplo\";\r\nexports.version = \"1.0.0\";\r\nexports.saludar = function() {\r\n    console.log(\"Hola desde el módulo!\");\r\n};\n```\n\n**Importante:** Si asignas un nuevo valor a `exports`, romperás la referencia a `module.exports`, y tu módulo no exportará nada.\n\n```javascript\n// NO FUNCIONARÁ\r\nexports = {\r\n    nombre: \"Ejemplo\",\r\n    version: \"1.0.0\"\r\n};\n```\n\n## MODULOS ES6 (ESM)\n\nA partir de Node.js 14, se introdujo soporte nativo para los módulos ES6 (ECMAScript Modules). Esto permite usar la sintaxis `import` y `export` que es estándar en JavaScript moderno.\n\nPara usar ESM en Node.js, debes seguir estos pasos:\n\n1. **Asegurarte de tener una versión de Node.js que soporte ESM (v14 o superior).**\n2. **Añadir `\"type\": \"module\"` en tu `package.json`.**\n3. **Usar la extensión `.mjs` para tus archivos de módulo, o mantener la extensión `.js` si has configurado `\"type\": \"module\"` en `package.json`.**\n\n**Ejemplo: Creando un módulo ESM `calculadora.mjs`**\n\n```javascript\n// calculadora.mjs\r\nexport function sumar(a, b) {\r\n    return a + b;\r\n}\r\n\r\nexport function restar(a, b) {\r\n    return a - b;\r\n}\n```\n\n**Usando el módulo `calculadora.mjs` en `app.mjs`**\n\n```javascript\n// app.mjs\r\nimport { sumar, restar } from './calculadora.mjs';\r\n\r\nconsole.log(\"Suma:\", sumar(5, 3)); // Output: Suma: 8\r\nconsole.log(\"Resta:\", restar(5, 3)); // Output: Resta: 2\n```\n\n## EJEMPLO COMPLETO\n\n**Estructura del proyecto:**\n\n```\nmi-proyecto/\r\n├── package.json\r\n├── app.js\r\n└── utils/\r\n    └── saludo.js\n```\n\n**`package.json`:**\n\n```json\n{\r\n  \"name\": \"mi-proyecto\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Ejemplo de módulos en Node.js\",\r\n  \"main\": \"app.js\",\r\n  \"scripts\": {\r\n    \"start\": \"node app.js\"\r\n  },\r\n  \"author\": \"Tu Nombre\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"lodash\": \"^4.17.21\"\r\n  }\r\n}\n```\n\n**`utils/saludo.js`:**\n\n```javascript\n// utils/saludo.js\r\nfunction saludar(nombre) {\r\n    return `Hola, ${nombre}!`;\r\n}\r\n\r\nmodule.exports = {\r\n    saludar: saludar\r\n};\n```\n\n**`app.js`:**\n\n```javascript\n// app.js\r\nconst saludoModule = require('./utils/saludo');\r\nconst _ = require('lodash');\r\n\r\nconst nombre = \"Mundo\";\r\nconst mensaje = saludoModule.saludar(nombre);\r\n\r\nconsole.log(mensaje); // Output: Hola, Mundo!\r\n\r\nconst numeros = [1, 2, 2, 3, 4, 4, 5];\r\nconst numerosUnicos = _.uniq(numeros);\r\n\r\nconsole.log(\"Números únicos:\", numerosUnicos); // Output: Números únicos: [ 1, 2, 3, 4, 5 ]\n```\n\nPara ejecutar este ejemplo, guarda los archivos, ejecuta `npm install` para instalar `lodash`, y luego ejecuta `node app.js`.\n\n## FUENTES DEL DOCUMENTO\n\n* [Node.js Documentation](https://nodejs.org/en/docs/)\n* [MDN Web Docs](https://developer.mozilla.org/en-US/)\n* [npm Documentation](https://docs.npmjs.com/)\n* [Lodash Documentation](https://lodash.com/docs/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-backend/npm",
    "title": "NPM (NODE PACKAGE MANAGER)",
    "description": "GESTIONA PAQUETES DE NODE.JS, FACILITANDO LA INSTALACION, ACTUALIZACION Y ELIMINACION DE LIBRERIAS Y HERRAMIENTAS.",
    "content": "NPM (Node Package Manager) es el gestor de paquetes predeterminado para el entorno de ejecución de JavaScript Node.js.  Es una herramienta de línea de comandos que permite a los desarrolladores instalar, compartir y gestionar dependencias de código de manera eficiente.  NPM facilita la reutilización de código, la gestión de versiones y la colaboración en proyectos de Node.js.\n\n## OBJETIVOS CLAVE SOBRE NPM\n\n1. **Gestion de Dependencias:** NPM simplifica la tarea de añadir, actualizar y eliminar librerías y herramientas que un proyecto necesita para funcionar correctamente.\n2. **Reutilizacion de Codigo:** Permite a los desarrolladores compartir sus propios paquetes y utilizar los paquetes creados por otros, fomentando la reutilización de código y la colaboración.\n3. **Gestion de Versiones:** NPM facilita la gestión de versiones de los paquetes, permitiendo especificar qué versiones de las dependencias son compatibles con un proyecto.\n4. **Publicacion de Paquetes:** Permite a los desarrolladores publicar sus propios paquetes en el registro de NPM, haciéndolos accesibles a la comunidad global de desarrolladores de Node.js.\n5. **Automatizacion de Tareas:** NPM puede utilizarse para automatizar tareas comunes de desarrollo, como la ejecución de pruebas, la construcción de proyectos y la ejecución de scripts personalizados.\n\n## INSTALACION DE NPM\n\nNPM se instala automáticamente con Node.js. Para verificar si NPM está instalado, abre una terminal o línea de comandos y ejecuta el siguiente comando:\n\n```bash\nnpm -v\n```\n\nEsto mostrará la versión de NPM instalada en tu sistema. Si no está instalado, descarga e instala Node.js desde el sitio web oficial: [https://nodejs.org/](https://nodejs.org/)\n\n## USO BASICO DE NPM\n\n### INICIALIZAR UN PROYECTO\n\nPara comenzar a utilizar NPM en un proyecto, primero debes inicializarlo. Esto crea un archivo `package.json` que contiene metadatos sobre el proyecto y sus dependencias.\n\n```bash\nnpm init\n```\n\nEste comando te guiará a través de una serie de preguntas para configurar el archivo `package.json`. Puedes aceptar los valores predeterminados o personalizarlos según tus necesidades.\n\nPara crear un archivo `package.json` con valores predeterminados, puedes usar la opción `-y` o `--yes`:\n\n```bash\nnpm init -y\n```\n\n### INSTALAR PAQUETES\n\nPara instalar un paquete, utiliza el comando `npm install` seguido del nombre del paquete. Por ejemplo, para instalar el paquete `lodash`:\n\n```bash\nnpm install lodash\n```\n\nEsto instalará la última versión del paquete `lodash` y lo añadirá como una dependencia en el archivo `package.json`.\n\nPara instalar una versión específica de un paquete, utiliza el símbolo `@` seguido del número de versión:\n\n```bash\nnpm install lodash@4.17.21\n```\n\nPara guardar un paquete como una dependencia de desarrollo (es decir, una dependencia que solo es necesaria durante el desarrollo y no en producción), utiliza la opción `--save-dev` o `-D`:\n\n```bash\nnpm install --save-dev jest\n```\n\n### DESINSTALAR PAQUETES\n\nPara desinstalar un paquete, utiliza el comando `npm uninstall` seguido del nombre del paquete:\n\n```bash\nnpm uninstall lodash\n```\n\nEsto eliminará el paquete `lodash` de la carpeta `node_modules` y lo removerá de las dependencias en el archivo `package.json`.\n\n### ACTUALIZAR PAQUETES\n\nPara actualizar un paquete a la última versión, utiliza el comando `npm update` seguido del nombre del paquete:\n\n```bash\nnpm update lodash\n```\n\nPara actualizar todos los paquetes en un proyecto a sus últimas versiones compatibles, ejecuta:\n\n```bash\nnpm update\n```\n\n### EJECUTAR SCRIPTS\n\nNPM permite definir scripts personalizados en el archivo `package.json` que pueden ser ejecutados utilizando el comando `npm run`. Por ejemplo, puedes definir un script para ejecutar pruebas:\n\n```json\n{\r\n  \"name\": \"mi-proyecto\",\r\n  \"version\": \"1.0.0\",\r\n  \"scripts\": {\r\n    \"test\": \"jest\"\r\n  }\r\n}\n```\n\nPara ejecutar este script, utiliza el siguiente comando:\n\n```bash\nnpm run test\n```\n\n## ARCHIVO PACKAGE.JSON\n\nEl archivo `package.json` es un archivo JSON que contiene metadatos sobre el proyecto y sus dependencias.  Es esencial para la gestión de proyectos de Node.js y permite a NPM gestionar las dependencias de manera eficiente.\n\n### ESTRUCTURA BASICA\n\nUn archivo `package.json` típico puede contener los siguientes campos:\n\n* `name`: El nombre del paquete.\n* `version`: La versión del paquete.\n* `description`: Una descripción del paquete.\n* `main`: El punto de entrada principal del paquete.\n* `scripts`: Un objeto que define scripts personalizados.\n* `dependencies`: Un objeto que lista las dependencias del paquete.\n* `devDependencies`: Un objeto que lista las dependencias de desarrollo del paquete.\n* `repository`: Un objeto que especifica el repositorio de código del paquete.\n* `keywords`: Un array de palabras clave relacionadas con el paquete.\n* `author`: El autor del paquete.\n* `license`: La licencia del paquete.\n\n### EJEMPLO DE PACKAGE.JSON\n\n```json\n{\r\n  \"name\": \"mi-proyecto\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Un proyecto de ejemplo con Node.js y NPM\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"start\": \"node index.js\",\r\n    \"test\": \"jest\"\r\n  },\r\n  \"dependencies\": {\r\n    \"express\": \"^4.17.1\",\r\n    \"lodash\": \"^4.17.21\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"jest\": \"^27.0.0\"\r\n  },\r\n  \"keywords\": [\r\n    \"node.js\",\r\n    \"npm\",\r\n    \"express\",\r\n    \"lodash\"\r\n  ],\r\n  \"author\": \"Tu Nombre\",\r\n  \"license\": \"MIT\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/tu-usuario/mi-proyecto.git\"\r\n  }\r\n}\n```\n\n## SEMANTIC VERSIONING (SEMVER)\n\nNPM utiliza Semantic Versioning (SemVer) para gestionar las versiones de los paquetes. SemVer es un esquema de versionado que utiliza tres números: `MAJOR.MINOR.PATCH`.\n\n* `MAJOR`: Incrementado cuando se hacen cambios incompatibles en la API.\n* `MINOR`: Incrementado cuando se añaden funcionalidades de manera compatible hacia atrás.\n* `PATCH`: Incrementado cuando se hacen correcciones de errores compatibles hacia atrás.\n\nEn el archivo `package.json`, puedes especificar rangos de versiones permitidas para las dependencias utilizando los siguientes símbolos:\n\n* `^`: Permite actualizaciones a versiones MINOR y PATCH.\n* `~`: Permite actualizaciones a versiones PATCH.\n* `>`: Mayor que la versión especificada.\n* `<`: Menor que la versión especificada.\n* `>=`: Mayor o igual que la versión especificada.\n* `<=`: Menor o igual que la versión especificada.\n* `=`: Igual a la versión especificada.\n* `*`: Cualquier versión.\n\n## REGISTRO DE NPM\n\nEl registro de NPM es una base de datos pública de paquetes de Node.js.  Permite a los desarrolladores publicar y compartir sus propios paquetes con la comunidad global.\n\n### PUBLICAR UN PAQUETE\n\nPara publicar un paquete en el registro de NPM, sigue estos pasos:\n\n1. Crea una cuenta en el sitio web de NPM: [https://www.npmjs.com/](https://www.npmjs.com/)\n2. Inicia sesión en NPM desde la línea de comandos:\n\n```bash\nnpm login\n```\n\n1. Navega al directorio de tu paquete.\n2. Publica el paquete:\n\n```bash\nnpm publish\n```\n\nAsegúrate de que el archivo `package.json` esté configurado correctamente y que el paquete cumpla con las políticas de NPM.\n\n## NPM VS YARN\n\nYarn es otro gestor de paquetes para Node.js que fue desarrollado por Facebook.  Aunque NPM es el gestor de paquetes predeterminado, Yarn ofrece algunas ventajas, como una mayor velocidad y determinismo en la gestión de dependencias.\n\n### DIFERENCIAS CLAVE\n\n* **Velocidad:** Yarn tiende a ser más rápido que NPM en la instalación de dependencias debido a su enfoque en el paralelismo y el almacenamiento en caché.\n* **Determinismo:** Yarn utiliza un archivo `yarn.lock` para asegurar que las dependencias se instalen de manera determinista, lo que significa que siempre obtendrás las mismas versiones de las dependencias en diferentes entornos.\n* **Seguridad:** Yarn realiza comprobaciones de seguridad para verificar la integridad de los paquetes instalados.\n\n### USO DE YARN\n\nPara instalar Yarn, puedes utilizar NPM:\n\n```bash\nnpm install -g yarn\n```\n\nUna vez instalado, puedes utilizar los comandos de Yarn de manera similar a NPM:\n\n* `yarn init`: Inicializa un nuevo proyecto.\n* `yarn add <paquete>`: Añade una dependencia.\n* `yarn remove <paquete>`: Elimina una dependencia.\n* `yarn install`: Instala las dependencias del proyecto.\n* `yarn upgrade <paquete>`: Actualiza una dependencia.\n\n## FUENTES DEL DOCUMENTO\n\n* Sitio web oficial de NPM: [https://www.npmjs.com/](https://www.npmjs.com/)\n* Documentación de NPM: [https://docs.npmjs.com/](https://docs.npmjs.com/)\n* Sitio web oficial de Node.js: [https://nodejs.org/](https://nodejs.org/)\n* Documentación de Yarn: [https://yarnpkg.com/](https://yarnpkg.com/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-best-practices/clean-code",
    "title": "Codigo Limpio",
    "description": "Guia para escribir codigo Javascript limpio, mantenible y legible.",
    "content": "El código limpio en JavaScript es fundamental para crear aplicaciones robustas, mantenibles y colaborativas. Se refiere a un estilo de programación que enfatiza la legibilidad, simplicidad y claridad del código. Un código limpio no solo es más fácil de entender para otros desarrolladores, sino que también reduce la probabilidad de errores y facilita la depuración.\n\n## OBJETIVOS CLAVE\n\n* **Legibilidad:** El código debe ser fácil de leer y entender, como si fuera prosa.\n* **Mantenibilidad:** Debe ser fácil de modificar y extender sin introducir nuevos errores.\n* **Reusabilidad:** Los componentes y funciones deben ser diseñados para ser reutilizados en diferentes partes del proyecto.\n* **Simplicidad:** Evitar la complejidad innecesaria y optar por soluciones claras y directas.\n* **Testabilidad:** Facilitar la escritura de pruebas unitarias y de integración para asegurar la calidad del código.\n\n## 1. NOMBRES SIGNIFICATIVOS\n\nElegir nombres descriptivos y significativos para variables, funciones y clases es crucial. Un buen nombre debe indicar claramente el propósito de la entidad que representa.\n\n**Ejemplo:**\n\n**Malo:**\n\n```javascript\nlet d; // Dias transcurridos\r\nfunction f(x) {\r\n  // ...\r\n}\n```\n\n**Bueno:**\n\n```javascript\nlet diasTranscurridos;\r\nfunction calcularImpuestos(ingreso) {\r\n  // ...\r\n}\n```\n\n## 2. FUNCIONES CHICAS Y MODULARES\n\nLas funciones deben ser pequeñas y realizar una única tarea bien definida. Esto facilita la comprensión, prueba y reutilización del código.\n\n**Ejemplo:**\n\n**Malo:**\n\n```javascript\nfunction procesarPedido(pedido) {\r\n  // Validar el pedido\r\n  if (!pedido.cliente || !pedido.productos || pedido.productos.length === 0) {\r\n    console.error(\"Pedido invalido\");\r\n    return;\r\n  }\r\n\r\n  // Calcular el total\r\n  let total = 0;\r\n  for (let producto of pedido.productos) {\r\n    total += producto.precio * producto.cantidad;\r\n  }\r\n\r\n  // Aplicar descuentos\r\n  if (pedido.cliente.esPremium) {\r\n    total *= 0.9; // 10% de descuento\r\n  }\r\n\r\n  // Guardar en la base de datos\r\n  guardarPedidoEnDB(pedido, total);\r\n\r\n  // Enviar confirmacion al cliente\r\n  enviarEmailConfirmacion(pedido.cliente.email, total);\r\n}\n```\n\n**Bueno:**\n\n```javascript\nfunction validarPedido(pedido) {\r\n  if (!pedido.cliente || !pedido.productos || pedido.productos.length === 0) {\r\n    console.error(\"Pedido invalido\");\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction calcularTotalPedido(pedido) {\r\n  let total = 0;\r\n  for (let producto of pedido.productos) {\r\n    total += producto.precio * producto.cantidad;\r\n  }\r\n  return total;\r\n}\r\n\r\nfunction aplicarDescuentos(total, cliente) {\r\n  if (cliente.esPremium) {\r\n    total *= 0.9; // 10% de descuento\r\n  }\r\n  return total;\r\n}\r\n\r\nfunction procesarPedido(pedido) {\r\n  if (!validarPedido(pedido)) return;\r\n\r\n  let total = calcularTotalPedido(pedido);\r\n  total = aplicarDescuentos(total, pedido.cliente);\r\n\r\n  guardarPedidoEnDB(pedido, total);\r\n  enviarEmailConfirmacion(pedido.cliente.email, total);\r\n}\n```\n\n## 3. COMENTARIOS ADECUADOS\n\nLos comentarios deben explicar el *por qué* del código, no el *qué*. Evitar comentarios obvios que simplemente repiten lo que el código ya dice.\n\n**Ejemplo:**\n\n**Malo:**\n\n```javascript\ni++; // Incrementa i en 1\n```\n\n**Bueno:**\n\n```javascript\n// Ajusta el indice para apuntar al siguiente elemento en el array\r\ni++;\n```\n\n## 4. INDENTACION CONSISTENTE\n\nMantener una indentación consistente hace que el código sea más legible y fácil de seguir. Utilizar 2 o 4 espacios para la indentación y adherirse a esta convención en todo el proyecto.\n\n**Ejemplo:**\n\n**Malo:**\n\n```javascript\nfunction ejemplo() {\r\nif (true) {\r\nconsole.log(\"Hola\");\r\n}\r\n}\n```\n\n**Bueno:**\n\n```javascript\nfunction ejemplo() {\r\n  if (true) {\r\n    console.log(\"Hola\");\r\n  }\r\n}\n```\n\n## 5. EVITAR LA DUPLICACION DE CODIGO\n\n***DRY - DON'T REPEAT YOURSELF***\n\nLa duplicación de código aumenta la probabilidad de errores y dificulta el mantenimiento. Extraer el código duplicado en funciones o componentes reutilizables.\n\n**Ejemplo:**\n\n**Malo:**\n\n```javascript\nfunction calcularAreaRectangulo(ancho, alto) {\r\n  return ancho * alto;\r\n}\r\n\r\nfunction calcularPerimetroRectangulo(ancho, alto) {\r\n  return 2 * ancho + 2 * alto;\r\n}\n```\n\n**Bueno:**\n\n```javascript\nfunction calcularArea(ancho, alto) {\r\n  return ancho * alto;\r\n}\r\n\r\nfunction calcularPerimetro(ancho, alto) {\r\n  return 2 * (ancho + alto);\r\n}\n```\n\n## 6. MANEJO DE ERRORES\n\nImplementar un manejo de errores adecuado para prevenir que la aplicación falle de manera inesperada. Utilizar bloques `try...catch` para capturar excepciones y proporcionar mensajes de error informativos.\n\n**Ejemplo:**\n\n```javascript\nfunction dividir(a, b) {\r\n  try {\r\n    if (b === 0) {\r\n      throw new Error(\"No se puede dividir por cero\");\r\n    }\r\n    return a / b;\r\n  } catch (error) {\r\n    console.error(\"Error:\", error.message);\r\n    return null;\r\n  }\r\n}\n```\n\n## 7. USO DE LINTERS Y FORMATTERS\n\nUtilizar linters (como ESLint) y formatters (como Prettier) para automatizar la aplicación de reglas de estilo y formato. Estas herramientas pueden detectar errores comunes y asegurar la consistencia del código en todo el proyecto.\n\n**Ejemplo:**\n\nConfiguración de ESLint:\n\n```javascript\n// .eslintrc.js\r\nmodule.exports = {\r\n  \"env\": {\r\n    \"browser\": true,\r\n    \"es2021\": true\r\n  },\r\n  \"extends\": [\r\n    \"eslint:recommended\",\r\n    \"plugin:@typescript-eslint/recommended\"\r\n  ],\r\n  \"parser\": \"@typescript-eslint/parser\",\r\n  \"plugins\": [\r\n    \"@typescript-eslint\"\r\n  ],\r\n  \"rules\": {\r\n    \"indent\": [\r\n      \"error\",\r\n      2\r\n    ],\r\n    \"quotes\": [\r\n      \"error\",\r\n      \"double\"\r\n    ],\r\n    \"semi\": [\r\n      \"error\",\r\n      \"always\"\r\n    ]\r\n  }\r\n};\n```\n\n## 8. PRUEBAS UNITARIAS\n\nEscribir pruebas unitarias para verificar que cada componente o función funciona correctamente. Las pruebas unitarias ayudan a detectar errores tempranamente y aseguran que el código se comporta como se espera después de realizar cambios.\n\n**Ejemplo:**\n\nUsando Jest:\n\n```javascript\n// sum.js\r\nfunction sum(a, b) {\r\n  return a + b;\r\n}\r\n\r\nmodule.exports = sum;\n```\n\n```javascript\n// sum.test.js\r\nconst sum = require('./sum');\r\n\r\ntest('adds 1 + 2 to equal 3', () => {\r\n  expect(sum(1, 2)).toBe(3);\r\n});\n```\n\n## 9. USO DE TYPESCRIPT\n\nConsiderar el uso de TypeScript para añadir tipado estático a JavaScript. TypeScript ayuda a detectar errores en tiempo de compilación, mejora la legibilidad del código y facilita la refactorización.\n\n**Ejemplo:**\n\n```typescript\nfunction saludar(nombre: string): string {\r\n  return `Hola, ${nombre}`;\r\n}\r\n\r\nconsole.log(saludar(\"Juan\"));\n```\n\n## 10. DOCUMENTACION\n\nDocumentar el código utilizando herramientas como JSDoc para generar documentación automática. Una buena documentación facilita la comprensión del código y ayuda a otros desarrolladores a utilizarlo correctamente.\n\n**Ejemplo:**\n\n```javascript\n/**\r\n * Suma dos numeros.\r\n * @param {number} a - El primer numero.\r\n * @param {number} b - El segundo numero.\r\n * @returns {number} La suma de a y b.\r\n */\r\nfunction sumar(a, b) {\r\n  return a + b;\r\n}\n```\n\n## CONCLUSION\n\nEscribir código limpio en JavaScript es una inversión que produce beneficios a largo plazo. Al seguir estas prácticas, se puede crear código más legible, mantenible, reutilizable y fácil de probar, lo que resulta en aplicaciones de mayor calidad y un proceso de desarrollo más eficiente.\n\n## FUENTES DEL DOCUMENTO\n\n* Robert C. Martin, \"Clean Code: A Handbook of Agile Software Craftsmanship\"\n* Steve McConnell, \"Code Complete: A Practical Handbook of Software Construction\"\n* [Google JavaScript Style Guide](https://google.github.io/styleguide/jsguide.html)\n* [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-best-practices/design-patterns",
    "title": "Patrones de Diseño Comunes",
    "description": "Exploración de los patrones de diseño más utilizados en JavaScript para crear código mantenible, escalable y eficiente.",
    "content": "Los patrones de diseño son soluciones reutilizables a problemas comunes que surgen durante el desarrollo de software. En JavaScript, estos patrones nos ayudan a escribir código más limpio, modular y fácil de mantener. Al comprender y aplicar estos patrones, los desarrolladores pueden mejorar la estructura y la organización de sus aplicaciones, lo que conduce a un código más robusto y escalable.\n\n## OBJETIVOS CLAVE\n\n* **Mejorar la Reutilización del Código:** Facilitar la reutilización de soluciones probadas y comprobadas.\n* **Aumentar la Mantenibilidad:** Hacer que el código sea más fácil de entender, modificar y depurar.\n* **Promover la Escalabilidad:** Permitir que las aplicaciones crezcan y se adapten a nuevas funcionalidades sin comprometer la estructura existente.\n* **Estandarizar la Comunicación:** Proporcionar un vocabulario común para discutir y diseñar soluciones de software.\n\n## DESARROLLO DE LOS PATRONES\n\nA continuación, se describen algunos de los patrones de diseño más comunes en JavaScript, junto con ejemplos de implementación.\n\n### 1. PATRON MODULO\n\nEl patrón módulo se utiliza para encapsular variables y funciones dentro de un objeto, proporcionando privacidad y evitando la contaminación del espacio de nombres global.\n\n**Implementación:**\n\n```javascript\nconst modulo = (function() {\r\n  let contador = 0;\r\n\r\n  function incrementar() {\r\n    contador++;\r\n  }\r\n\r\n  function obtenerContador() {\r\n    return contador;\r\n  }\r\n\r\n  return {\r\n    incrementar: incrementar,\r\n    obtenerContador: obtenerContador\r\n  };\r\n})();\r\n\r\nmodulo.incrementar();\r\nconsole.log(modulo.obtenerContador()); // Output: 1\n```\n\n**Explicación:**\n\n* Se utiliza una función anónima autoejecutable (IIFE) para crear un ámbito privado.\n* La variable `contador` y la función `incrementar` son privadas y no accesibles directamente desde fuera del módulo.\n* El objeto retornado expone las funciones `incrementar` y `obtenerContador`, que pueden ser utilizadas para interactuar con el módulo.\n\n### 2. PATRON SINGLETON\n\nEl patrón singleton asegura que una clase tenga solo una instancia y proporciona un punto de acceso global a ella.\n\n**Implementación:**\n\n```javascript\nconst Singleton = (function() {\r\n  let instancia;\r\n\r\n  function crearInstancia() {\r\n    const objeto = new Object(\"¡Soy la instancia!\");\r\n    return objeto;\r\n  }\r\n\r\n  return {\r\n    obtenerInstancia: function() {\r\n      if (!instancia) {\r\n        instancia = crearInstancia();\r\n      }\r\n      return instancia;\r\n    }\r\n  };\r\n})();\r\n\r\nconst instancia1 = Singleton.obtenerInstancia();\r\nconst instancia2 = Singleton.obtenerInstancia();\r\n\r\nconsole.log(instancia1 === instancia2); // Output: true\n```\n\n**Explicación:**\n\n* La variable `instancia` mantiene la única instancia de la clase.\n* La función `crearInstancia` crea una nueva instancia si no existe.\n* La función `obtenerInstancia` devuelve la instancia existente o crea una nueva si es necesario.\n\n### 3. PATRON FACTORY\n\nEl patrón factory proporciona una interfaz para crear objetos sin especificar sus clases concretas.\n\n**Implementación:**\n\n```javascript\nfunction Creador(tipo) {\r\n  if (tipo === \"Circulo\") {\r\n    return new Circulo();\r\n  } else if (tipo === \"Cuadrado\") {\r\n    return new Cuadrado();\r\n  }\r\n}\r\n\r\nfunction Circulo() {\r\n  this.dibujar = function() {\r\n    console.log(\"Dibujando un círculo\");\r\n  }\r\n}\r\n\r\nfunction Cuadrado() {\r\n  this.dibujar = function() {\r\n    console.log(\"Dibujando un cuadrado\");\r\n  }\r\n}\r\n\r\nconst circulo = Creador(\"Circulo\");\r\ncirculo.dibujar(); // Output: Dibujando un círculo\r\n\r\nconst cuadrado = Creador(\"Cuadrado\");\r\ncuadrado.dibujar(); // Output: Dibujando un cuadrado\n```\n\n**Explicación:**\n\n* La función `Creador` actúa como la fábrica, creando objetos de diferentes tipos basados en el parámetro `tipo`.\n* Las funciones `Circulo` y `Cuadrado` son las clases concretas que se crean.\n\n### 4. PATRON OBSERVER\n\nEl patrón observer define una dependencia uno-a-muchos entre objetos, de modo que cuando un objeto cambia de estado, todos sus dependientes son notificados y actualizados automáticamente.\n\n**Implementación:**\n\n```javascript\nfunction Subject() {\r\n  this.observers = [];\r\n\r\n  this.subscribe = function(observer) {\r\n    this.observers.push(observer);\r\n  }\r\n\r\n  this.unsubscribe = function(observer) {\r\n    this.observers = this.observers.filter(obs => obs !== observer);\r\n  }\r\n\r\n  this.fire = function(data) {\r\n    this.observers.forEach(observer => {\r\n      observer.update(data);\r\n    });\r\n  }\r\n}\r\n\r\nfunction Observer(name) {\r\n  this.name = name;\r\n  this.update = function(data) {\r\n    console.log(`${this.name}: ${data}`);\r\n  }\r\n}\r\n\r\nconst subject = new Subject();\r\n\r\nconst observer1 = new Observer(\"Observer 1\");\r\nconst observer2 = new Observer(\"Observer 2\");\r\n\r\nsubject.subscribe(observer1);\r\nsubject.subscribe(observer2);\r\n\r\nsubject.fire(\"¡Nuevo evento!\");\r\n// Output:\r\n// Observer 1: ¡Nuevo evento!\r\n// Observer 2: ¡Nuevo evento!\r\n\r\nsubject.unsubscribe(observer2);\r\n\r\nsubject.fire(\"¡Otro evento!\");\r\n// Output:\r\n// Observer 1: ¡Otro evento!\n```\n\n**Explicación:**\n\n* `Subject` mantiene una lista de `observers` y proporciona métodos para suscribir, desuscribir y notificar a los observers.\n* `Observer` define el método `update` que se llama cuando el subject emite un evento.\n\n### 5. PATRON PROTOTYPE\n\nEl patrón prototype permite crear nuevos objetos copiando un objeto existente, conocido como prototipo.\n\n**Implementación:**\n\n```javascript\nconst prototipo = {\r\n  saludar: function() {\r\n    console.log(\"Hola, soy un prototipo\");\r\n  }\r\n};\r\n\r\nconst objeto1 = Object.create(prototipo);\r\nobjeto1.saludar(); // Output: Hola, soy un prototipo\r\n\r\nconst objeto2 = Object.create(prototipo);\r\nobjeto2.saludar(); // Output: Hola, soy un prototipo\n```\n\n**Explicación:**\n\n* `prototipo` es un objeto que sirve como base para crear nuevos objetos.\n* `Object.create(prototipo)` crea un nuevo objeto que hereda las propiedades y métodos de `prototipo`.\n\n## CONCLUSION\n\nLos patrones de diseño son herramientas poderosas que ayudan a los desarrolladores de JavaScript a escribir código más organizado, mantenible y escalable. Al comprender y aplicar estos patrones, se pueden resolver problemas comunes de manera eficiente y mejorar la calidad general del software.\n\n## FUENTES DEL DOCUMENTO\n\n* [Addy Osmani - Learning JavaScript Design Patterns](https://www.patterns.dev/posts/classic-design-patterns/)\n* [Sourcemaking - Design Patterns](https://sourcemaking.com/design_patterns)\n* [Wikipedia - Design Patterns](https://en.wikipedia.org/wiki/Software_design_pattern)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-best-practices",
    "title": "Buenas Practicas y Patrones de Diseño",
    "description": "Guía completa sobre las mejores prácticas y patrones de diseño para escribir código JavaScript mantenible, escalable y eficiente.",
    "content": "## INTRODUCCION\n\nEl desarrollo de software moderno exige no solo que el código funcione, sino que también sea fácil de entender, mantener y escalar. En JavaScript, un lenguaje conocido por su flexibilidad y ubicuidad, adherirse a buenas prácticas y patrones de diseño es crucial para construir aplicaciones robustas y eficientes. Este documento explora las mejores prácticas y patrones de diseño más relevantes para JavaScript, proporcionando ejemplos y explicaciones detalladas para ayudar a los desarrolladores a escribir código de alta calidad.\n\n## OBJETIVOS CLAVE\n\n* **Mejorar la legibilidad del código:** Facilitar la comprensión del código por parte de otros desarrolladores y de uno mismo en el futuro.\n* **Aumentar la mantenibilidad:** Simplificar la modificación y corrección de errores en el código.\n* **Promover la reutilización:** Fomentar la creación de componentes y funciones que puedan ser utilizados en diferentes partes de la aplicación.\n* **Reducir la complejidad:** Dividir problemas complejos en partes más pequeñas y manejables.\n* **Optimizar el rendimiento:** Escribir código que se ejecute de manera eficiente y utilice los recursos de manera inteligente.\n\n## 1.  CODIGO LIMPIO (CLEAN CODE)\n\nEl concepto de \"código limpio\" se refiere a escribir código que sea fácil de entender, modificar y mantener. Algunas prácticas clave incluyen:\n\n* **Nombres descriptivos:** Utilizar nombres claros y significativos para variables, funciones y clases.\n* **Funciones pequeñas:** Dividir funciones grandes en funciones más pequeñas que realicen una sola tarea.\n* **Comentarios significativos:** Agregar comentarios solo cuando sean necesarios para explicar el propósito del código.\n* **Formato consistente:** Utilizar un estilo de código consistente en todo el proyecto.\n\n**Ejemplo:**\n\n```javascript\n// Mal\r\nfunction processData(d, o) {\r\n  let r = [];\r\n  for (let i = 0; i < d.length; i++) {\r\n    r.push(d[i] * o);\r\n  }\r\n  return r;\r\n}\r\n\r\n// Bien\r\nfunction processData(data, multiplier) {\r\n  const results = [];\r\n  for (let i = 0; i < data.length; i++) {\r\n    results.push(data[i] * multiplier);\r\n  }\r\n  return results;\r\n}\n```\n\n## 2.  MODULARIZACION\n\nLa modularización implica dividir el código en módulos independientes y reutilizables. Esto facilita la organización del código, reduce la complejidad y permite la reutilización de componentes en diferentes partes de la aplicación.\n\n* **Modulos ES6:** Utilizar la sintaxis de import/export para crear módulos.\n* **CommonJS:** Utilizado en Node.js para la modularización.\n* **Patron Modulo:** Utilizar funciones auto-ejecutables para encapsular el código.\n\n**Ejemplo (Modulos ES6):**\n\n```javascript\n// math.js\r\nexport function add(a, b) {\r\n  return a + b;\r\n}\r\n\r\n// app.js\r\nimport { add } from './math.js';\r\nconsole.log(add(2, 3)); // Output: 5\n```\n\n## 3.  MANEJO DE ERRORES\n\nUn manejo de errores adecuado es esencial para garantizar la estabilidad y la fiabilidad de la aplicación.\n\n* **Try-Catch:** Utilizar bloques try-catch para capturar excepciones y manejarlas de manera adecuada.\n* **Promesas y Async/Await:** Utilizar promesas y async/await para manejar errores en operaciones asíncronas.\n* **Lanzar Excepciones:** Lanzar excepciones personalizadas para indicar errores específicos.\n\n**Ejemplo:**\n\n```javascript\nasync function fetchData(url) {\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    // Manejar el error de manera adecuada\r\n  }\r\n}\n```\n\n## 4.  PATRONES DE DISEÑO\n\nLos patrones de diseño son soluciones reutilizables a problemas comunes en el diseño de software. Algunos patrones relevantes para JavaScript incluyen:\n\n* **Singleton:** Garantiza que una clase tenga solo una instancia y proporciona un punto de acceso global a ella.\n* **Factory:** Define una interfaz para crear objetos, pero permite que las subclases decidan qué clase instanciar.\n* **Observer:** Define una dependencia uno-a-muchos entre objetos, de modo que cuando un objeto cambia de estado, todos sus dependientes son notificados y actualizados automáticamente.\n* **Module:** Encapsula el código en un objeto, proporcionando una interfaz pública y ocultando la implementación interna.\n\n**Ejemplo (Singleton):**\n\n```javascript\nlet instance = null;\r\n\r\nclass Singleton {\r\n  constructor() {\r\n    if (!instance) {\r\n      instance = this;\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  getInstance() {\r\n    return this;\r\n  }\r\n}\r\n\r\nconst singleton1 = new Singleton();\r\nconst singleton2 = new Singleton();\r\n\r\nconsole.log(singleton1 === singleton2); // Output: true\n```\n\n## 5.  PRUEBAS (TESTING)\n\nLas pruebas son una parte integral del desarrollo de software de calidad. Escribir pruebas unitarias, de integración y de extremo a extremo ayuda a garantizar que el código funcione correctamente y que los cambios no introduzcan errores.\n\n* **Pruebas Unitarias:** Probar unidades individuales de código (funciones, clases).\n* **Pruebas de Integración:** Probar la interacción entre diferentes partes del sistema.\n* **Pruebas de Extremo a Extremo (E2E):** Probar el flujo completo de la aplicación desde la perspectiva del usuario.\n* **Frameworks de Pruebas:** Utilizar frameworks como Jest, Mocha o Jasmine para escribir y ejecutar pruebas.\n\n**Ejemplo (Jest):**\n\n```javascript\n// sum.js\r\nfunction sum(a, b) {\r\n  return a + b;\r\n}\r\nmodule.exports = sum;\r\n\r\n// sum.test.js\r\nconst sum = require('./sum');\r\n\r\ntest('adds 1 + 2 to equal 3', () => {\r\n  expect(sum(1, 2)).toBe(3);\r\n});\n```\n\n## 6.  OPTIMIZACION DEL RENDIMIENTO\n\nOptimizar el rendimiento del código JavaScript es crucial para garantizar una experiencia de usuario fluida y eficiente.\n\n* **Minimizar el acceso al DOM:** Reducir la cantidad de veces que se accede al DOM para realizar actualizaciones.\n* **Utilizar la delegación de eventos:** Delegar eventos a un elemento padre en lugar de adjuntarlos a múltiples elementos individuales.\n* **Evitar el uso excesivo de closures:** Los closures pueden consumir memoria adicional, por lo que es importante utilizarlos con moderación.\n* **Optimizar bucles:** Utilizar bucles eficientes y evitar operaciones costosas dentro de los bucles.\n* **Lazy Loading:** Cargar recursos (imágenes, scripts) solo cuando sean necesarios.\n\n**Ejemplo (Delegación de Eventos):**\n\n```html\n<ul id=\"myList\">\r\n  <li>Item 1</li>\r\n  <li>Item 2</li>\r\n  <li>Item 3</li>\r\n</ul>\r\n\r\n<script>\r\n  document.getElementById('myList').addEventListener('click', function(e) {\r\n    if (e.target && e.target.nodeName == 'LI') {\r\n      console.log('List item clicked:', e.target.textContent);\r\n    }\r\n  });\r\n</script>\n```\n\n## 7.  SEGURIDAD\n\nLa seguridad es una consideración importante en el desarrollo de aplicaciones JavaScript, especialmente en el contexto de aplicaciones web.\n\n* **Validación de entrada:** Validar todas las entradas del usuario para prevenir ataques de inyección.\n* **Sanitización de salida:** Sanitizar los datos antes de mostrarlos en la interfaz de usuario para prevenir ataques XSS.\n* **Utilizar HTTPS:** Asegurar la comunicación entre el cliente y el servidor utilizando HTTPS.\n* **Políticas de seguridad de contenido (CSP):** Implementar CSP para controlar los recursos que puede cargar el navegador.\n* **Autenticación y autorización:** Implementar mecanismos de autenticación y autorización robustos para proteger los datos y las funcionalidades de la aplicación.\n\n## 8.  DOCUMENTACION\n\nLa documentación es esencial para facilitar la comprensión y el mantenimiento del código.\n\n* **JSDoc:** Utilizar JSDoc para documentar el código y generar documentación automática.\n* **README:** Incluir un archivo README en el repositorio del proyecto con información sobre cómo configurar, ejecutar y contribuir al proyecto.\n* **Documentación interna:** Agregar comentarios claros y concisos en el código para explicar el propósito y la funcionalidad de las diferentes partes del sistema.\n\n**Ejemplo (JSDoc):**\n\n```javascript\n/**\r\n * Adds two numbers together.\r\n * @param {number} a The first number.\r\n * @param {number} b The second number.\r\n * @returns {number} The sum of a and b.\r\n */\r\nfunction add(a, b) {\r\n  return a + b;\r\n}\n```\n\n## CONCLUSION\n\nAdherirse a buenas prácticas y patrones de diseño en JavaScript es fundamental para construir aplicaciones robustas, mantenibles y eficientes. Al seguir las recomendaciones y ejemplos proporcionados en este documento, los desarrolladores pueden mejorar la calidad de su código, reducir la complejidad y facilitar la colaboración en proyectos de desarrollo de software.\n\n## FUENTES DEL DOCUMENTO\n\n* **\"Clean Code: A Handbook of Agile Software Craftsmanship\"** by Robert C. Martin\n* **\"Design Patterns: Elements of Reusable Object-Oriented Software\"** by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides\n* **MDN Web Docs:** [https://developer.mozilla.org/](https://developer.mozilla.org/)\n* **JavaScript Design Patterns:** [https://www.patterns.dev/](https://www.patterns.dev/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-best-practices/performance-optimization",
    "title": "Optimizacion Del Rendimiento",
    "description": "Tecnicas y estrategias para mejorar el rendimiento de aplicaciones Javascript.",
    "content": "La optimización del rendimiento en JavaScript es crucial para crear aplicaciones web rápidas y eficientes. Un rendimiento deficiente puede resultar en una mala experiencia del usuario, tiempos de carga lentos y un mayor consumo de recursos. Este documento explora diversas técnicas y estrategias para mejorar el rendimiento de tus aplicaciones JavaScript.\n\n## OBJETIVOS CLAVE\n\n* **Reducir los tiempos de carga:** Minimizar el tiempo que tarda una aplicación en cargarse inicialmente.\n* **Mejorar la capacidad de respuesta:** Asegurar que la interfaz de usuario responda rápidamente a las interacciones del usuario.\n* **Optimizar el uso de la memoria:** Evitar fugas de memoria y reducir el consumo general de memoria.\n* **Minimizar el uso de la CPU:** Reducir la cantidad de procesamiento que realiza el navegador.\n* **Escalabilidad:** Asegurar que la aplicación pueda manejar un gran número de usuarios y datos sin degradar el rendimiento.\n\n## 1. MINIFICACION Y COMPRESION DE CODIGO\n\nLa minificación y compresión son técnicas esenciales para reducir el tamaño de los archivos JavaScript.\n\n* **Minificación:** Elimina espacios en blanco, comentarios y otros caracteres innecesarios del código.\n* **Compresión:** Utiliza algoritmos como Gzip o Brotli para reducir aún más el tamaño de los archivos.\n\n**Ejemplo:**\n\n```javascript\n// Codigo original\r\nfunction saludar(nombre) {\r\n  console.log(\"Hola, \" + nombre + \"!\");\r\n}\r\n\r\nsaludar(\"Mundo\");\r\n\r\n// Codigo minificado\r\nfunction saludar(nombre){console.log(\"Hola, \"+nombre+\"!\");}saludar(\"Mundo\");\n```\n\n**Herramientas:**\n\n* **UglifyJS:** Para minificación.\n* **Webpack, Parcel, Rollup:** Bundlers que incluyen minificación y compresión.\n\n## 2. CARGA ASINCRONA Y DEFERIDA\n\nLa carga asíncrona y deferida de scripts permite que el navegador continúe解析ando el HTML sin esperar a que se descarguen y ejecuten los scripts.\n\n* **Async:** El script se ejecuta tan pronto como se descarga.\n* **Defer:** El script se ejecuta después de que el HTML ha sido解析ado, pero antes del evento `DOMContentLoaded`.\n\n**Ejemplo:**\n\n```html\n<script src=\"script.js\" async></script>\r\n<script src=\"script.js\" defer></script>\n```\n\n## 3. CACHING DEL NAVEGADOR\n\nEl almacenamiento en caché del navegador permite que los recursos se almacenen localmente, reduciendo la necesidad de descargarlos repetidamente.\n\n* **Cache-Control Headers:** Configura las políticas de caché en el servidor.\n* **Service Workers:** Permiten un control más avanzado sobre el almacenamiento en caché y la gestión de recursos.\n\n**Ejemplo:**\n\n```\nCache-Control: public, max-age=31536000\n```\n\n## 4. OPTIMIZACION DE IMAGENES\n\nLas imágenes suelen ser una de las mayores fuentes de lentitud en las aplicaciones web.\n\n* **Compresión:** Reduce el tamaño de los archivos de imagen sin una pérdida significativa de calidad.\n* **Formatos Modernos:** Utiliza formatos como WebP que ofrecen una mejor compresión que JPEG o PNG.\n* **Lazy Loading:** Carga las imágenes solo cuando están a punto de aparecer en la pantalla.\n\n**Ejemplo:**\n\n```html\n<img src=\"image.webp\" alt=\"Imagen\" loading=\"lazy\">\n```\n\n## 5. VIRTUAL DOM\n\nEl Virtual DOM es una técnica utilizada por frameworks como React para minimizar las actualizaciones directas del DOM, que son costosas.\n\n* **React:** Utiliza el Virtual DOM para comparar el estado anterior y el nuevo, y solo actualiza las partes del DOM que han cambiado.\n\n**Ejemplo:**\n\n```jsx\nimport React, { useState } from 'react';\r\n\r\nfunction Contador() {\r\n  const [contador, setContador] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Contador: {contador}</p>\r\n      <button onClick={() => setContador(contador + 1)}>Incrementar</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contador;\n```\n\n## 6. DEBOUNCING Y THROTTLING\n\nEstas técnicas ayudan a limitar la frecuencia con la que se ejecutan ciertas funciones, especialmente en respuesta a eventos como el desplazamiento o el cambio de tamaño de la ventana.\n\n* **Debouncing:** Retrasa la ejecución de una función hasta que haya transcurrido un cierto período de inactividad.\n* **Throttling:** Limita la frecuencia con la que se puede ejecutar una función.\n\n**Ejemplo (Debouncing):**\n\n```javascript\nfunction debounce(func, delay) {\r\n  let timeout;\r\n  return function(...args) {\r\n    const context = this;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func.apply(context, args), delay);\r\n  };\r\n}\r\n\r\nfunction procesarInput(evento) {\r\n  console.log(\"Procesando input:\", evento.target.value);\r\n}\r\n\r\nconst procesarInputDebounced = debounce(procesarInput, 300);\r\n\r\ndocument.getElementById('miInput').addEventListener('input', procesarInputDebounced);\n```\n\n## 7. OPTIMIZACION DE BUCLES Y ALGORITMOS\n\nLa eficiencia de los bucles y algoritmos puede tener un gran impacto en el rendimiento.\n\n* **Evitar Cálculos Redundantes:** Realizar cálculos costosos fuera de los bucles.\n* **Usar Bucles Eficientes:** Utilizar `for` en lugar de `forEach` cuando sea posible.\n* **Algoritmos Optimizados:** Elegir algoritmos que tengan una complejidad temporal menor.\n\n**Ejemplo:**\n\n```javascript\n// Ineficiente\r\nfor (let i = 0; i < array.length; i++) {\r\n  const elemento = array[i];\r\n  const resultado = Math.sqrt(array.length); // Calculo redundante\r\n  console.log(elemento * resultado);\r\n}\r\n\r\n// Eficiente\r\nconst longitud = array.length;\r\nconst resultado = Math.sqrt(longitud);\r\nfor (let i = 0; i < longitud; i++) {\r\n  const elemento = array[i];\r\n  console.log(elemento * resultado);\r\n}\n```\n\n## 8. USO EFICIENTE DE LA MEMORIA\n\nLa gestión de la memoria es crucial para evitar fugas de memoria y garantizar que la aplicación funcione sin problemas durante largos períodos.\n\n* **Evitar Variables Globales:** Reducir el uso de variables globales para evitar colisiones y facilitar la recolección de basura.\n* **Liberar Referencias:** Eliminar referencias a objetos que ya no se necesitan.\n* **Usar WeakMaps y WeakSets:** Para mantener referencias a objetos sin evitar que sean recolectados por el recolector de basura.\n\n**Ejemplo:**\n\n```javascript\nlet elemento = document.getElementById('miElemento');\r\n// ...\r\nelemento = null; // Liberar la referencia\n```\n\n## 9. PROFILING Y MONITORIZACION\n\nEl profiling y la monitorización son esenciales para identificar cuellos de botella y áreas de mejora en el rendimiento.\n\n* **Chrome DevTools:** Utiliza las herramientas de rendimiento para analizar el tiempo de ejecución, el uso de la memoria y otros aspectos del rendimiento.\n* **Lighthouse:** Realiza auditorías automatizadas del rendimiento, accesibilidad y otras métricas.\n\n**Ejemplo (Chrome DevTools):**\n\n1. Abrir Chrome DevTools (F12).\n2. Ir a la pestaña \"Performance\".\n3. Grabar una sesión mientras se interactúa con la aplicación.\n4. Analizar los resultados para identificar áreas problemáticas.\n\n## 10. OPTIMIZACION DEL DOM\n\nMinimizar las manipulaciones del DOM puede mejorar significativamente el rendimiento.\n\n* **Batch Updates:** Realizar múltiples actualizaciones del DOM en una sola operación.\n* **DocumentFragment:** Utilizar `DocumentFragment` para construir elementos fuera del DOM y luego agregarlos en una sola operación.\n\n**Ejemplo:**\n\n```javascript\nconst fragmento = document.createDocumentFragment();\r\nfor (let i = 0; i < 1000; i++) {\r\n  const elemento = document.createElement('div');\r\n  elemento.textContent = 'Elemento ' + i;\r\n  fragmento.appendChild(elemento);\r\n}\r\ndocument.getElementById('contenedor').appendChild(fragmento);\n```\n\n## 11. USO DE WEBPACK BUNDLE ANALYZER\n\nWebpack Bundle Analyzer es una herramienta que visualiza el tamaño de los módulos dentro de tus bundles de Webpack, permitiéndote identificar dependencias grandes o innecesarias.\n\n* **Instalación:**\n\n```bash\nnpm install --save-dev webpack-bundle-analyzer\n```\n\n* **Configuración en `webpack.config.js`:**\n\n```javascript\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\r\n\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  plugins: [\r\n    new BundleAnalyzerPlugin()\r\n  ]\r\n};\n```\n\n## 12. SERVER-SIDE RENDERING (SSR)\n\nSSR mejora el tiempo de carga inicial al renderizar la aplicación en el servidor y enviar el HTML ya renderizado al cliente.\n\n* **Next.js (para React):** Un framework que facilita la implementación de SSR en aplicaciones React.\n* **Nuxt.js (para Vue):** Similar a Next.js, pero para aplicaciones Vue.\n\n**Ejemplo (Next.js):**\n\n```jsx\nfunction HomePage({ data }) {\r\n  return (\r\n    <div>\r\n      <h1>Lista de Posts</h1>\r\n      <ul>\r\n        {data.map(post => (\r\n          <li key={post.id}>{post.title}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport async function getServerSideProps() {\r\n  const res = await fetch('https://api.example.com/posts');\r\n  const data = await res.json();\r\n\r\n  return {\r\n    props: {\r\n      data,\r\n    },\r\n  };\r\n}\r\n\r\nexport default HomePage;\n```\n\n## 13. CODE SPLITTING\n\nCode splitting divide tu código en chunks más pequeños que se pueden cargar bajo demanda, reduciendo el tamaño inicial del bundle.\n\n* **Dynamic Imports:** Utiliza `import()` para cargar módulos de forma asíncrona.\n* **Webpack:** Configura Webpack para dividir el código en chunks basados en rutas o componentes.\n\n**Ejemplo:**\n\n```javascript\nasync function cargarComponente() {\r\n  const { default: Componente } = await import('./Componente');\r\n  // ...\r\n}\n```\n\n## CONCLUSION\n\nLa optimización del rendimiento en JavaScript es un proceso continuo que requiere una comprensión profunda de las herramientas y técnicas disponibles. Al implementar estas estrategias, puedes mejorar significativamente la velocidad y la capacidad de respuesta de tus aplicaciones web, proporcionando una mejor experiencia al usuario.\n\n## FUENTES DEL DOCUMENTO\n\n* **Google Developers - Optimize Website Speed:** [https://developers.google.com/speed/docs/insights/v5/](https://developers.google.com/speed/docs/insights/v5/)\n* **MDN Web Docs - Optimizing Your Website For Speed:** [https://developer.mozilla.org/en-US/docs/Web/Performance/Optimizing\\_content\\_efficiency](https://developer.mozilla.org/en-US/docs/Web/Performance/Optimizing_content_efficiency)\n* **Webpack Documentation:** [https://webpack.js.org/](https://webpack.js.org/)\n* **React Documentation:** [https://reactjs.org/](https://reactjs.org/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-browser/ajax-fetch",
    "title": "AJAX Y FETCH",
    "description": "Comparación detallada de AJAX y Fetch API en JavaScript, incluyendo ejemplos de uso, ventajas y desventajas.",
    "content": "AJAX (Asynchronous JavaScript and XML) y Fetch API son dos tecnologías fundamentales en el desarrollo web moderno para realizar solicitudes HTTP asíncronas desde el navegador. Permiten a las aplicaciones web comunicarse con un servidor en segundo plano, sin necesidad de recargar la página completa. Aunque ambos cumplen una función similar, existen diferencias importantes en su implementación y capacidades.\n\n## OBJETIVOS CLAVE\n\n* Entender los fundamentos de AJAX y Fetch API.\n* Comparar sus ventajas y desventajas.\n* Aprender a implementar solicitudes HTTP con ambos métodos.\n* Conocer las mejores prácticas para su uso en el desarrollo web.\n\n## AJAX (ASYNCHRONOUS JAVASCRIPT AND XML)\n\n### ¿QUE ES AJAX?\n\nAJAX es una técnica de desarrollo web que permite actualizar partes de una página web sin recargar toda la página. Utiliza el objeto `XMLHttpRequest` (XHR) para realizar solicitudes HTTP asíncronas al servidor.\n\n### COMO FUNCIONA AJAX\n\n1. **Evento del Usuario:** El usuario realiza una acción en la página web (por ejemplo, un clic en un botón).\n2. **Creación del Objeto XHR:** JavaScript crea una instancia del objeto `XMLHttpRequest`.\n3. **Configuración de la Solicitud:** Se configura la solicitud especificando el método HTTP (GET, POST, etc.), la URL del servidor y si la solicitud es asíncrona.\n4. **Envío de la Solicitud:** Se envía la solicitud al servidor.\n5. **Respuesta del Servidor:** El servidor procesa la solicitud y envía una respuesta.\n6. **Manejo de la Respuesta:** JavaScript recibe la respuesta del servidor y actualiza la página web de forma dinámica.\n\n### EJEMPLO DE IMPLEMENTACION DE AJAX\n\n```javascript\nfunction cargarDatos() {\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.open('GET', 'data.txt', true);\r\n\r\n  xhr.onload = function() {\r\n    if (xhr.status >= 200 && xhr.status < 300) {\r\n      document.getElementById('contenedor').textContent = xhr.responseText;\r\n    } else {\r\n      console.error('Error en la solicitud: ' + xhr.status);\r\n    }\r\n  };\r\n\r\n  xhr.onerror = function() {\r\n    console.error('Error de red');\r\n  };\r\n\r\n  xhr.send();\r\n}\r\n\r\ndocument.getElementById('botonCargar').addEventListener('click', cargarDatos);\n```\n\nEn este ejemplo:\n\n* Se crea un objeto `XMLHttpRequest`.\n* Se configura una solicitud GET al archivo `data.txt`.\n* Se define una función para manejar la respuesta del servidor.\n* Se envía la solicitud.\n* Si la solicitud es exitosa (código de estado 200-299), se actualiza el contenido del elemento con el ID `contenedor` con la respuesta del servidor.\n* Se manejan los errores de la solicitud.\n\n### VENTAJAS DE AJAX\n\n* **Mejora la Experiencia del Usuario:** Permite actualizaciones parciales de la página, lo que resulta en una experiencia más fluida y rápida.\n* **Reduce el Tráfico de Red:** Solo se transfieren los datos necesarios, lo que reduce el consumo de ancho de banda.\n* **Mayor Interactividad:** Permite crear aplicaciones web más interactivas y dinámicas.\n\n### DESVENTAJAS DE AJAX\n\n* **Complejidad:** La implementación con `XMLHttpRequest` puede ser verbosa y compleja.\n* **Soporte Limitado de Promesas:** `XMLHttpRequest` no utiliza promesas de forma nativa, lo que dificulta el manejo de código asíncrono.\n* **Vulnerabilidades de Seguridad:** Requiere una gestión cuidadosa de la seguridad para evitar ataques como Cross-Site Scripting (XSS).\n\n## FETCH API\n\n### ¿QUE ES FETCH API?\n\nFetch API es una interfaz moderna para realizar solicitudes HTTP en JavaScript. Proporciona una forma más sencilla y flexible de realizar solicitudes asíncronas en comparación con `XMLHttpRequest`.\n\n### COMO FUNCIONA FETCH API\n\n1. **Llamada a `fetch()`:** Se llama a la función `fetch()` con la URL del recurso que se desea obtener.\n2. **Solicitud al Servidor:** `fetch()` realiza una solicitud HTTP al servidor.\n3. **Respuesta del Servidor:** El servidor procesa la solicitud y envía una respuesta.\n4. **Manejo de la Respuesta:** `fetch()` devuelve una promesa que se resuelve con un objeto `Response`.\n5. **Extracción de Datos:** Se utilizan métodos del objeto `Response` (como `json()`, `text()`, `blob()`) para extraer los datos de la respuesta.\n6. **Procesamiento de Datos:** Se procesan los datos y se actualiza la página web de forma dinámica.\n\n### EJEMPLO DE IMPLEMENTACION DE FETCH API\n\n```javascript\nfunction cargarDatos() {\r\n  fetch('data.json')\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Error en la solicitud: ' + response.status);\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      document.getElementById('contenedor').textContent = data.mensaje;\r\n    })\r\n    .catch(error => {\r\n      console.error('Error:', error);\r\n    });\r\n}\r\n\r\ndocument.getElementById('botonCargar').addEventListener('click', cargarDatos);\n```\n\nEn este ejemplo:\n\n* Se utiliza `fetch()` para realizar una solicitud GET al archivo `data.json`.\n* Se maneja la respuesta con promesas.\n* Se verifica si la respuesta es exitosa (código de estado 200-299).\n* Se extraen los datos de la respuesta utilizando el método `json()`.\n* Se actualiza el contenido del elemento con el ID `contenedor` con el valor de la propiedad `mensaje` del objeto JSON.\n* Se manejan los errores de la solicitud.\n\n### VENTAJAS DE FETCH API\n\n* **Sintaxis Más Sencilla:** Proporciona una sintaxis más clara y concisa en comparación con `XMLHttpRequest`.\n* **Uso de Promesas:** Utiliza promesas de forma nativa, lo que facilita el manejo de código asíncrono.\n* **Mayor Flexibilidad:** Ofrece más opciones de configuración y control sobre las solicitudes HTTP.\n* **Soporte Nativo:** Es una API nativa del navegador, lo que significa que no requiere bibliotecas externas.\n\n### DESVENTAJAS DE FETCH API\n\n* **Manejo de Errores:** No rechaza las promesas para errores HTTP (como 404 o 500) por defecto. Es necesario verificar la propiedad `ok` del objeto `Response`.\n* **Soporte de Navegadores Antiguos:** No es compatible con navegadores muy antiguos (como Internet Explorer sin polyfills).\n\n## COMPARACION ENTRE AJAX Y FETCH API\n\n| Característica        | AJAX (XMLHttpRequest)                                  | Fetch API                                            |\r\n| :-------------------- | :----------------------------------------------------- | :--------------------------------------------------- |\r\n| Sintaxis              | Verbosa y compleja                                     | Más sencilla y concisa                               |\r\n| Promesas              | No utiliza promesas de forma nativa                    | Utiliza promesas de forma nativa                      |\r\n| Manejo de Errores     | Requiere manejo manual de códigos de estado HTTP       | Requiere verificar la propiedad `ok` del objeto `Response` |\r\n| Flexibilidad          | Limitada                                               | Mayor flexibilidad y control sobre las solicitudes   |\r\n| Soporte de Navegadores | Compatible con navegadores antiguos (con algunas limitaciones) | No compatible con navegadores muy antiguos (sin polyfills) |\n\n## CUANDO USAR CADA UNO\n\n* **AJAX (XMLHttpRequest):** Puede ser útil en proyectos que requieren compatibilidad con navegadores muy antiguos y donde no se necesita la flexibilidad de Fetch API.\n* **Fetch API:** Es la opción recomendada para proyectos nuevos que no necesitan soporte para navegadores muy antiguos y donde se busca una sintaxis más sencilla y el uso de promesas.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: Using Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)\n* [MDN Web Docs: XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)\n* [W3Schools: AJAX Introduction](https://www.w3schools.com/xml/ajax_intro.asp)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-browser/dom",
    "title": "El DOM (Document Object Model)",
    "description": "Explicación detallada del DOM, su estructura, manipulación y uso en JavaScript.",
    "content": "El **Document Object Model (DOM)** es una interfaz de programación para documentos HTML, XML y SVG. Proporciona una representación estructurada del documento como un árbol, donde cada nodo representa una parte del documento (elementos, atributos, texto, etc.). El DOM permite a los scripts (como JavaScript) acceder y manipular el contenido, la estructura y el estilo de un documento web de forma dinámica.\n\n## OBJETIVOS CLAVE SOBRE EL DOM\n\n1. **Representación Estructurada:** Proporcionar una representación en forma de árbol del documento, facilitando la navegación y manipulación.\n2. **Acceso y Manipulación:** Permitir a los scripts acceder y modificar el contenido, la estructura y el estilo del documento.\n3. **Interactividad:** Facilitar la creación de páginas web interactivas y dinámicas.\n4. **Independencia del Lenguaje:** Ser una interfaz estándar que puede ser utilizada por diferentes lenguajes de programación.\n\n## ESTRUCTURA DEL DOM\n\nEl DOM representa un documento como un árbol de nodos. Cada nodo en el árbol representa una parte del documento. Los tipos de nodos más comunes son:\n\n* **Document:** Representa el documento HTML completo. Es el nodo raíz del árbol DOM.\n* **Element:** Representa un elemento HTML, como `<div>`, `<p>`, `<h1>`, etc.\n* **Attribute:** Representa un atributo de un elemento HTML, como `id`, `class`, `src`, etc.\n* **Text:** Representa el texto dentro de un elemento HTML.\n* **Comment:** Representa un comentario HTML.\n\n### EJEMPLO DE ESTRUCTURA DEL DOM\n\nConsideremos el siguiente código HTML:\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Mi Página</title>\r\n</head>\r\n<body>\r\n    <h1>Título Principal</h1>\r\n    <p id=\"parrafo1\">Este es un párrafo.</p>\r\n    <ul>\r\n        <li>Elemento 1</li>\r\n        <li>Elemento 2</li>\r\n    </ul>\r\n</body>\r\n</html>\n```\n\nEl DOM representaría este documento como un árbol donde:\n\n* El nodo raíz es el objeto `document`.\n* El elemento `<html>` es un hijo del nodo `document`.\n* Dentro de `<html>`, hay dos hijos: `<head>` y `<body>`.\n* Dentro de `<head>`, está el elemento `<title>`.\n* Dentro de `<body>`, están los elementos `<h1>`, `<p>`, y `<ul>`.\n* El elemento `<p>` tiene un atributo `id` con el valor \"parrafo1\".\n* El elemento `<ul>` tiene dos hijos `<li>`.\n* Cada elemento `<li>` contiene un nodo de texto.\n\n## ACCESO A LOS NODOS DEL DOM\n\nJavaScript proporciona varios métodos para acceder a los nodos del DOM:\n\n* **`document.getElementById(id)`:** Selecciona un elemento por su atributo `id`.\n\n  ```javascript\n  const parrafo = document.getElementById(\"parrafo1\");\r\n  console.log(parrafo.textContent); // Imprime: Este es un párrafo.\n  ```\n\n* **`document.getElementsByClassName(className)`:** Selecciona todos los elementos con la clase especificada.\n\n  ```html\n  <div class=\"mi-clase\">Elemento 1</div>\r\n  <div class=\"mi-clase\">Elemento 2</div>\n  ```\n\n  ```javascript\n  const elementos = document.getElementsByClassName(\"mi-clase\");\r\n  console.log(elementos.length); // Imprime: 2\n  ```\n\n* **`document.getElementsByTagName(tagName)`:** Selecciona todos los elementos con el nombre de etiqueta especificado.\n\n  ```javascript\n  const parrafos = document.getElementsByTagName(\"p\");\r\n  console.log(parrafos.length); // Imprime el número de párrafos en el documento\n  ```\n\n* **`document.querySelector(selector)`:** Selecciona el primer elemento que coincide con el selector CSS especificado.\n\n  ```javascript\n  const parrafo = document.querySelector(\"#parrafo1\");\r\n  console.log(parrafo.textContent); // Imprime: Este es un párrafo.\n  ```\n\n* **`document.querySelectorAll(selector)`:** Selecciona todos los elementos que coinciden con el selector CSS especificado.\n\n  ```javascript\n  const elementos = document.querySelectorAll(\".mi-clase\");\r\n  console.log(elementos.length); // Imprime: 2\n  ```\n\n## MANIPULACION DEL DOM\n\nUna vez que se tiene acceso a los nodos del DOM, se pueden manipular sus propiedades y contenido.\n\n* **Modificar el contenido de un nodo:**\n\n  * `textContent`: Establece o devuelve el contenido de texto de un nodo.\n\n    ```javascript\n    const parrafo = document.getElementById(\"parrafo1\");\r\n    parrafo.textContent = \"Nuevo texto para el párrafo.\";\n    ```\n\n  * `innerHTML`: Establece o devuelve el contenido HTML de un nodo.\n\n    ```javascript\n    const parrafo = document.getElementById(\"parrafo1\");\r\n    parrafo.innerHTML = \"<strong>Nuevo texto</strong> con formato HTML.\";\n    ```\n\n* **Modificar los atributos de un elemento:**\n\n  * `setAttribute(name, value)`: Establece el valor de un atributo.\n\n    ```javascript\n    const enlace = document.createElement(\"a\");\r\n    enlace.setAttribute(\"href\", \"https://www.ejemplo.com\");\r\n    enlace.textContent = \"Enlace a Ejemplo\";\r\n    document.body.appendChild(enlace);\n    ```\n\n  * `getAttribute(name)`: Devuelve el valor de un atributo.\n\n    ```javascript\n    const enlace = document.querySelector(\"a\");\r\n    console.log(enlace.getAttribute(\"href\")); // Imprime: https://www.ejemplo.com\n    ```\n\n* **Crear y añadir nuevos nodos:**\n\n  * `document.createElement(tagName)`: Crea un nuevo elemento HTML.\n\n    ```javascript\n    const nuevoParrafo = document.createElement(\"p\");\r\n    nuevoParrafo.textContent = \"Este es un nuevo párrafo creado con JavaScript.\";\r\n    document.body.appendChild(nuevoParrafo);\n    ```\n\n  * `document.createTextNode(text)`: Crea un nuevo nodo de texto.\n\n    ```javascript\n    const nuevoTexto = document.createTextNode(\"Este es un nuevo texto.\");\r\n    const nuevoParrafo = document.createElement(\"p\");\r\n    nuevoParrafo.appendChild(nuevoTexto);\r\n    document.body.appendChild(nuevoParrafo);\n    ```\n\n  * `appendChild(node)`: Añade un nodo como hijo de otro nodo.\n\n    ```javascript\n    const lista = document.querySelector(\"ul\");\r\n    const nuevoElemento = document.createElement(\"li\");\r\n    nuevoElemento.textContent = \"Nuevo elemento de la lista.\";\r\n    lista.appendChild(nuevoElemento);\n    ```\n\n* **Eliminar nodos:**\n\n  * `removeChild(node)`: Elimina un nodo hijo de otro nodo.\n\n    ```javascript\n    const lista = document.querySelector(\"ul\");\r\n    const primerElemento = lista.firstChild;\r\n    lista.removeChild(primerElemento);\n    ```\n\n  * `remove()`: Elimina el nodo del DOM.\n\n    ```javascript\n    const parrafo = document.getElementById(\"parrafo1\");\r\n    parrafo.remove();\n    ```\n\n## EVENTOS DEL DOM\n\nLos eventos del DOM permiten a los scripts reaccionar a las interacciones del usuario y otros eventos que ocurren en el documento.\n\n* **Tipos de eventos comunes:**\n  * `click`: Se dispara cuando se hace clic en un elemento.\n  * `mouseover`: Se dispara cuando el cursor del ratón entra en un elemento.\n  * `mouseout`: Se dispara cuando el cursor del ratón sale de un elemento.\n  * `keydown`: Se dispara cuando se presiona una tecla.\n  * `keyup`: Se dispara cuando se suelta una tecla.\n  * `submit`: Se dispara cuando se envía un formulario.\n  * `load`: Se dispara cuando se carga completamente un documento o un recurso.\n\n* **Añadir un event listener:**\n\n  * `addEventListener(event, function)`: Añade un event listener a un elemento.\n\n    ```javascript\n    const boton = document.querySelector(\"button\");\r\n    boton.addEventListener(\"click\", function() {\r\n        alert(\"¡Botón clickeado!\");\r\n    });\n    ```\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: CAMBIAR EL TEXTO DE UN PARRAFO AL HACER CLIC EN UN BOTON\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Ejemplo DOM</title>\r\n</head>\r\n<body>\r\n    <p id=\"miParrafo\">Texto inicial.</p>\r\n    <button id=\"miBoton\">Cambiar Texto</button>\r\n\r\n    <script>\r\n        const parrafo = document.getElementById(\"miParrafo\");\r\n        const boton = document.getElementById(\"miBoton\");\r\n\r\n        boton.addEventListener(\"click\", function() {\r\n            parrafo.textContent = \"Texto cambiado al hacer clic en el botón.\";\r\n        });\r\n    </script>\r\n</body>\r\n</html>\n```\n\n### EJEMPLO 2: AÑADIR ELEMENTOS A UNA LISTA DINAMICAMENTE\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Ejemplo DOM</title>\r\n</head>\r\n<body>\r\n    <ul id=\"miLista\">\r\n        <li>Elemento 1</li>\r\n        <li>Elemento 2</li>\r\n    </ul>\r\n    <input type=\"text\" id=\"nuevoElementoTexto\" placeholder=\"Nuevo elemento\">\r\n    <button id=\"agregarElemento\">Agregar Elemento</button>\r\n\r\n    <script>\r\n        const lista = document.getElementById(\"miLista\");\r\n        const inputTexto = document.getElementById(\"nuevoElementoTexto\");\r\n        const botonAgregar = document.getElementById(\"agregarElemento\");\r\n\r\n        botonAgregar.addEventListener(\"click\", function() {\r\n            const nuevoTexto = inputTexto.value;\r\n            if (nuevoTexto.trim() !== \"\") {\r\n                const nuevoElemento = document.createElement(\"li\");\r\n                nuevoElemento.textContent = nuevoTexto;\r\n                lista.appendChild(nuevoElemento);\r\n                inputTexto.value = \"\"; // Limpiar el input\r\n            }\r\n        });\r\n    </script>\r\n</body>\r\n</html>\n```\n\n## OPTIMIZACION DEL DOM\n\nLa manipulación del DOM puede ser costosa en términos de rendimiento, especialmente en aplicaciones web complejas. Aquí hay algunas técnicas para optimizar el uso del DOM:\n\n* **Minimizar las manipulaciones del DOM:** Realizar cambios en el DOM en lotes en lugar de individualmente.\n* **Utilizar fragmentos de documento:** Crear nodos fuera del DOM y luego añadirlos al DOM en un solo paso.\n* **Cachear los selectores del DOM:** Almacenar en caché los elementos del DOM que se utilizan con frecuencia para evitar buscarlos repetidamente.\n* **Delegación de eventos:** En lugar de añadir event listeners a cada elemento individualmente, añadir un event listener a un elemento padre y utilizar la propiedad `target` del evento para determinar qué elemento se ha activado.\n\n## CONCLUSION\n\nEl DOM es una herramienta fundamental para el desarrollo web dinámico e interactivo. Permite a los desarrolladores manipular el contenido, la estructura y el estilo de un documento web utilizando JavaScript. Comprender cómo funciona el DOM y cómo optimizar su uso es esencial para crear aplicaciones web rápidas y eficientes.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs - Document Object Model (DOM)](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)\n* [W3C DOM Specification](https://www.w3.org/DOM/)\n* [GeeksforGeeks - Document Object Model (DOM)](https://www.geeksforgeeks.org/document-object-model-dom/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-browser/dom-manipulation",
    "title": "Manipulacion Del DOM Javascript",
    "description": "Guia completa sobre la manipulacion del DOM con Javascript, incluyendo seleccion de elementos, modificacion de atributos, creacion y eliminacion de nodos, y manejo de eventos.",
    "content": "El Document Object Model (DOM) es una interfaz de programacion para documentos HTML y XML. Representa la pagina web como una estructura de arbol, donde cada elemento HTML es un nodo en el arbol. Javascript utiliza el DOM para interactuar con los elementos de una pagina web, permitiendo modificar su contenido, estilo y estructura.\n\n## OBJETIVOS CLAVE\n\n* **Seleccion de Elementos:** Aprender a seleccionar elementos del DOM utilizando diferentes metodos.\n* **Modificacion de Atributos:**  Entender como modificar los atributos de los elementos HTML.\n* **Creacion y Eliminacion de Nodos:**  Saber como crear nuevos elementos y eliminarlos del DOM.\n* **Manejo de Eventos:**  Aprender a responder a las interacciones del usuario mediante eventos.\n\n## SELECCION DE ELEMENTOS\n\nJavascript proporciona varios metodos para seleccionar elementos del DOM. Algunos de los mas comunes son:\n\n* **`getElementById(id)`:**  Selecciona un elemento por su atributo `id`.\n\n  ```javascript\n  const elemento = document.getElementById(\"miElemento\");\r\n  console.log(elemento); // Imprime el elemento con el id \"miElemento\"\n  ```\n\n* **`getElementsByClassName(className)`:**  Selecciona todos los elementos con la clase especificada.\n\n  ```javascript\n  const elementos = document.getElementsByClassName(\"miClase\");\r\n  console.log(elementos); // Imprime una HTMLCollection con todos los elementos de la clase \"miClase\"\n  ```\n\n* **`getElementsByTagName(tagName)`:**  Selecciona todos los elementos con el nombre de etiqueta especificado.\n\n  ```javascript\n  const elementos = document.getElementsByTagName(\"p\");\r\n  console.log(elementos); // Imprime una HTMLCollection con todos los parrafos (<p>)\n  ```\n\n* **`querySelector(selector)`:**  Selecciona el primer elemento que coincide con el selector CSS especificado.\n\n  ```javascript\n  const elemento = document.querySelector(\".miClase\");\r\n  console.log(elemento); // Imprime el primer elemento con la clase \"miClase\"\n  ```\n\n* **`querySelectorAll(selector)`:**  Selecciona todos los elementos que coinciden con el selector CSS especificado.\n\n  ```javascript\n  const elementos = document.querySelectorAll(\"div > p\");\r\n  console.log(elementos); // Imprime una NodeList con todos los parrafos (<p>) que son hijos directos de un <div>\n  ```\n\n## MODIFICACION DE ATRIBUTOS\n\nLos atributos de los elementos HTML pueden ser modificados utilizando Javascript.\n\n* **`getAttribute(attributeName)`:**  Obtiene el valor del atributo especificado.\n\n  ```javascript\n  const elemento = document.getElementById(\"miImagen\");\r\n  const src = elemento.getAttribute(\"src\");\r\n  console.log(src); // Imprime la URL de la imagen\n  ```\n\n* **`setAttribute(attributeName, attributeValue)`:**  Establece el valor del atributo especificado.\n\n  ```javascript\n  const elemento = document.getElementById(\"miImagen\");\r\n  elemento.setAttribute(\"src\", \"nueva_imagen.jpg\"); // Cambia la URL de la imagen\n  ```\n\n* **`removeAttribute(attributeName)`:**  Elimina el atributo especificado.\n\n  ```javascript\n  const elemento = document.getElementById(\"miEnlace\");\r\n  elemento.removeAttribute(\"href\"); // Elimina el atributo href del enlace\n  ```\n\n* **Propiedades del Objeto Elemento:**  Muchos atributos HTML tienen propiedades correspondientes en el objeto elemento.\n\n  ```javascript\n  const elemento = document.getElementById(\"miCaja\");\r\n  elemento.style.backgroundColor = \"red\"; // Cambia el color de fondo\r\n  elemento.innerHTML = \"<p>Nuevo texto</p>\"; // Cambia el contenido HTML\n  ```\n\n## CREACION Y ELIMINACION DE NODOS\n\nJavascript permite crear nuevos elementos HTML y agregarlos al DOM, asi como eliminar elementos existentes.\n\n* **`createElement(tagName)`:**  Crea un nuevo elemento HTML con el nombre de etiqueta especificado.\n\n  ```javascript\n  const nuevoParrafo = document.createElement(\"p\");\r\n  nuevoParrafo.textContent = \"Este es un nuevo parrafo.\";\n  ```\n\n* **`createTextNode(text)`:**  Crea un nuevo nodo de texto.\n\n  ```javascript\n  const nuevoTexto = document.createTextNode(\"Este es un texto nuevo.\");\n  ```\n\n* **`appendChild(node)`:**  Agrega un nodo como hijo al final de otro nodo.\n\n  ```javascript\n  const contenedor = document.getElementById(\"miContenedor\");\r\n  contenedor.appendChild(nuevoParrafo); // Agrega el parrafo al contenedor\n  ```\n\n* **`insertBefore(newNode, existingNode)`:**  Inserta un nodo antes de otro nodo existente.\n\n  ```javascript\n  const lista = document.getElementById(\"miLista\");\r\n  const primerElemento = lista.firstChild;\r\n  lista.insertBefore(nuevoElementoLista, primerElemento); // Inserta un nuevo elemento al principio de la lista\n  ```\n\n* **`removeChild(node)`:**  Elimina un nodo hijo de otro nodo.\n\n  ```javascript\n  const lista = document.getElementById(\"miLista\");\r\n  const elementoAEliminar = document.getElementById(\"elemento3\");\r\n  lista.removeChild(elementoAEliminar); // Elimina el elemento con id \"elemento3\" de la lista\n  ```\n\n* **`replaceChild(newNode, oldNode)`:**  Reemplaza un nodo hijo con otro nodo.\n\n  ```javascript\n  const lista = document.getElementById(\"miLista\");\r\n  const nuevoElemento = document.createElement(\"li\");\r\n  nuevoElemento.textContent = \"Nuevo elemento\";\r\n  const elementoAReemplazar = document.getElementById(\"elemento1\");\r\n  lista.replaceChild(nuevoElemento, elementoAReemplazar); // Reemplaza el elemento con id \"elemento1\" con el nuevo elemento\n  ```\n\n## MANEJO DE EVENTOS\n\nEl manejo de eventos permite a Javascript responder a las interacciones del usuario, como clics, movimientos del mouse, y pulsaciones de teclas.\n\n* **`addEventListener(event, function)`:**  Registra un event listener para un evento especifico en un elemento.\n\n  ```javascript\n  const boton = document.getElementById(\"miBoton\");\r\n  boton.addEventListener(\"click\", function() {\r\n      alert(\"¡Boton clickeado!\");\r\n  });\n  ```\n\n* **Tipos de Eventos Comunes:**\n  * `click`:  Cuando se hace clic en un elemento.\n  * `mouseover`:  Cuando el mouse entra en un elemento.\n  * `mouseout`:  Cuando el mouse sale de un elemento.\n  * `keydown`:  Cuando se presiona una tecla.\n  * `keyup`:  Cuando se suelta una tecla.\n  * `submit`:  Cuando se envia un formulario.\n  * `load`:  Cuando la pagina o un elemento se ha cargado completamente.\n\n* **Objeto Evento:**  El event listener recibe un objeto evento que contiene informacion sobre el evento.\n\n  ```javascript\n  const enlace = document.getElementById(\"miEnlace\");\r\n  enlace.addEventListener(\"click\", function(event) {\r\n      event.preventDefault(); // Evita que el enlace se abra\r\n      console.log(\"Enlace clickeado\");\r\n  });\n  ```\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### CAMBIAR EL TEXTO DE UN ELEMENTO AL HACER CLIC\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Ejemplo de Manipulacion del DOM</title>\r\n</head>\r\n<body>\r\n    <p id=\"miParrafo\">Texto inicial.</p>\r\n    <button id=\"miBoton\">Cambiar Texto</button>\r\n\r\n    <script>\r\n        const parrafo = document.getElementById(\"miParrafo\");\r\n        const boton = document.getElementById(\"miBoton\");\r\n\r\n        boton.addEventListener(\"click\", function() {\r\n            parrafo.textContent = \"Texto cambiado al hacer clic.\";\r\n        });\r\n    </script>\r\n</body>\r\n</html>\n```\n\n### AGREGAR UN NUEVO ELEMENTO A UNA LISTA\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Ejemplo de Manipulacion del DOM</title>\r\n</head>\r\n<body>\r\n    <ul id=\"miLista\">\r\n        <li>Elemento 1</li>\r\n        <li>Elemento 2</li>\r\n    </ul>\r\n    <button id=\"agregarElemento\">Agregar Elemento</button>\r\n\r\n    <script>\r\n        const lista = document.getElementById(\"miLista\");\r\n        const botonAgregar = document.getElementById(\"agregarElemento\");\r\n\r\n        botonAgregar.addEventListener(\"click\", function() {\r\n            const nuevoElemento = document.createElement(\"li\");\r\n            nuevoElemento.textContent = \"Nuevo elemento\";\r\n            lista.appendChild(nuevoElemento);\r\n        });\r\n    </script>\r\n</body>\r\n</html>\n```\n\n### ELIMINAR UN ELEMENTO AL HACER CLIC\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Ejemplo de Manipulacion del DOM</title>\r\n</head>\r\n<body>\r\n    <ul id=\"miLista\">\r\n        <li>Elemento 1</li>\r\n        <li id=\"elementoAEliminar\">Elemento a eliminar</li>\r\n        <li>Elemento 3</li>\r\n    </ul>\r\n\r\n    <script>\r\n        const lista = document.getElementById(\"miLista\");\r\n        const elementoAEliminar = document.getElementById(\"elementoAEliminar\");\r\n\r\n        elementoAEliminar.addEventListener(\"click\", function() {\r\n            lista.removeChild(elementoAEliminar);\r\n        });\r\n    </script>\r\n</body>\r\n</html>\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs - Document Object Model (DOM)](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)\n* [W3Schools - JavaScript HTML DOM](https://www.w3schools.com/js/js_htmldom.asp)\n* [freeCodeCamp - How to Manipulate the DOM Using JavaScript](https://www.freecodecamp.org/news/how-to-manipulate-the-dom-using-javascript/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-browser/events",
    "title": "Eventos Javascript",
    "description": "Exploración profunda de los eventos en JavaScript, su funcionamiento, tipos y cómo utilizarlos para crear interacciones dinámicas en la web.",
    "content": "Los eventos en JavaScript son acciones o ocurrencias que suceden en el navegador, como un clic del ratón, la carga de una página, el envío de un formulario, o la pulsación de una tecla.  JavaScript permite \"escuchar\" estos eventos y ejecutar código en respuesta a ellos, lo que posibilita la creación de páginas web interactivas y dinámicas.\n\n## OBJETIVOS CLAVE SOBRE EL TEMA\n\n* **Comprender el Modelo de Eventos del DOM:**  Entender cómo los eventos se propagan a través del Document Object Model (DOM).\n* **Manejar Eventos Comunes:**  Aprender a utilizar los eventos más frecuentes como `click`, `mouseover`, `keydown`, `submit`, etc.\n* **Utilizar Event Listeners:**  Dominar el uso de `addEventListener` para adjuntar funciones a eventos de manera eficiente.\n* **Prevenir el Comportamiento Predeterminado:**  Saber cómo evitar que un evento realice su acción por defecto (ej. la redirección de un enlace).\n* **Delegación de Eventos:**  Implementar la delegación de eventos para optimizar el rendimiento y simplificar el manejo de eventos en elementos dinámicos.\n\n## ¿QUE SON LOS EVENTOS?\n\nUn evento es una señal que indica que algo ha ocurrido.  En el contexto de la web, estos eventos están relacionados con la interacción del usuario con la página o con el estado del navegador.  Cada elemento HTML en una página web puede ser \"escuchado\" para detectar ciertos eventos.\n\n## TIPOS DE EVENTOS\n\nJavaScript ofrece una amplia variedad de eventos, que se pueden clasificar en varias categorías:\n\n* **Eventos del Ratón:**  `click`, `dblclick`, `mouseover`, `mouseout`, `mousemove`, `contextmenu`.\n* **Eventos del Teclado:**  `keydown`, `keypress`, `keyup`.\n* **Eventos de Formulario:**  `submit`, `focus`, `blur`, `change`, `input`.\n* **Eventos de Ventana/Documento:**  `load`, `unload`, `resize`, `scroll`.\n* **Eventos de Arrastre y Soltar:**  `dragstart`, `drag`, `dragenter`, `dragleave`, `drop`, `dragend`.\n* **Eventos Táctiles (en dispositivos móviles):**  `touchstart`, `touchmove`, `touchend`, `touchcancel`.\n\n## MANEJADORES DE EVENTOS (EVENT HANDLERS)\n\nUn manejador de eventos es una función que se ejecuta cuando ocurre un evento específico.  Hay varias formas de asignar manejadores de eventos en JavaScript:\n\n1. **Atributos HTML (En línea):**\n\n   Este es el método más antiguo y menos recomendado, ya que mezcla la estructura HTML con el comportamiento JavaScript.\n\n   ```html\n   <button onclick=\"alert('¡Hiciste clic!')\">Haz clic aquí</button>\n   ```\n\n2. **Propiedades del DOM:**\n\n   Se asigna una función directamente a la propiedad del evento del elemento DOM.\n\n   ```javascript\n   const boton = document.querySelector('button');\r\n   boton.onclick = function() {\r\n     alert('¡Hiciste clic!');\r\n   };\n   ```\n\n3. **`addEventListener()`:**\n\n   Este es el método más moderno y flexible.  Permite adjuntar múltiples manejadores a un mismo evento y ofrece mayor control sobre la propagación del evento.\n\n   ```javascript\n   const boton = document.querySelector('button');\r\n   boton.addEventListener('click', function() {\r\n     alert('¡Hiciste clic!');\r\n   });\n   ```\n\n   * **Ventajas de `addEventListener()`:**\n     * Permite adjuntar múltiples manejadores al mismo evento.\n     * Ofrece control sobre la fase de captura y burbuja del evento (ver más adelante).\n     * Facilita la gestión de eventos y la separación de responsabilidades.\n\n## EL OBJETO EVENT\n\nCuando ocurre un evento, se crea un objeto `Event` que contiene información detallada sobre el evento.  Este objeto se pasa como argumento a la función manejadora del evento.\n\n```javascript\nconst boton = document.querySelector('button');\r\nboton.addEventListener('click', function(event) {\r\n  console.log('Tipo de evento:', event.type); // \"click\"\r\n  console.log('Elemento objetivo:', event.target); // El botón\r\n  console.log('Coordenadas del clic:', event.clientX, event.clientY);\r\n});\n```\n\nAlgunas propiedades comunes del objeto `Event` son:\n\n* `type`:  El tipo de evento (ej. \"click\", \"keydown\").\n* `target`:  El elemento que originó el evento.\n* `currentTarget`:  El elemento al que está adjunto el manejador de eventos (puede ser diferente de `target` en la delegación de eventos).\n* `clientX`, `clientY`:  Las coordenadas del puntero del ratón en el momento del evento.\n* `keyCode`:  El código de la tecla presionada (para eventos de teclado).\n* `preventDefault()`:  Un método para prevenir el comportamiento predeterminado del evento.\n* `stopPropagation()`:  Un método para detener la propagación del evento a través del DOM.\n\n## PROPAGACION DE EVENTOS: FASE DE CAPTURA Y FASE DE BURBUJA\n\nCuando ocurre un evento en un elemento, este evento se propaga a través del DOM en dos fases:\n\n1. **Fase de Captura:**  El evento viaja desde la raíz del documento hacia el elemento objetivo.  Los manejadores de eventos adjuntos en la fase de captura se ejecutan primero.\n2. **Fase de Burbuja:**  El evento viaja desde el elemento objetivo hacia la raíz del documento.  Los manejadores de eventos adjuntos en la fase de burbuja se ejecutan después de los de la fase de captura.\n\nPor defecto, los manejadores de eventos se adjuntan en la fase de burbuja.  Sin embargo, se puede especificar la fase de captura al utilizar `addEventListener()`:\n\n```javascript\nelemento.addEventListener('click', function() {\r\n  console.log('Fase de captura');\r\n}, true); // El tercer argumento \"true\" indica la fase de captura\r\n\r\nelemento.addEventListener('click', function() {\r\n  console.log('Fase de burbuja');\r\n}, false); // El tercer argumento \"false\" (o omitido) indica la fase de burbuja\n```\n\n## DELEGACION DE EVENTOS\n\nLa delegación de eventos es una técnica que consiste en adjuntar un manejador de eventos a un elemento padre en lugar de a cada uno de sus elementos hijos.  Cuando ocurre un evento en un elemento hijo, el evento se propaga hacia el elemento padre, y el manejador de eventos del padre se ejecuta.  Dentro del manejador, se puede determinar qué elemento hijo originó el evento utilizando la propiedad `event.target`.\n\n```html\n<ul id=\"lista\">\r\n  <li>Elemento 1</li>\r\n  <li>Elemento 2</li>\r\n  <li>Elemento 3</li>\r\n</ul>\r\n\r\n<script>\r\n  const lista = document.getElementById('lista');\r\n\r\n  lista.addEventListener('click', function(event) {\r\n    if (event.target.tagName === 'LI') {\r\n      console.log('Hiciste clic en:', event.target.textContent);\r\n    }\r\n  });\r\n</script>\n```\n\n* **Ventajas de la Delegación de Eventos:**\n  * **Mejora el rendimiento:**  Reduce la cantidad de manejadores de eventos adjuntos al DOM.\n  * **Simplifica el manejo de elementos dinámicos:**  No es necesario adjuntar nuevos manejadores de eventos a los elementos que se añaden dinámicamente al DOM.\n  * **Reduce el consumo de memoria:**  Menos manejadores de eventos significan menos memoria utilizada.\n\n## PREVENIR EL COMPORTAMIENTO PREDETERMINADO\n\nAlgunos eventos tienen un comportamiento predeterminado asociado.  Por ejemplo, al hacer clic en un enlace, el navegador normalmente navega a la URL especificada en el atributo `href`.  Se puede prevenir este comportamiento predeterminado utilizando el método `preventDefault()` del objeto `Event`.\n\n```html\n<a href=\"https://www.ejemplo.com\" id=\"enlace\">Visitar Ejemplo.com</a>\r\n\r\n<script>\r\n  const enlace = document.getElementById('enlace');\r\n\r\n  enlace.addEventListener('click', function(event) {\r\n    event.preventDefault(); // Previene la navegación a Ejemplo.com\r\n    alert('Enlace clickeado, pero la navegación fue prevenida.');\r\n  });\r\n</script>\n```\n\n## EJEMPLOS DE IMPLEMENTACION\n\n1. **Mostrar/Ocultar Contenido al Hacer Clic:**\n\n   ```html\n   <button id=\"botonMostrarOcultar\">Mostrar/Ocultar</button>\r\n   <div id=\"contenido\" style=\"display: none;\">\r\n     Este es el contenido que se mostrará u ocultará.\r\n   </div>\r\n\r\n   <script>\r\n     const botonMostrarOcultar = document.getElementById('botonMostrarOcultar');\r\n     const contenido = document.getElementById('contenido');\r\n\r\n     botonMostrarOcultar.addEventListener('click', function() {\r\n       if (contenido.style.display === 'none') {\r\n         contenido.style.display = 'block';\r\n       } else {\r\n         contenido.style.display = 'none';\r\n       }\r\n     });\r\n   </script>\n   ```\n\n2. **Validación de Formulario en Tiempo Real:**\n\n   ```html\n   <form id=\"miFormulario\">\r\n     <label for=\"nombre\">Nombre:</label>\r\n     <input type=\"text\" id=\"nombre\" name=\"nombre\">\r\n     <span id=\"errorNombre\" style=\"color: red;\"></span>\r\n     <button type=\"submit\">Enviar</button>\r\n   </form>\r\n\r\n   <script>\r\n     const formulario = document.getElementById('miFormulario');\r\n     const nombreInput = document.getElementById('nombre');\r\n     const errorNombre = document.getElementById('errorNombre');\r\n\r\n     nombreInput.addEventListener('input', function() {\r\n       if (nombreInput.value.length < 3) {\r\n         errorNombre.textContent = 'El nombre debe tener al menos 3 caracteres.';\r\n       } else {\r\n         errorNombre.textContent = '';\r\n       }\r\n     });\r\n\r\n     formulario.addEventListener('submit', function(event) {\r\n       if (nombreInput.value.length < 3) {\r\n         event.preventDefault(); // Previene el envío del formulario\r\n         alert('Por favor, corrige los errores antes de enviar.');\r\n       }\r\n     });\r\n   </script>\n   ```\n\n3. **Cambiar el Estilo de un Elemento al Pasar el Ratón:**\n\n   ```html\n   <div id=\"miDiv\" style=\"width: 100px; height: 100px; background-color: lightblue;\">\r\n     Pasa el ratón por encima\r\n   </div>\r\n\r\n   <script>\r\n     const miDiv = document.getElementById('miDiv');\r\n\r\n     miDiv.addEventListener('mouseover', function() {\r\n       miDiv.style.backgroundColor = 'lightgreen';\r\n     });\r\n\r\n     miDiv.addEventListener('mouseout', function() {\r\n       miDiv.style.backgroundColor = 'lightblue';\r\n     });\r\n   </script>\n   ```\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: Events](https://developer.mozilla.org/en-US/docs/Web/Events)\n* [W3Schools: JavaScript Events](https://www.w3schools.com/js/js_events.asp)\n* [Eloquent JavaScript: Handling Events](https://eloquentjavascript.net/15_event.html)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-browser/forms",
    "title": "Forms en JavaScript",
    "description": "Manipulación y validación de formularios en JavaScript.",
    "content": "Los formularios son un componente esencial de las aplicaciones web, permitiendo a los usuarios interactuar y enviar datos al servidor. JavaScript juega un papel crucial en la manipulación y validación de estos formularios en el lado del cliente, mejorando la experiencia del usuario y reduciendo la carga en el servidor.\n\n## OBJETIVOS CLAVE\n\n* **Acceso a Elementos del Formulario:** Aprender cómo acceder a los elementos de un formulario utilizando el DOM (Document Object Model).\n* **Validación de Datos:** Implementar la validación de datos del lado del cliente para asegurar que la información ingresada por el usuario sea correcta y completa.\n* **Manipulación de Eventos:** Utilizar JavaScript para capturar y manejar eventos relacionados con los formularios, como el envío (submit) y el cambio (change).\n* **Mejora de la Experiencia del Usuario:** Proporcionar retroalimentación inmediata al usuario sobre la validez de los datos ingresados.\n\n## ACCESO A ELEMENTOS DEL FORMULARIO\n\nPara interactuar con un formulario en JavaScript, primero necesitas acceder a los elementos del formulario utilizando el DOM. Puedes hacerlo utilizando métodos como `document.getElementById()`, `document.querySelector()` o `document.querySelectorAll()`.\n\n**Ejemplo:**\n\n```html\n<form id=\"myForm\">\r\n  <label for=\"name\">Nombre:</label>\r\n  <input type=\"text\" id=\"name\" name=\"name\"><br><br>\r\n  <label for=\"email\">Email:</label>\r\n  <input type=\"email\" id=\"email\" name=\"email\"><br><br>\r\n  <button type=\"submit\">Enviar</button>\r\n</form>\r\n\r\n<script>\r\n  const form = document.getElementById('myForm');\r\n  const nameInput = document.getElementById('name');\r\n  const emailInput = document.getElementById('email');\r\n\r\n  console.log(form);\r\n  console.log(nameInput);\r\n  console.log(emailInput);\r\n</script>\n```\n\nEn este ejemplo, obtenemos referencias al formulario y a los campos de entrada de nombre y correo electrónico utilizando sus IDs.\n\n## VALIDACION DE DATOS\n\nLa validación de datos es un paso crucial para asegurar que la información enviada al servidor sea correcta y completa. JavaScript permite realizar validaciones en el lado del cliente antes de enviar los datos al servidor.\n\n**Ejemplo:**\n\n```javascript\nform.addEventListener('submit', function(event) {\r\n  let isValid = true;\r\n\r\n  if (nameInput.value.trim() === '') {\r\n    alert('El nombre es obligatorio');\r\n    isValid = false;\r\n  }\r\n\r\n  if (emailInput.value.trim() === '') {\r\n    alert('El email es obligatorio');\r\n    isValid = false;\r\n  } else if (!isValidEmail(emailInput.value)) {\r\n    alert('El email no es válido');\r\n    isValid = false;\r\n  }\r\n\r\n  if (!isValid) {\r\n    event.preventDefault(); // Evita que el formulario se envíe si no es válido\r\n  }\r\n});\r\n\r\nfunction isValidEmail(email) {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n}\n```\n\nEn este ejemplo, se agrega un event listener al formulario para el evento `submit`. Dentro de la función, se realizan validaciones para asegurar que los campos de nombre y correo electrónico no estén vacíos y que el correo electrónico tenga un formato válido. Si alguna validación falla, se muestra una alerta y se evita que el formulario se envíe utilizando `event.preventDefault()`.\n\n## MANIPULACION DE EVENTOS\n\nJavaScript permite capturar y manejar eventos relacionados con los formularios, como el envío (submit) y el cambio (change).\n\n**Ejemplo:**\n\n```javascript\nnameInput.addEventListener('change', function() {\r\n  console.log('El nombre ha cambiado a: ' + nameInput.value);\r\n});\r\n\r\nform.addEventListener('submit', function(event) {\r\n  event.preventDefault(); // Evita el envío del formulario para este ejemplo\r\n  console.log('Formulario enviado');\r\n  console.log('Nombre: ' + nameInput.value);\r\n  console.log('Email: ' + emailInput.value);\r\n});\n```\n\nEn este ejemplo, se agrega un event listener al campo de nombre para el evento `change`. Cada vez que el valor del campo de nombre cambia, se muestra un mensaje en la consola. También se agrega un event listener al formulario para el evento `submit`. Cuando el formulario se envía, se evita el envío real del formulario utilizando `event.preventDefault()` y se muestran los valores de los campos en la consola.\n\n## MEJORA DE LA EXPERIENCIA DEL USUARIO\n\nProporcionar retroalimentación inmediata al usuario sobre la validez de los datos ingresados mejora significativamente la experiencia del usuario.\n\n**Ejemplo:**\n\n```javascript\nnameInput.addEventListener('input', function() {\r\n  if (nameInput.value.trim() === '') {\r\n    nameInput.classList.add('error');\r\n  } else {\r\n    nameInput.classList.remove('error');\r\n  }\r\n});\n```\n\nEn este ejemplo, se agrega un event listener al campo de nombre para el evento `input`. Cada vez que el usuario ingresa o borra texto en el campo, se verifica si el campo está vacío. Si está vacío, se agrega la clase `error` al campo, lo que permite aplicar estilos CSS para indicar que el campo es inválido. Si el campo no está vacío, se elimina la clase `error`.\n\n```css\n.error {\r\n  border: 1px solid red;\r\n}\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: Forms](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms)\n* [W3Schools: JavaScript Form Validation](https://www.w3schools.com/js/js_validation.asp)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-browser",
    "title": "Javascript en el Navegador",
    "description": "Exploración detallada de cómo JavaScript interactúa y se ejecuta dentro de los navegadores web, incluyendo el DOM, BOM, eventos y APIs.",
    "content": "JavaScript, en su entorno nativo, es el lenguaje que da vida a las páginas web interactivas.  Mientras que JavaScript puede ejecutarse en otros entornos (como Node.js en el servidor), su rol más tradicional y ubicuo es dentro de los navegadores web.  Aquí, JavaScript manipula el contenido, responde a las acciones del usuario y se comunica con servidores para crear experiencias web dinámicas y atractivas.\n\n## OBJETIVOS CLAVE\n\n* **Comprender el Modelo de Objetos del Documento (DOM):**  Aprender cómo JavaScript interactúa con la estructura HTML de una página web.\n* **Explorar el Modelo de Objetos del Navegador (BOM):**  Descubrir cómo JavaScript puede acceder y controlar las características del navegador.\n* **Manejo de Eventos:**  Dominar la capacidad de responder a las interacciones del usuario, como clics, movimientos del ratón y pulsaciones de teclas.\n* **Utilización de APIs del Navegador:**  Aprender a usar APIs para acceder a funcionalidades como geolocalización, almacenamiento local y multimedia.\n* **Asincronía y Promesas:**  Comprender cómo JavaScript maneja operaciones asíncronas para evitar bloqueos en la interfaz de usuario.\n\n## MODELO DE OBJETOS DEL DOCUMENTO (DOM)\n\nEl DOM es una representación en forma de árbol de la estructura HTML de una página web.  JavaScript utiliza el DOM para acceder a los elementos HTML, modificar su contenido, estilos y atributos, y agregar o eliminar elementos.\n\n**Ejemplo:**\n\n```javascript\n// Acceder al elemento con el ID \"miTitulo\"\r\nconst titulo = document.getElementById(\"miTitulo\");\r\n\r\n// Modificar el texto del título\r\ntitulo.textContent = \"¡Hola, Mundo!\";\r\n\r\n// Modificar el estilo del título\r\ntitulo.style.color = \"blue\";\n```\n\nEn este ejemplo, document.getElementById es una función del DOM que permite seleccionar un elemento HTML específico por su ID. Luego, se utilizan las propiedades textContent y style para modificar el contenido y el estilo del elemento, respectivamente.\n\n## MODELO DE OBJETOS DEL NAVEGADOR (BOM)\n\nEl BOM proporciona acceso a objetos que representan el navegador y su entorno. Esto incluye la ventana del navegador, el historial de navegación, la ubicación (URL) y las cookies.\n\n**Ejemplo**:\n\n```javascript\n// Obtener la altura y el ancho de la ventana del navegador\r\nconst altura = window.innerHeight;\r\nconst ancho = window.innerWidth;\r\n\r\n// Redirigir a otra página\r\nwindow.location.href = \"https://www.ejemplo.com\";\r\n\r\n// Mostrar una alerta\r\nwindow.alert(\"¡Bienvenido!\");\n```\n\nAquí, `window.innerHeight` y `window.innerWidth` proporcionan las dimensiones de la ventana del navegador. window.location.href permite cambiar la URL actual, y `window.alert` muestra un cuadro de diálogo de alerta.\n\n## MANEJO DE EVENTOS\n\nLos eventos son acciones o ocurrencias que suceden en el navegador, como un clic del ratón, la carga de una página o el envío de un formulario. JavaScript permite \"escuchar\" estos eventos y ejecutar código en respuesta a ellos.\n\n**Ejemplo**:\n\n```javascript\n<button id=\"miBoton\">Haz clic aquí</button>\r\n\r\n<script>\r\n  const boton = document.getElementById(\"miBoton\");\r\n\r\n  boton.addEventListener(\"click\", function() {\r\n    alert(\"¡Hiciste clic en el botón!\");\r\n  });\r\n</script>\n```\n\nEn este ejemplo, `addEventListener` se utiliza para adjuntar un \"listener\" al evento \"click\" del botón. Cuando el usuario hace clic en el botón, la función anónima se ejecuta, mostrando una alerta.\n\n## APIS DEL NAVEGADOR\n\nLos navegadores modernos ofrecen una amplia gama de APIs que permiten a JavaScript acceder a funcionalidades avanzadas. Algunos ejemplos incluyen:\n\n* **Geolocation API**: Obtener la ubicación geográfica del usuario.\n\n* **Local Storage API**: Almacenar datos localmente en el navegador.\n\n* **Fetch API**: Realizar solicitudes HTTP para obtener datos de servidores.\n\n* **Canvas API**: Dibujar gráficos y animaciones.\n\n* **Web Audio API**: Procesar y reproducir audio.\n\n**Ejemplo (Fetch API)**:\n\n```javascript\nfetch(\"https://api.ejemplo.com/datos\")\r\n  .then(response => response.json())\r\n  .then(data => {\r\n    console.log(data);\r\n  })\r\n  .catch(error => {\r\n    console.error(\"Error al obtener los datos:\", error);\r\n  });\n```\n\nEste ejemplo utiliza la `Fetch API` para realizar una solicitud GET a una API. La respuesta se convierte a formato JSON y se muestra en la consola. El bloque catch maneja cualquier error que pueda ocurrir durante la solicitud.\n\n## ASINCRONIA Y PROMESAS\n\nJavaScript es un lenguaje de un solo hilo, lo que significa que solo puede ejecutar una tarea a la vez. Para evitar bloqueos en la interfaz de usuario durante operaciones que consumen tiempo (como solicitudes de red), JavaScript utiliza la asincronía.\n\nLas promesas son objetos que representan el resultado eventual de una operación asíncrona. Permiten escribir código asíncrono de manera más legible y manejable.\n\n**Ejemplo**:\n\n```javascript\nfunction obtenerDatos() {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const datos = { nombre: \"Juan\", edad: 30 };\r\n      resolve(datos); // Resuelve la promesa con los datos\r\n      // reject(\"Error al obtener los datos\"); // Rechaza la promesa en caso de error\r\n    }, 2000); // Simula una demora de 2 segundos\r\n  });\r\n}\r\n\r\nobtenerDatos()\r\n  .then(datos => {\r\n    console.log(\"Datos obtenidos:\", datos);\r\n  })\r\n  .catch(error => {\r\n    console.error(\"Error:\", error);\r\n  });\n```\n\nEn este ejemplo, `obtenerDatos` devuelve una promesa que se resuelve después de una demora de 2 segundos. El método `then` se ejecuta cuando la promesa se resuelve, y el método catch se ejecuta si la promesa se rechaza.\n\n## CONCLUSION\n\nJavaScript en el navegador es una herramienta poderosa para crear experiencias web interactivas y dinámicas. Comprender el DOM, el BOM, el manejo de eventos, las APIs del navegador y la asincronía es fundamental para cualquier desarrollador web. Con estas habilidades, puedes construir aplicaciones web complejas y atractivas que responden a las necesidades de los usuarios.\n\n## FUENTES DEL DOCUMENTO\n\n* [**MDN Web Docs**: JavaScript](https://developer.mozilla.org/es/docs/Web/JavaScript)\n\n* [**W3Schools**: JavaScript Tutorial](https://www.w3schools.com/js/default.asp)\n\n* [**JavaScript.info**](https://javascript.info/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-frameworks-libraries/angular",
    "title": "Angular",
    "description": "Marco de desarrollo de aplicaciones web de código abierto mantenido por Google.",
    "content": "Angular es un marco de desarrollo de aplicaciones web de código abierto, liderado por el equipo de Angular en Google y por una comunidad de individuos y empresas. Angular está escrito en TypeScript. Proporciona una arquitectura estándar para construir aplicaciones web dinámicas, facilitando la creación de aplicaciones escalables y mantenibles.\n\n## OBJETIVOS CLAVE\n\n* **Productividad:** Acelerar el desarrollo de aplicaciones con componentes reutilizables y herramientas poderosas.\n* **Rendimiento:** Crear aplicaciones rápidas y eficientes que ofrezcan una excelente experiencia de usuario.\n* **Escalabilidad:** Diseñar aplicaciones que puedan crecer y adaptarse a las necesidades cambiantes del negocio.\n* **Mantenibilidad:** Facilitar el mantenimiento y la actualización de las aplicaciones a lo largo del tiempo.\n\n## DESARROLLO DE ANGULAR\n\nAngular se basa en una arquitectura de componentes. Una aplicación Angular se compone de una serie de componentes interconectados, cada uno responsable de una parte específica de la interfaz de usuario.\n\n### COMPONENTES\n\nUn componente Angular consta de tres partes principales:\n\n1. **Template:** Define la estructura HTML de la interfaz de usuario.\n2. **Clase:** Contiene la lógica de negocio y los datos del componente.\n3. **Metadatos:** Proporcionan información adicional sobre el componente, como su selector CSS y su template.\n\n**Ejemplo de un componente Angular:**\n\n```typescript\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-mi-componente',\r\n  templateUrl: './mi-componente.component.html',\r\n  styleUrls: ['./mi-componente.component.css']\r\n})\r\nexport class MiComponente {\r\n  mensaje: string = 'Hola, mundo!';\r\n}\n```\n\n```html\n<!-- mi-componente.component.html -->\r\n<h1>{{ mensaje }}</h1>\n```\n\n### MODULOS\n\nLos módulos en Angular son contenedores que agrupan componentes, directivas, pipes y servicios relacionados. Cada aplicación Angular tiene al menos un módulo raíz, llamado `AppModule`. Los módulos ayudan a organizar el código y a facilitar la reutilización de componentes en diferentes partes de la aplicación.\n\n**Ejemplo de un módulo Angular:**\n\n```typescript\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { MiComponente } from './mi-componente.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MiComponente\r\n  ],\r\n  imports: [\r\n    BrowserModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [MiComponente]\r\n})\r\nexport class AppModule { }\n```\n\n### SERVICIOS\n\nLos servicios en Angular son clases que encapsulan la lógica de negocio y los datos que se comparten entre diferentes componentes. Los servicios se utilizan para realizar tareas como la comunicación con un servidor, el almacenamiento de datos y la gestión del estado de la aplicación.\n\n**Ejemplo de un servicio Angular:**\n\n```typescript\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MiServicio {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  obtenerDatos() {\r\n    return this.http.get('/api/datos');\r\n  }\r\n}\n```\n\n### ENRUTAMIENTO (ROUTING)\n\nEl enrutamiento en Angular permite navegar entre diferentes vistas y componentes de la aplicación. El enrutador de Angular utiliza una configuración de rutas para determinar qué componente se debe mostrar en función de la URL actual.\n\n**Ejemplo de configuración de rutas en Angular:**\n\n```typescript\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { AboutComponent } from './about/about.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'about', component: AboutComponent },\r\n  { path: '', redirectTo: '/home', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\n```\n\n### DIRECTIVAS\n\nLas directivas en Angular son instrucciones que modifican el comportamiento o la apariencia de los elementos del DOM. Angular proporciona una serie de directivas integradas, como `ngIf`, `ngFor` y `ngClass`. También es posible crear directivas personalizadas para extender la funcionalidad de Angular.\n\n**Ejemplo de uso de la directiva `ngIf`:**\n\n```html\n<div *ngIf=\"mostrarMensaje\">\r\n  Este mensaje se muestra si la variable 'mostrarMensaje' es verdadera.\r\n</div>\n```\n\n### PIPES\n\nLos pipes en Angular son funciones que transforman los datos antes de mostrarlos en la interfaz de usuario. Angular proporciona una serie de pipes integrados, como `date`, `uppercase` y `lowercase`. También es posible crear pipes personalizados para realizar transformaciones específicas.\n\n**Ejemplo de uso del pipe `date`:**\n\n```html\n<p>Fecha actual: {{ fechaActual | date:'dd/MM/yyyy' }}</p>\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [Angular Official Documentation](https://angular.io/docs)\n* [Angular Tutorial](https://angular.io/tutorial)\n* [Stack Overflow - Angular](https://stackoverflow.com/questions/tagged/angular)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-frameworks-libraries",
    "title": "Frameworks y Librerias de Javascript",
    "description": "Exploracion de los frameworks y librerias mas populares de Javascript para el desarrollo web moderno.",
    "content": "Javascript, como uno de los lenguajes de programacion mas utilizados en el desarrollo web, cuenta con un ecosistema vasto y en constante evolucion de frameworks y librerias. Estas herramientas facilitan la construccion de aplicaciones web complejas, ofreciendo soluciones predefinidas para problemas comunes, mejorando la eficiencia del desarrollo y promoviendo la reutilizacion de codigo.\n\n## OBJETIVOS CLAVE\n\n* **Acelerar el desarrollo:** Proporcionar componentes y funcionalidades pre-construidas que reducen el tiempo necesario para desarrollar aplicaciones web.\n* **Mejorar la estructura del codigo:** Ofrecer patrones de diseño y arquitecturas que facilitan la organizacion y el mantenimiento del codigo.\n* **Aumentar la eficiencia:** Optimizar el rendimiento de las aplicaciones web mediante la gestion eficiente de recursos y la implementacion de tecnicas de renderizado avanzadas.\n* **Fomentar la reutilizacion:** Permitir la creacion de componentes reutilizables que pueden ser utilizados en multiples proyectos.\n* **Simplificar la gestion de la interfaz de usuario:** Ofrecer herramientas para la creacion y manipulacion de interfaces de usuario interactivas y dinamicas.\n\n## LIBRERIAS\n\nLas librerias son conjuntos de funciones y objetos que realizan tareas especificas. Se integran en el codigo existente para extender su funcionalidad.\n\n### JQUERY\n\n* **Descripcion:** Una libreria rapida, pequeña y rica en funcionalidades que simplifica la manipulacion del DOM, el manejo de eventos, la animacion y las interacciones AJAX.\n* **Ejemplo de Implementacion:**\n\n```javascript\n// Seleccionar un elemento por ID y cambiar su texto\r\n$(\"#miElemento\").text(\"Hola, mundo!\");\r\n\r\n// Agregar un evento click a un boton\r\n$(\"#miBoton\").click(function() {\r\n  alert(\"Boton clickeado!\");\r\n});\n```\n\n### LODASH\n\n* **Descripcion:** Proporciona utilidades para tareas comunes de programacion, como la manipulacion de arrays, objetos, strings y funciones.\n* **Ejemplo de Implementacion:**\n\n```javascript\n// Filtrar un array de numeros pares\r\nvar numeros = [1, 2, 3, 4, 5, 6];\r\nvar pares = _.filter(numeros, function(num) { return num % 2 == 0; });\r\nconsole.log(pares); // [2, 4, 6]\r\n\r\n// Agrupar un array de objetos por una propiedad\r\nvar usuarios = [\r\n  { 'nombre': 'Juan', 'edad': 30 },\r\n  { 'nombre': 'Maria', 'edad': 25 },\r\n  { 'nombre': 'Pedro', 'edad': 30 }\r\n];\r\nvar agrupados = _.groupBy(usuarios, 'edad');\r\nconsole.log(agrupados);\r\n// {\r\n//   '25': [{ 'nombre': 'Maria', 'edad': 25 }],\r\n//   '30': [{ 'nombre': 'Juan', 'edad': 30 }, { 'nombre': 'Pedro', 'edad': 30 }]\r\n// }\n```\n\n## FRAMEWORKS\n\nLos frameworks son estructuras mas completas que proporcionan una arquitectura para construir aplicaciones web. Ofrecen un conjunto de herramientas, convenciones y bibliotecas que facilitan el desarrollo y la gestion de proyectos complejos.\n\n### REACT\n\n* **Descripcion:** Una libreria de Javascript para construir interfaces de usuario. React utiliza un enfoque basado en componentes y un DOM virtual para optimizar el rendimiento.\n* **Ejemplo de Implementacion:**\n\n```jsx\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\n\r\nfunction MiComponente() {\r\n  return <h1>Hola, React!</h1>;\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(<MiComponente />);\n```\n\n### ANGULAR\n\n* **Descripcion:** Un framework de desarrollo de aplicaciones web de Google. Angular utiliza TypeScript y proporciona una arquitectura basada en componentes, inyeccion de dependencias y enrutamiento.\n* **Ejemplo de Implementacion:**\n\n```typescript\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-mi-componente',\r\n  template: '<h1>Hola, Angular!</h1>'\r\n})\r\nexport class MiComponente {\r\n}\n```\n\n### VUE\n\n* **Descripcion:** Un framework progresivo para construir interfaces de usuario. Vue es conocido por su facilidad de uso, flexibilidad y rendimiento.\n* **Ejemplo de Implementacion:**\n\n```html\n<template>\r\n  <h1>Hola, Vue!</h1>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'MiComponente'\r\n}\r\n</script>\n```\n\n## COMPARACION\n\n| Caracteristica        | React                                  | Angular                                | Vue                                    |\r\n| --------------------- | -------------------------------------- | -------------------------------------- | -------------------------------------- |\r\n| **Tipo**              | Libreria                               | Framework                               | Framework Progresivo                   |\r\n| **Lenguaje**          | Javascript / JSX                       | TypeScript                             | Javascript                             |\r\n| **Arquitectura**      | Basada en componentes                  | Basada en componentes, MVC             | Basada en componentes                  |\r\n| **Curva de Aprendizaje** | Moderada                               | Empinada                               | Suave                                  |\r\n| **Rendimiento**       | Alto                                   | Alto                                   | Alto                                   |\r\n| **Comunidad**         | Grande y activa                        | Grande y activa                        | Grande y activa                        |\r\n| **Uso**               | Aplicaciones de una sola pagina (SPA), interfaces de usuario | Aplicaciones empresariales complejas | Aplicaciones de una sola pagina (SPA), interfaces de usuario |\n\n## CONSIDERACIONES ADICIONALES\n\n* **Tamaño del bundle:** El tamaño del bundle de Javascript puede afectar el tiempo de carga de la aplicacion. Es importante optimizar el bundle para reducir su tamaño.\n* **SEO:** Los frameworks y librerias de Javascript pueden afectar el SEO de una aplicacion. Es importante implementar tecnicas de SEO para asegurar que la aplicacion sea indexada correctamente por los motores de busqueda.\n* **Accesibilidad:** Es importante asegurar que las aplicaciones web sean accesibles para todos los usuarios, incluyendo aquellos con discapacidades. Los frameworks y librerias de Javascript pueden ayudar a implementar caracteristicas de accesibilidad.\n\n## FUENTES DEL DOCUMENTO\n\n* [React Official Website](https://react.dev/)\n* [Angular Official Website](https://angular.io/)\n* [Vue Official Website](https://vuejs.org/)\n* [JQuery Official Website](https://jquery.com/)\n* [Lodash Official Website](https://lodash.com/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-frameworks-libraries/jquery",
    "title": "jQuery",
    "description": "Librería de JavaScript para simplificar la manipulación del DOM, el manejo de eventos, animaciones y AJAX.",
    "content": "## INTRODUCCION A JQUERY\n\njQuery es una biblioteca de JavaScript rápida, pequeña y rica en funciones. Facilita cosas como el recorrido y la manipulación de documentos HTML, el manejo de eventos, la animación y AJAX para un desarrollo web más rápido. jQuery simplifica la forma de interactuar con el DOM (Document Object Model) de una página web.\n\n### OBJETIVOS CLAVE\n\n* **Simplificar la manipulación del DOM:** jQuery proporciona una sintaxis concisa y fácil de usar para seleccionar y modificar elementos HTML.\n* **Manejo de eventos:** Facilita la asignación de funciones a eventos del navegador, como clics, cambios y envíos de formularios.\n* **Animaciones:** Ofrece métodos sencillos para crear animaciones y efectos visuales en las páginas web.\n* **AJAX:** Simplifica las solicitudes AJAX para cargar datos de forma asíncrona sin recargar la página.\n* **Compatibilidad entre navegadores:** jQuery maneja las diferencias entre navegadores, lo que permite escribir código que funcione de manera consistente en diferentes navegadores.\n\n## DESARROLLO DE JQUERY\n\n### INSTALACION\n\nPara utilizar jQuery, primero debes incluir la biblioteca en tu proyecto web. Puedes hacerlo de dos maneras:\n\n1. **Descargar jQuery:** Descarga la última versión de jQuery desde el sitio web oficial ([https://jquery.com/](https://jquery.com/)) e incluye el archivo JavaScript descargado en tu HTML.\n\n   ```html\n   <script src=\"jquery-3.6.0.min.js\"></script>\n   ```\n\n2. **Usar un CDN (Content Delivery Network):** Incluye jQuery desde un CDN, lo que puede mejorar el rendimiento al permitir que el navegador cargue jQuery desde un servidor cercano al usuario.\n\n   ```html\n   <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n   ```\n\n### SINTAXIS BASICA\n\nLa sintaxis básica de jQuery es:\n\n```javascript\n$(selector).action()\n```\n\n* `$()`: Es la función jQuery, también conocida como el selector de jQuery.\n* `selector`: Es una cadena que especifica los elementos HTML a los que se aplicará la acción.\n* `action()`: Es el método jQuery que se ejecutará en los elementos seleccionados.\n\n### EJEMPLOS DE IMPLEMENTACION\n\n#### SELECCION DE ELEMENTOS\n\n* **Seleccionar por ID:**\n\n  ```javascript\n  $(\"#miElemento\").hide(); // Oculta el elemento con el ID \"miElemento\"\n  ```\n\n* **Seleccionar por clase:**\n\n  ```javascript\n  $(\".miClase\").show(); // Muestra todos los elementos con la clase \"miClase\"\n  ```\n\n* **Seleccionar por etiqueta:**\n\n  ```javascript\n  $(\"p\").css(\"color\", \"blue\"); // Cambia el color del texto de todos los párrafos a azul\n  ```\n\n#### MANIPULACION DEL DOM\n\n* **Modificar el contenido de un elemento:**\n\n  ```javascript\n  $(\"#miElemento\").text(\"Nuevo texto\"); // Cambia el texto del elemento con el ID \"miElemento\"\n  ```\n\n* **Añadir un atributo a un elemento:**\n\n  ```javascript\n  $(\"img\").attr(\"src\", \"imagen.jpg\"); // Establece el atributo \"src\" de todas las imágenes\n  ```\n\n* **Añadir una clase a un elemento:**\n\n  ```javascript\n  $(\"#miElemento\").addClass(\"resaltado\"); // Añade la clase \"resaltado\" al elemento con el ID \"miElemento\"\n  ```\n\n#### MANEJO DE EVENTOS\n\n* **Evento click:**\n\n  ```javascript\n  $(\"button\").click(function() {\r\n    alert(\"¡Botón clickeado!\");\r\n  });\n  ```\n\n* **Evento hover:**\n\n  ```javascript\n  $(\"#miElemento\").hover(function() {\r\n    $(this).css(\"background-color\", \"yellow\");\r\n  }, function() {\r\n    $(this).css(\"background-color\", \"white\");\r\n  });\n  ```\n\n#### ANIMACIONES\n\n* **Efecto fadeOut:**\n\n  ```javascript\n  $(\"#miElemento\").fadeOut(); // Oculta el elemento con un efecto de desvanecimiento\n  ```\n\n* **Efecto slideUp:**\n\n  ```javascript\n  $(\"#miElemento\").slideUp(); // Oculta el elemento con un efecto de deslizamiento hacia arriba\n  ```\n\n* **Animación personalizada:**\n\n  ```javascript\n  $(\"#miElemento\").animate({\r\n    width: \"300px\",\r\n    opacity: 0.5\r\n  }, 1000); // Anima el ancho y la opacidad del elemento durante 1 segundo\n  ```\n\n#### AJAX\n\n* **Cargar datos desde un archivo externo:**\n\n  ```javascript\n  $(\"#miElemento\").load(\"datos.txt\"); // Carga el contenido del archivo \"datos.txt\" en el elemento con el ID \"miElemento\"\n  ```\n\n* **Realizar una solicitud GET:**\n\n  ```javascript\n  $.get(\"miServidor.php\", function(data) {\r\n    $(\"#miElemento\").html(data); // Inserta la respuesta del servidor en el elemento con el ID \"miElemento\"\r\n  });\n  ```\n\n### EJEMPLO COMPLETO\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Ejemplo jQuery</title>\r\n  <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n  <script>\r\n    $(document).ready(function() {\r\n      $(\"button\").click(function() {\r\n        $(\"#miElemento\").toggle(); // Muestra u oculta el elemento al hacer clic en el botón\r\n      });\r\n    });\r\n  </script>\r\n</head>\r\n<body>\r\n\r\n  <button>Mostrar/Ocultar</button>\r\n  <div id=\"miElemento\">\r\n    Este es un elemento que se puede mostrar u ocultar con jQuery.\r\n  </div>\r\n\r\n</body>\r\n</html>\n```\n\nEn este ejemplo, al hacer clic en el botón, se muestra u oculta el elemento con el ID \"miElemento\".\n\n### VENTAJAS DE USAR JQUERY\n\n* **Sintaxis sencilla:** Facilita la escritura de código JavaScript.\n* **Compatibilidad entre navegadores:** Maneja las diferencias entre navegadores.\n* **Gran comunidad:** Amplia documentación y soporte en línea.\n* **Extensible:** Permite la creación de plugins personalizados.\n\n### DESVENTAJAS DE USAR JQUERY\n\n* **Tamaño de la biblioteca:** Puede aumentar el tiempo de carga de la página.\n* **Dependencia:** Requiere la inclusión de la biblioteca jQuery.\n* **Rendimiento:** En algunos casos, el código JavaScript nativo puede ser más rápido.\n\n## CONCLUSION\n\njQuery es una herramienta poderosa para el desarrollo web que simplifica la manipulación del DOM, el manejo de eventos, las animaciones y AJAX. Aunque tiene algunas desventajas, sus ventajas superan a sus inconvenientes en muchos casos, lo que la convierte en una opción popular para los desarrolladores web.\n\n### FUENTES DEL DOCUMENTO\n\n* [jQuery Official Website](https://jquery.com/)\n* [W3Schools jQuery Tutorial](https://www.w3schools.com/jquery/)\n* [jQuery API Documentation](https://api.jquery.com/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-frameworks-libraries/nextjs",
    "title": "Next.js",
    "description": "Framework de React para la creación de aplicaciones web con renderizado del lado del servidor (SSR) y generación de sitios estáticos (SSG).",
    "content": "Next.js es un framework de React de código abierto que permite a los desarrolladores crear aplicaciones web de alto rendimiento con facilidad. Se destaca por su capacidad para realizar renderizado del lado del servidor (SSR), generación de sitios estáticos (SSG) y enrutamiento basado en el sistema de archivos, lo que simplifica el desarrollo y mejora la experiencia del usuario.\n\n## OBJETIVOS CLAVE\n\n* **Mejora del rendimiento:** Next.js optimiza el rendimiento de las aplicaciones web mediante SSR y SSG, lo que reduce el tiempo de carga inicial y mejora la experiencia del usuario.\n* **SEO amigable:** El renderizado del lado del servidor facilita el rastreo de los motores de búsqueda, lo que mejora el posicionamiento SEO de las aplicaciones.\n* **Desarrollo simplificado:** Next.js proporciona un conjunto de herramientas y convenciones que simplifican el desarrollo de aplicaciones web complejas.\n* **Escalabilidad:** Next.js permite crear aplicaciones web escalables que pueden manejar un gran volumen de tráfico.\n* **Experiencia del desarrollador:** Ofrece una excelente experiencia al desarrollador con características como Fast Refresh (recarga rápida), enrutamiento intuitivo y soporte para TypeScript.\n\n## DESARROLLO DE NEXT.JS\n\n### 1. CREACION DE UN NUEVO PROYECTO\n\nPara crear un nuevo proyecto de Next.js, puedes utilizar el siguiente comando:\n\n```bash\nnpx create-next-app mi-proyecto\r\ncd mi-proyecto\r\nnpm run dev\n```\n\nEste comando crea un nuevo directorio llamado `mi-proyecto` con la estructura básica de un proyecto de Next.js, instala las dependencias necesarias y ejecuta el servidor de desarrollo.\n\n### 2. ENRUTAMIENTO\n\nNext.js utiliza un sistema de enrutamiento basado en el sistema de archivos. Cada archivo en el directorio `pages` se convierte automáticamente en una ruta. Por ejemplo, si creas un archivo llamado `pages/about.js`, se creará automáticamente una ruta `/about`.\n\n```jsx\n// pages/about.js\r\nfunction About() {\r\n  return <h1>Acerca de</h1>;\r\n}\r\n\r\nexport default About;\n```\n\n### 3. RENDERIZADO DEL LADO DEL SERVIDOR (SSR)\n\nNext.js permite realizar renderizado del lado del servidor utilizando la función `getServerSideProps`. Esta función se ejecuta en el servidor en cada solicitud y permite obtener datos antes de renderizar la página.\n\n```jsx\n// pages/index.js\r\nfunction HomePage({ posts }) {\r\n  return (\r\n    <ul>\r\n      {posts.map((post) => (\r\n        <li key={post.id}>{post.title}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport async function getServerSideProps() {\r\n  // Obtener datos del servidor\r\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts');\r\n  const posts = await res.json();\r\n\r\n  return {\r\n    props: {\r\n      posts,\r\n    },\r\n  };\r\n}\r\n\r\nexport default HomePage;\n```\n\n### 4. GENERACION DE SITIOS ESTATICOS (SSG)\n\nNext.js también permite generar sitios estáticos utilizando la función `getStaticProps`. Esta función se ejecuta en tiempo de compilación y permite obtener datos que no cambian con frecuencia.\n\n```jsx\n// pages/index.js\r\nfunction HomePage({ posts }) {\r\n  return (\r\n    <ul>\r\n      {posts.map((post) => (\r\n        <li key={post.id}>{post.id} - {post.title}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport async function getStaticProps() {\r\n  // Obtener datos del servidor\r\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts');\r\n  const posts = await res.json();\r\n\r\n  return {\r\n    props: {\r\n      posts,\r\n    },\r\n  };\r\n}\r\n\r\nexport default HomePage;\n```\n\n### 5. API ROUTES\n\nNext.js permite crear API routes directamente en el directorio `pages/api`. Estos archivos se ejecutan en el servidor y permiten crear endpoints para manejar solicitudes HTTP.\n\n```jsx\n// pages/api/hello.js\r\nexport default function handler(req, res) {\r\n  res.status(200).json({ text: 'Hola' });\r\n}\n```\n\n### 6. ESTILOS\n\nNext.js soporta diferentes formas de agregar estilos a las aplicaciones, incluyendo CSS Modules, Styled JSX y bibliotecas de CSS-in-JS como Styled Components y Emotion.\n\n**Ejemplo con CSS Modules:**\n\n```jsx\n// components/MyComponent.module.css\r\n.title {\r\n  color: blue;\r\n}\n```\n\n```jsx\n// components/MyComponent.js\r\nimport styles from './MyComponent.module.css';\r\n\r\nfunction MyComponent() {\r\n  return <h1 className={styles.title}>Hola Mundo</h1>;\r\n}\r\n\r\nexport default MyComponent;\n```\n\n### 7. DEPLOY\n\nNext.js se puede desplegar en diferentes plataformas como Vercel, Netlify, AWS y otras. Vercel es la plataforma recomendada por los creadores de Next.js y ofrece una integración perfecta con el framework.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### BLOG PERSONAL\n\nUn blog personal es un excelente ejemplo para utilizar Next.js, ya que se puede aprovechar el SSG para generar las páginas de los posts en tiempo de compilación, lo que mejora el rendimiento y el SEO.\n\n### E-COMMERCE\n\nNext.js también se puede utilizar para crear tiendas en línea. En este caso, se puede utilizar SSR para renderizar las páginas de los productos en el servidor, lo que garantiza que los motores de búsqueda puedan rastrear el contenido y mejorar el posicionamiento SEO.\n\n### DASHBOARD\n\nPara crear dashboards, se puede utilizar Next.js con SSR para obtener los datos del servidor y renderizar la página en cada solicitud. Esto garantiza que los datos estén siempre actualizados.\n\n## FUENTES DEL DOCUMENTO\n\n* [Next.js Official Documentation](https://nextjs.org/docs)\n* [Vercel](https://vercel.com/)\n* [React](https://reactjs.org/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-frameworks-libraries/react",
    "title": "React",
    "description": "React es una biblioteca de JavaScript para construir interfaces de usuario interactivas y reutilizables.",
    "content": "React es una biblioteca de JavaScript de código abierto diseñada para facilitar la creación de interfaces de usuario (UI) interactivas, especialmente en aplicaciones web de una sola página. Desarrollada y mantenida por Facebook (ahora Meta) y una gran comunidad de desarrolladores, React permite a los desarrolladores dividir la UI en componentes reutilizables, cada uno gestionando su propio estado. Esta arquitectura basada en componentes simplifica el desarrollo, la prueba y el mantenimiento de aplicaciones complejas.\n\n## OBJETIVOS CLAVE\n\n* **Componentes Reutilizables:** React promueve la creación de componentes que pueden ser reutilizados en diferentes partes de la aplicación, lo que reduce la duplicación de código y facilita el mantenimiento.\n* **Declarativo:** React permite a los desarrolladores describir cómo debe verse la UI en diferentes estados, en lugar de manipular directamente el DOM. Esto hace que el código sea más legible y fácil de entender.\n* **Eficiencia:** React utiliza un DOM virtual para minimizar las actualizaciones directas al DOM real del navegador, lo que mejora el rendimiento de la aplicación.\n* **Comunidad y Ecosistema:** React cuenta con una gran comunidad de desarrolladores y un ecosistema rico en bibliotecas y herramientas que facilitan el desarrollo de aplicaciones complejas.\n\n## DESARROLLO DE REACT\n\n### COMPONENTES\n\nEn React, un componente es una pieza de código reutilizable que define una parte de la UI. Los componentes pueden ser funcionales o de clase.\n\n#### COMPONENTES FUNCIONALES\n\nLos componentes funcionales son funciones de JavaScript que reciben propiedades (props) como argumento y retornan elementos de React que describen la UI.\n\n```javascript\nfunction Saludo(props) {\r\n  return <h1>Hola, {props.nombre}!</h1>;\r\n}\r\n\r\nexport default Saludo;\n```\n\n#### COMPONENTES DE CLASE\n\nLos componentes de clase son clases de JavaScript que extienden la clase `React.Component`. Estos componentes tienen un método `render()` que retorna los elementos de React.\n\n```javascript\nimport React from 'react';\r\n\r\nclass Saludo extends React.Component {\r\n  render() {\r\n    return <h1>Hola, {this.props.nombre}!</h1>;\r\n  }\r\n}\r\n\r\nexport default Saludo;\n```\n\n### JSX\n\nJSX es una extensión de sintaxis para JavaScript que permite escribir código HTML dentro de JavaScript. React utiliza JSX para describir la estructura de la UI.\n\n```javascript\nconst elemento = <h1>Hola, Mundo!</h1>;\n```\n\nJSX se transforma en llamadas a `React.createElement()` durante la compilación.\n\n### ESTADO (STATE)\n\nEl estado de un componente es un objeto que contiene datos que pueden cambiar con el tiempo. Cuando el estado de un componente cambia, React actualiza la UI para reflejar los nuevos datos.\n\n```javascript\nimport React, { useState } from 'react';\r\n\r\nfunction Contador() {\r\n  const [contador, setContador] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Contador: {contador}</p>\r\n      <button onClick={() => setContador(contador + 1)}>\r\n        Incrementar\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contador;\n```\n\n### PROPIEDADES (PROPS)\n\nLas propiedades son datos que se pasan de un componente padre a un componente hijo. Las propiedades son inmutables desde el punto de vista del componente hijo.\n\n```javascript\nfunction Saludo(props) {\r\n  return <h1>Hola, {props.nombre}!</h1>;\r\n}\r\n\r\nfunction App() {\r\n  return <Saludo nombre=\"Usuario\" />;\r\n}\r\n\r\nexport default App;\n```\n\n### CICLO DE VIDA DE LOS COMPONENTES\n\nLos componentes de clase en React tienen un ciclo de vida que incluye varios métodos que se ejecutan en diferentes momentos. Algunos de los métodos más comunes son:\n\n* `constructor()`: Se ejecuta al crear el componente.\n* `render()`: Se ejecuta para renderizar el componente.\n* `componentDidMount()`: Se ejecuta después de que el componente se monta en el DOM.\n* `componentDidUpdate()`: Se ejecuta después de que el componente se actualiza.\n* `componentWillUnmount()`: Se ejecuta antes de que el componente se desmonte del DOM.\n\n### GESTION DE EVENTOS\n\nReact proporciona un sistema de gestión de eventos que es similar al de HTML, pero con algunas diferencias. Los eventos en React se nombran en camelCase en lugar de minúsculas.\n\n```javascript\nfunction Boton() {\r\n  function handleClick() {\r\n    alert('¡Botón clickeado!');\r\n  }\r\n\r\n  return <button onClick={handleClick}>Haz clic aquí</button>;\r\n}\r\n\r\nexport default Boton;\n```\n\n### HOOKS\n\nLos Hooks son funciones que permiten a los componentes funcionales acceder al estado y a otras características de React que solo estaban disponibles en los componentes de clase. Algunos de los Hooks más comunes son:\n\n* `useState()`: Permite añadir estado a un componente funcional.\n* `useEffect()`: Permite realizar efectos secundarios en un componente funcional.\n* `useContext()`: Permite acceder al contexto en un componente funcional.\n\n```javascript\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction EjemploHook() {\r\n  const [contador, setContador] = useState(0);\r\n\r\n  useEffect(() => {\r\n    document.title = `Contador: ${contador}`;\r\n  }, [contador]);\r\n\r\n  return (\r\n    <div>\r\n      <p>Contador: {contador}</p>\r\n      <button onClick={() => setContador(contador + 1)}>\r\n        Incrementar\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EjemploHook;\n```\n\n### ENRUTAMIENTO\n\nEl enrutamiento en React permite navegar entre diferentes vistas o componentes en una aplicación de una sola página. React Router es una biblioteca popular para gestionar el enrutamiento en React.\n\n```javascript\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nfunction Inicio() {\r\n  return <h2>Inicio</h2>;\r\n}\r\n\r\nfunction AcercaDe() {\r\n  return <h2>Acerca De</h2>;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/\">Inicio</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/acerca-de\">Acerca De</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <Route path=\"/\" exact component={Inicio} />\r\n        <Route path=\"/acerca-de\" component={AcercaDe} />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\n```\n\n### ESTILOS\n\nHay varias formas de añadir estilos a los componentes de React:\n\n* **Estilos en línea:** Se añaden directamente como atributos a los elementos.\n* **Hojas de estilo CSS:** Se importan archivos CSS y se aplican clases a los elementos.\n* **Módulos CSS:** Similar a las hojas de estilo CSS, pero con nombres de clase únicos para evitar conflictos.\n* **Librerías de estilos:** Se utilizan librerías como Styled Components o Material-UI para gestionar los estilos.\n\n```javascript\n// Estilos en línea\r\nconst estiloH1 = {\r\n  color: 'blue',\r\n  fontSize: '24px'\r\n};\r\n\r\nfunction Titulo() {\r\n  return <h1 style={estiloH1}>Título con estilo</h1>;\r\n}\r\n\r\nexport default Titulo;\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [React Official Documentation](https://reactjs.org/)\n* [React Router Documentation](https://reactrouter.com/)\n* [Styled Components Documentation](https://styled-components.com/)\n* [Material-UI Documentation](https://mui.com/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-frameworks-libraries/vuejs",
    "title": "Vue.js",
    "description": "Framework progresivo de JavaScript para construir interfaces de usuario.",
    "content": "Vue.js es un framework de JavaScript de código abierto para construir interfaces de usuario (UI) y aplicaciones de una sola página (SPA). Se caracteriza por ser progresivo, lo que significa que se puede adoptar gradualmente en proyectos existentes. Vue.js es conocido por su sintaxis sencilla, su tamaño reducido y su alto rendimiento, lo que lo convierte en una excelente opción tanto para proyectos pequeños como para aplicaciones complejas.\n\n## OBJETIVOS CLAVE SOBRE VUE.JS\n\n* **Facilidad de Aprendizaje:** Vue.js está diseñado para ser fácil de aprender y utilizar. Su sintaxis es intuitiva y similar a HTML, lo que facilita la transición para desarrolladores con experiencia en HTML, CSS y JavaScript.\n* **Flexibilidad:** Vue.js se puede integrar fácilmente en proyectos existentes o utilizarse para construir aplicaciones completamente nuevas. Su arquitectura modular permite a los desarrolladores elegir las características que necesitan sin sobrecargar el proyecto con funcionalidades innecesarias.\n* **Rendimiento:** Vue.js ofrece un excelente rendimiento gracias a su DOM virtual y su eficiente sistema de reactividad. Esto permite construir interfaces de usuario rápidas y fluidas, incluso en aplicaciones complejas.\n* **Componentes Reutilizables:** Vue.js se basa en componentes, que son bloques de código reutilizables que encapsulan la lógica y la interfaz de usuario. Esto facilita la construcción de aplicaciones modulares y mantenibles.\n* **Comunidad Activa:** Vue.js cuenta con una comunidad activa y en crecimiento que proporciona soporte, recursos y herramientas para desarrolladores. Esto facilita la resolución de problemas y el aprendizaje continuo.\n\n## DESARROLLO DE VUE.JS\n\n### INSTALACION\n\nPara comenzar a utilizar Vue.js, puedes incluirlo directamente en tu página HTML mediante un CDN (Content Delivery Network) o instalarlo a través de npm (Node Package Manager).\n\n**CDN:**\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js\"></script>\n```\n\n**NPM:**\n\n```bash\nnpm install vue\n```\n\n### ESTRUCTURA BASICA DE UNA APLICACION VUE.JS\n\nUna aplicación Vue.js se compone de una instancia de Vue que se encarga de gestionar el estado y la interfaz de usuario. La instancia de Vue se crea con un objeto de opciones que define el comportamiento de la aplicación.\n\n```javascript\nnew Vue({\r\n  el: '#app',\r\n  data: {\r\n    message: 'Hola, Vue.js!'\r\n  }\r\n})\n```\n\nEn este ejemplo, `el` especifica el elemento HTML donde se montará la aplicación Vue.js, y `data` define las propiedades que se utilizarán en la plantilla.\n\n### DIRECTIVAS\n\nVue.js utiliza directivas para manipular el DOM de forma declarativa. Las directivas son atributos HTML especiales que comienzan con `v-`.\n\n* `v-model`: Permite la vinculación bidireccional entre un elemento de formulario y una propiedad de la instancia de Vue.\n\n  ```html\n  <input type=\"text\" v-model=\"message\">\r\n  <p>Mensaje: {{ message }}</p>\n  ```\n* `v-if`: Renderiza un elemento condicionalmente basado en el valor de una expresión.\n\n  ```html\n  <p v-if=\"showMessage\">Este mensaje se muestra si showMessage es verdadero.</p>\n  ```\n* `v-for`: Renderiza una lista de elementos basados en un array.\n\n  ```html\n  <ul>\r\n    <li v-for=\"item in items\" :key=\"item.id\">{{ item.name }}</li>\r\n  </ul>\n  ```\n* `v-bind`: Permite enlazar dinámicamente atributos HTML a expresiones de Vue.\n\n  ```html\n  <img v-bind:src=\"imageUrl\" alt=\"Imagen\">\r\n  <!-- Sintaxis abreviada -->\r\n  <img :src=\"imageUrl\" alt=\"Imagen\">\n  ```\n* `v-on`: Permite escuchar eventos del DOM y ejecutar métodos de Vue.\n\n  ```html\n  <button v-on:click=\"greet\">Saludar</button>\r\n  <!-- Sintaxis abreviada -->\r\n  <button @click=\"greet\">Saludar</button>\n  ```\n\n### COMPONENTES\n\nLos componentes son bloques de código reutilizables que encapsulan la lógica y la interfaz de usuario. Un componente Vue.js se define con un objeto de opciones que especifica su plantilla, sus propiedades y su comportamiento.\n\n```javascript\nVue.component('mi-componente', {\r\n  template: '<div>¡Hola desde mi componente!</div>'\r\n})\n```\n\nLuego, puedes utilizar el componente en tu plantilla HTML:\n\n```html\n<mi-componente></mi-componente>\n```\n\n### EJEMPLO DE IMPLEMENTACION\n\nA continuación, se muestra un ejemplo completo de una aplicación Vue.js que muestra una lista de tareas y permite agregar nuevas tareas:\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Aplicación de Tareas Vue.js</title>\r\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js\"></script>\r\n</head>\r\n<body>\r\n  <div id=\"app\">\r\n    <h1>Lista de Tareas</h1>\r\n    <input type=\"text\" v-model=\"newTask\" @keyup.enter=\"addTask\">\r\n    <button @click=\"addTask\">Agregar Tarea</button>\r\n    <ul>\r\n      <li v-for=\"(task, index) in tasks\" :key=\"index\">\r\n        {{ task }}\r\n        <button @click=\"removeTask(index)\">Eliminar</button>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n\r\n  <script>\r\n    new Vue({\r\n      el: '#app',\r\n      data: {\r\n        newTask: '',\r\n        tasks: ['Tarea 1', 'Tarea 2', 'Tarea 3']\r\n      },\r\n      methods: {\r\n        addTask: function() {\r\n          if (this.newTask.trim() !== '') {\r\n            this.tasks.push(this.newTask.trim());\r\n            this.newTask = '';\r\n          }\r\n        },\r\n        removeTask: function(index) {\r\n          this.tasks.splice(index, 1);\r\n        }\r\n      }\r\n    })\r\n  </script>\r\n</body>\r\n</html>\n```\n\nEn este ejemplo, se utiliza `v-model` para vincular el valor del input a la propiedad `newTask`, `@keyup.enter` para agregar una tarea al presionar la tecla Enter, y `@click` para agregar y eliminar tareas. La directiva `v-for` se utiliza para mostrar la lista de tareas.\n\n## FUENTES DEL DOCUMENTO\n\n* [Vue.js Official Documentation](https://vuejs.org/)\n* [Vue.js Guide](https://vuejs.org/v2/guide/)\n* [Vue.js API Reference](https://vuejs.org/v2/api/)\n* [Vue Mastery](https://www.vuemastery.com/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-fundamentals/arrays",
    "title": "Arrays en JavaScript",
    "description": "Guía completa sobre arrays en JavaScript creación, manipulación, métodos y casos de uso.",
    "content": "Los arrays son una de las estructuras de datos más fundamentales en JavaScript. Permiten almacenar colecciones ordenadas de elementos, que pueden ser de cualquier tipo de dato, incluyendo números, strings, objetos, e incluso otros arrays. Esta flexibilidad los convierte en una herramienta esencial para la manipulación y organización de datos en aplicaciones web y del lado del servidor.\n\n## OBJETIVOS CLAVE\n\n* **Comprender la sintaxis y la creación de arrays:** Aprender las diferentes formas de declarar e inicializar arrays en JavaScript.\n* **Dominar los métodos de manipulación:** Conocer y aplicar los métodos más comunes para añadir, eliminar, modificar y buscar elementos en un array.\n* **Utilizar métodos de iteración:** Aprender a iterar sobre los elementos de un array utilizando métodos como `map`, `filter`, `reduce`, y otros.\n* **Aplicar arrays en casos prácticos:** Entender cómo los arrays pueden ser utilizados para resolver problemas comunes en el desarrollo de software.\n\n## DESARROLLO DEL TEMA\n\n### CREACION DE ARRAYS\n\nEn JavaScript, un array se puede crear de varias maneras:\n\n1. **Literal:**\n\n   ```javascript\n   let miArray = []; // Array vacío\r\n   let numeros = [1, 2, 3, 4, 5]; // Array con números\r\n   let mixto = [1, \"hola\", true, {nombre: \"Juan\"}]; // Array con diferentes tipos de datos\n   ```\n2. **Constructor `Array()`:**\n\n   ```javascript\n   let miArray = new Array(); // Array vacío\r\n   let numeros = new Array(1, 2, 3, 4, 5); // Array con números\r\n   let tamaño = new Array(10); // Array con 10 elementos vacíos\n   ```\n\n### ACCESO A LOS ELEMENTOS\n\nLos elementos de un array se acceden mediante su índice, que comienza en 0.\n\n```javascript\nlet frutas = [\"manzana\", \"banana\", \"naranja\"];\r\nconsole.log(frutas[0]); // \"manzana\"\r\nconsole.log(frutas[1]); // \"banana\"\r\nconsole.log(frutas[2]); // \"naranja\"\n```\n\n## METODOS DE MANIPULACION\n\nJavaScript proporciona una amplia gama de métodos para manipular `arrays`. Aquí están algunos de los más comunes:\n\n### 1. push()\n\nAñade uno o más elementos al final del array.\n\n```javascript\nlet frutas = [\"manzana\", \"banana\"];\r\nfrutas.push(\"naranja\");\r\nconsole.log(frutas); // [\"manzana\", \"banana\", \"naranja\"]\n```\n\n### 2. pop()\n\nElimina el último elemento del array y lo devuelve.\n\n```javascript\nlet frutas = [\"manzana\", \"banana\", \"naranja\"];\r\nlet ultimaFruta = frutas.pop();\r\nconsole.log(frutas); // [\"manzana\", \"banana\"]\r\nconsole.log(ultimaFruta); // \"naranja\"\n```\n\n### 3. shift()\n\nElimina el primer elemento del array y lo devuelve.\n\n```javascript\nlet frutas = [\"manzana\", \"banana\", \"naranja\"];\r\nlet primeraFruta = frutas.shift();\r\nconsole.log(frutas); // [\"banana\", \"naranja\"]\r\nconsole.log(primeraFruta); // \"manzana\"\n```\n\n### 4. unshift()\n\nAñade uno o más elementos al principio del array.\n\n```javascript\nlet frutas = [\"banana\", \"naranja\"];\r\nfrutas.unshift(\"manzana\");\r\nconsole.log(frutas); // [\"manzana\", \"banana\", \"naranja\"]\n```\n\n### 5. splice()\n\nPermite añadir, eliminar o reemplazar elementos en cualquier posición del array.\n\n```javascript\nlet frutas = [\"manzana\", \"banana\", \"naranja\"];\r\n// Eliminar 1 elemento desde la posición 1\r\nfrutas.splice(1, 1);\r\nconsole.log(frutas); // [\"manzana\", \"naranja\"]\r\n\r\n// Añadir \"kiwi\" en la posición 1\r\nfrutas.splice(1, 0, \"kiwi\");\r\nconsole.log(frutas); // [\"manzana\", \"kiwi\", \"naranja\"]\r\n\r\n// Reemplazar \"manzana\" con \"pera\" en la posición 0\r\nfrutas.splice(0, 1, \"pera\");\r\nconsole.log(frutas); // [\"pera\", \"kiwi\", \"naranja\"]\n```\n\n### slice()\n\nCrea una copia superficial de una porción del array.\n\n```javascript\nlet frutas = [\"manzana\", \"banana\", \"naranja\", \"kiwi\"];\r\nlet porcion = frutas.slice(1, 3); // Desde el índice 1 hasta el 3 (sin incluir)\r\nconsole.log(porcion); // [\"banana\", \"naranja\"]\r\nconsole.log(frutas); // [\"manzana\", \"banana\", \"naranja\", \"kiwi\"] (el array original no se modifica)\n```\n\n## METODOS DE ITERACION\n\nLos métodos de iteración permiten realizar operaciones en cada elemento del array de manera eficiente.\n\n### 1. forEach()\n\nEjecuta una función para cada elemento del array.\n\n```javascript\nlet numeros = [1, 2, 3];\r\nnumeros.forEach(function(numero) {\r\n  console.log(numero * 2);\r\n});\r\n// 2\r\n// 4\r\n// 6\n```\n\n### 2. map()\n\nCrea un nuevo array con los resultados de aplicar una función a cada elemento del array original.\n\n```javascript\nlet numeros = [1, 2, 3];\r\nlet dobles = numeros.map(function(numero) {\r\n  return numero * 2;\r\n});\r\nconsole.log(dobles); // [2, 4, 6]\n```\n\n### 3. filter()\n\nCrea un nuevo array con todos los elementos que cumplen una condición específica.\n\n```javascript\nlet numeros = [1, 2, 3, 4, 5];\r\nlet pares = numeros.filter(function(numero) {\r\n  return numero % 2 === 0;\r\n});\r\nconsole.log(pares); // [2, 4]\n```\n\n### 4. reduce()\n\nAplica una función a un acumulador y a cada elemento del array (de izquierda a derecha) para reducirlo a un único valor.\n\n```javascript\nlet numeros = [1, 2, 3, 4];\r\nlet suma = numeros.reduce(function(acumulador, numero) {\r\n  return acumulador + numero;\r\n}, 0); // 0 es el valor inicial del acumulador\r\nconsole.log(suma); // 10\n```\n\n### 5. find()\n\nDevuelve el valor del primer elemento en el array que satisfaga la función de prueba proporcionada. En caso contrario, devuelve undefined.\n\n```javascript\nconst numeros = [5, 12, 8, 130, 44];\r\n\r\nconst encontrado = numeros.find(elemento => elemento > 10);\r\n\r\nconsole.log(encontrado); // Output: 12\n```\n\n### 6. findIndex()\n\nDevuelve el índice del primer elemento en el array que satisfaga la función de prueba proporcionada. En caso contrario, devuelve -1.\n\n```javascript\nconst numeros = [5, 12, 8, 130, 44];\r\n\r\nconst esGrande = (elemento) => elemento > 13;\r\n\r\nconsole.log(numeros.findIndex(esGrande)); // Output: 3\n```\n\n## EJEMPLOS DE IMPLEMENTACION\n\n1. Calcular el promedio de una lista de números\n\n```javascript\nfunction calcularPromedio(numeros) {\r\n  let suma = numeros.reduce((acumulador, numero) => acumulador + numero, 0);\r\n  return suma / numeros.length;\r\n}\r\n\r\nlet notas = [85, 90, 78, 92, 88];\r\nlet promedio = calcularPromedio(notas);\r\nconsole.log(\"El promedio es:\", promedio); // El promedio es: 86.6\n```\n\n2. Filtrar productos por precio\n\n```javascript\nlet productos = [\r\n  { nombre: \"Camiseta\", precio: 25 },\r\n  { nombre: \"Pantalón\", precio: 50 },\r\n  { nombre: \"Zapatos\", precio: 80 },\r\n  { nombre: \"Gorra\", precio: 15 }\r\n];\r\n\r\nfunction filtrarPorPrecio(productos, precioMaximo) {\r\n  return productos.filter(producto => producto.precio <= precioMaximo);\r\n}\r\n\r\nlet productosBaratos = filtrarPorPrecio(productos, 40);\r\nconsole.log(\"Productos baratos:\", productosBaratos);\r\n// Productos baratos:\r\n// [\r\n//   { nombre: \"Camiseta\", precio: 25 },\r\n//   { nombre: \"Gorra\", precio: 15 }\r\n// ]\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [**MDN Web Docs**: Array](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array)\n\n* [**W3Schools**: JavaScript Arrays](https://www.w3schools.com/js/js_arrays.asp)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-fundamentals/control-structures",
    "title": "Estructuras de Control en JavaScript",
    "description": "Guía detallada sobre las estructuras de control en JavaScript condicionales (if, else, switch) y bucles (for, while, do...while).",
    "content": "Las estructuras de control son componentes fundamentales en cualquier lenguaje de programación, incluyendo JavaScript. Permiten a los desarrolladores controlar el flujo de ejecución de un programa, tomando decisiones y repitiendo bloques de código según ciertas condiciones. En JavaScript, las estructuras de control se dividen principalmente en dos categorías: condicionales y bucles.\n\n## OBJETIVOS CLAVE\n\n* **Comprender los tipos de estructuras de control:** Identificar y diferenciar las estructuras condicionales (if, else, switch) y los bucles (for, while, do...while).\n* **Aplicar condicionales para la toma de decisiones:** Utilizar `if`, `else if` y `else` para ejecutar diferentes bloques de código basados en condiciones específicas.\n* **Implementar bucles para la repetición de código:** Utilizar `for`, `while` y `do...while` para repetir la ejecución de un bloque de código un número determinado de veces o hasta que se cumpla una condición.\n* **Controlar el flujo de bucles:** Utilizar `break` y `continue` para modificar el comportamiento de los bucles.\n* **Optimizar el uso de estructuras de control:** Elegir la estructura de control más adecuada para cada situación, mejorando la legibilidad y eficiencia del código.\n\n## CONDICIONALES\n\nLas estructuras condicionales permiten ejecutar diferentes bloques de código dependiendo de si una condición es verdadera o falsa.\n\n### IF, ELSE IF Y ELSE\n\nLa estructura `if` es la más básica de las condicionales. Permite ejecutar un bloque de código si una condición es verdadera.\n\n```javascript\nlet edad = 18;\r\n\r\nif (edad >= 18) {\r\n  console.log(\"Eres mayor de edad.\");\r\n}\n```\n\nSi la condición dentro del paréntesis es verdadera, el código dentro de las llaves se ejecuta. Si es falsa, el código se omite.\n\nLa estructura `else` se utiliza para ejecutar un bloque de código si la condición del `if` es falsa.\n\n```javascript\nlet edad = 15;\r\n\r\nif (edad >= 18) {\r\n  console.log(\"Eres mayor de edad.\");\r\n} else {\r\n  console.log(\"Eres menor de edad.\");\r\n}\n```\n\nLa estructura `else if` permite encadenar múltiples condiciones. Se evalúa cada condición en orden, y si una es verdadera, se ejecuta el bloque de código correspondiente.\n\n```javascript\nlet nota = 75;\r\n\r\nif (nota >= 90) {\r\n  console.log(\"Sobresaliente\");\r\n} else if (nota >= 70) {\r\n  console.log(\"Notable\");\r\n} else if (nota >= 50) {\r\n  console.log(\"Aprobado\");\r\n} else {\r\n  console.log(\"Suspenso\");\r\n}\n```\n\n## SWITCH\n\nLa estructura `switch` es útil cuando se tienen múltiples casos posibles para una variable. Permite ejecutar diferentes bloques de código basados en el valor de una expresión.\n\n```javascript\nlet dia = \"lunes\";\r\n\r\nswitch (dia) {\r\n  case \"lunes\":\r\n    console.log(\"Es el primer día de la semana.\");\r\n    break;\r\n  case \"viernes\":\r\n    console.log(\"Es viernes, ¡el fin de semana está cerca!\");\r\n    break;\r\n  default:\r\n    console.log(\"Es otro día de la semana.\");\r\n}\n```\n\nCada `case` compara el valor de la expresión con un valor específico. Si hay una coincidencia, se ejecuta el código correspondiente. La palabra clave `break` es importante para evitar que se ejecuten los casos siguientes. El `default` se ejecuta si ninguno de los casos coincide.\n\n## BUCLES\n\nLos bucles permiten repetir un bloque de código múltiples veces. JavaScript ofrece varios tipos de bucles, cada uno adecuado para diferentes situaciones.\n\n### FOR\n\nEl bucle `for` es ideal cuando se conoce el número de iteraciones que se deben realizar.\n\n```javascript\nfor (let i = 0; i < 5; i++) {\r\n  console.log(\"Iteración número \" + i);\r\n}\n```\n\nEl bucle `for` consta de tres partes:\n\n1. **Inicialización**: Se ejecuta una vez al principio del bucle (ej: `let i = 0`).\n\n2. **Condición**: Se evalúa antes de cada iteración. Si es verdadera, el bucle continúa; si es falsa, el bucle termina (ej: `i < 5`).\n\n3. **Incremento/Decremento**: Se ejecuta después de cada iteración (ej: `i++`).\n\n### WHILE\n\nEl bucle `while` se utiliza cuando se necesita repetir un bloque de código mientras una condición sea verdadera.\n\n```javascript\nlet contador = 0;\r\n\r\nwhile (contador < 5) {\r\n  console.log(\"Contador: \" + contador);\r\n  contador++;\r\n}\n```\n\nEl bucle `while` evalúa la condición antes de cada iteración. Si la condición es verdadera, el código dentro del bucle se ejecuta. Es importante asegurarse de que la condición eventualmente se vuelva falsa para evitar un bucle infinito.\n\n### DO...WHILE\n\nEl bucle `do...while` es similar al `while`, pero garantiza que el bloque de código se ejecute al menos una vez.\n\n```javascript\nlet contador = 0;\r\n\r\ndo {\r\n  console.log(\"Contador: \" + contador);\r\n  contador++;\r\n} while (contador < 5);\n```\n\nEl bucle `do...while` ejecuta el bloque de código primero y luego evalúa la condición. Si la condición es verdadera, el bucle se repite.\n\n### BREAK Y CONTINUE\n\nLas sentencias `break` y continue permiten controlar el flujo de los bucles.\n\n* **Break**: Termina la ejecución del bucle actual.\n\n  ```javascript\n  for (let i = 0; i < 10; i++) {\r\n  if (i === 5) {\r\n      break; // Sale del bucle cuando i es igual a 5\r\n  }\r\n  console.log(\"Iteración: \" + i);\r\n  }\n  ```\n\n* **Continue**: Salta la iteración actual y continúa con la siguiente.\n\n  ```javascript\n  for (let i = 0; i < 10; i++) {\r\n  if (i % 2 === 0) {\r\n      continue; // Salta las iteraciones donde i es par\r\n  }\r\n  console.log(\"Iteración: \" + i);\r\n  }\n  ```\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: DETERMINAR SI UN NUMERO ES PAR O IMPAR\n\n```javascript\nfunction esParOImpar(numero) {\r\n  if (numero % 2 === 0) {\r\n    return \"El número es par\";\r\n  } else {\r\n    return \"El número es impar\";\r\n  }\r\n}\r\n\r\nconsole.log(esParOImpar(4)); // Imprime: El número es par\r\nconsole.log(esParOImpar(7)); // Imprime: El número es impar\n```\n\n### EJEMPLO 2: ITERAR SOBRE UN ARRAY\n\n```javascript\nlet frutas = [\"manzana\", \"banana\", \"naranja\"];\r\n\r\nfor (let i = 0; i < frutas.length; i++) {\r\n  console.log(\"Fruta: \" + frutas[i]);\r\n}\n```\n\n### EJEMPLO 3: SIMULAR UN JUEGO DE ADIVINAR UN NUMERO\n\n```javascript\nlet numeroSecreto = Math.floor(Math.random() * 10) + 1;\r\nlet intento;\r\nlet intentosRealizados = 0;\r\n\r\ndo {\r\n  intento = parseInt(prompt(\"Adivina el número (entre 1 y 10):\"));\r\n  intentosRealizados++;\r\n\r\n  if (intento === numeroSecreto) {\r\n    alert(\"¡Felicidades! Adivinaste el número en \" + intentosRealizados + \" intentos.\");\r\n  } else if (intento < numeroSecreto) {\r\n    alert(\"El número es mayor. Intenta de nuevo.\");\r\n  } else {\r\n    alert(\"El número es menor. Intenta de nuevo.\");\r\n  }\r\n} while (intento !== numeroSecreto);\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: Control flow and error handling](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling)\n\n* [W3Schools: JavaScript if...else Statement](https://www.w3schools.com/js/js_if_else.asp)\n\n* [W3Schools: JavaScript Switch Statement](https://www.w3schools.com/js/js_switch.asp)\n\n* [W3Schools: JavaScript For Loop](https://www.w3schools.com/js/js_loop_for.asp)\n\n* [W3Schools: JavaScript While Loop](https://www.w3schools.com/js/js_loop_while.asp)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-fundamentals/functions",
    "title": "Funciones de Javascript",
    "description": "Explicación detallada de las funciones en JavaScript, incluyendo su sintaxis, tipos, uso y mejores prácticas.",
    "content": "Las funciones son uno de los conceptos fundamentales en JavaScript. Permiten encapsular bloques de código para que puedan ser reutilizados y ejecutados múltiples veces. Una función es un conjunto de instrucciones que realiza una tarea específica.\n\n## OBJETIVOS CLAVE\n\n* Entender la sintaxis y los diferentes tipos de funciones en JavaScript.\n* Aprender a definir y llamar funciones.\n* Comprender el concepto de parámetros y argumentos.\n* Explorar el uso de la declaración de retorno.\n* Entender el scope y las closures en el contexto de las funciones.\n* Familiarizarse con las arrow functions (funciones flecha).\n\n## SINTAXIS BASICA\n\nUna función en JavaScript se define utilizando la palabra clave `function`, seguida de un nombre (opcional), una lista de parámetros entre paréntesis `()` y un bloque de código delimitado por llaves `{}`.\n\n```javascript\nfunction nombreDeLaFuncion(parametro1, parametro2) {\r\n  // Bloque de código a ejecutar\r\n  return valor; // Opcional\r\n}\n```\n\n## TIPOS DE FUNCIONES\n\nJavaScript ofrece varios tipos de funciones, cada uno con sus propias características y casos de uso.\n\n### 1. DECLARACION DE FUNCION (FUNCTION DECLARATION)\n\nLas declaraciones de función son las más comunes y se definen utilizando la palabra clave `function`.\n\n```javascript\nfunction sumar(a, b) {\r\n  return a + b;\r\n}\r\n\r\nconsole.log(sumar(5, 3)); // Output: 8\n```\n\nLas declaraciones de función son hoisted, lo que significa que pueden ser llamadas antes de que aparezcan en el código.\n\n### 2. EXPRESION DE FUNCION (FUNCTION EXPRESSION)\n\nLas expresiones de función se definen asignando una función a una variable.\n\n```javascript\nconst multiplicar = function(a, b) {\r\n  return a * b;\r\n};\r\n\r\nconsole.log(multiplicar(5, 3)); // Output: 15\n```\n\nA diferencia de las declaraciones de función, las expresiones de función no son hoisted.\n\n### 3. FUNCIONES ANONIMAS\n\nUna función anónima es una función que no tiene nombre. Se utilizan comúnmente en expresiones de función y como callbacks.\n\n```javascript\nsetTimeout(function() {\r\n  console.log(\"Esta función se ejecuta después de un tiempo.\");\r\n}, 1000);\n```\n\n### 4. ARROW FUNCTIONS (FUNCIONES FLECHA)\n\nLas `arrow` functions son una forma más concisa de escribir funciones, introducidas en ES6.\n\n```javascript\nconst dividir = (a, b) => a / b;\r\n\r\nconsole.log(dividir(15, 3)); // Output: 5\n```\n\nLas `arrow` functions tienen algunas diferencias importantes con las funciones tradicionales, como la ausencia de this propio y la imposibilidad de ser utilizadas como constructores.\n\n## PARAMETROS Y ARGUMENTOS\n\nLos parámetros son las variables listadas en la definición de la función. Los argumentos son los valores que se pasan a la función cuando se llama.\n\n```javascript\nfunction saludar(nombre) { // 'nombre' es un parámetro\r\n  console.log(\"Hola, \" + nombre + \"!\");\r\n}\r\n\r\nsaludar(\"Juan\"); // \"Juan\" es un argumento\n```\n\n### PARAMETROS POR DEFECTO\n\nEn ES6, se pueden definir valores por defecto para los parámetros.\n\n```javascript\nfunction saludar(nombre = \"Invitado\") {\r\n  console.log(\"Hola, \" + nombre + \"!\");\r\n}\r\n\r\nsaludar(); // Output: Hola, Invitado!\r\nsaludar(\"Ana\"); // Output: Hola, Ana!\n```\n\n### REST PARAMETERS\n\nLos `rest parameters` permiten que una función acepte un número indefinido de argumentos como un `array`.\n\n```javascript\nfunction sumarTodos(...numeros) {\r\n  let total = 0;\r\n  for (let numero of numeros) {\r\n    total += numero;\r\n  }\r\n  return total;\r\n}\r\n\r\nconsole.log(sumarTodos(1, 2, 3, 4, 5)); // Output: 15\n```\n\n## LA DECLARACION DE RETORNO (RETURN STATEMENT)\n\nLa declaración `return` se utiliza para especificar el valor que una función debe devolver. Si una función no tiene una declaración `return`, devuelve `undefined` por defecto.\n\n```javascript\nfunction multiplicar(a, b) {\r\n  return a * b;\r\n}\r\n\r\nlet resultado = multiplicar(4, 6);\r\nconsole.log(resultado); // Output: 24\n```\n\n## SCOPE\n\nEl `scope` se refiere a la visibilidad de las variables dentro de una función. JavaScript tiene `scope léxico`, lo que significa que el `scope` de una variable se determina por su posición en el código fuente.\n\n### SCOPE GLOBAL\n\nLas variables declaradas fuera de cualquier función tienen `scope global` y son accesibles desde cualquier parte del código.\n\n```javascript\nlet variableGlobal = \"Soy global\";\r\n\r\nfunction mostrarVariable() {\r\n  console.log(variableGlobal);\r\n}\r\n\r\nmostrarVariable(); // Output: Soy global\n```\n\n### SCOPE LOCAL (FUNCTION SCOPE)\n\nLas variables declaradas dentro de una función tienen `scope local` y solo son accesibles dentro de esa función.\n\n```javascript\nfunction miFuncion() {\r\n  let variableLocal = \"Soy local\";\r\n  console.log(variableLocal);\r\n}\r\n\r\nmiFuncion(); // Output: Soy local\r\nconsole.log(variableLocal); // Error: variableLocal is not defined\n```\n\n### BLOCK SCOPE (LET Y CONST)\n\nLas variables declaradas con `let` y `const` tienen `block scope`, lo que significa que solo son accesibles dentro del bloque en el que se definen.\n\n```javascript\nfunction ejemploBlockScope() {\r\n  if (true) {\r\n    let x = 10;\r\n    const y = 20;\r\n    var z = 30;\r\n  }\r\n  console.log(z); // Output: 30\r\n  console.log(x); // Error: x is not defined\r\n  console.log(y); // Error: y is not defined\r\n}\r\n\r\nejemploBlockScope();\n```\n\n## CLOSURES\n\nUn `closure` es una función que tiene acceso a las variables de su `scope léxico`, incluso cuando se ejecuta fuera de ese `scope`.\n\n```javascript\nfunction crearContador() {\r\n  let contador = 0;\r\n\r\n  function incrementar() {\r\n    contador++;\r\n    console.log(contador);\r\n  }\r\n\r\n  return incrementar;\r\n}\r\n\r\nconst miContador = crearContador();\r\nmiContador(); // Output: 1\r\nmiContador(); // Output: 2\n```\n\nEn este ejemplo, la función incrementar tiene acceso a la variable contador de la función `crearContador`, incluso después de que `crearContador` haya terminado de ejecutarse.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: CALCULADORA BASICA\n\n```javascript\nfunction calculadora(operacion, a, b) {\r\n  switch (operacion) {\r\n    case 'sumar':\r\n      return a + b;\r\n    case 'restar':\r\n      return a - b;\r\n    case 'multiplicar':\r\n      return a * b;\r\n    case 'dividir':\r\n      return a / b;\r\n    default:\r\n      return \"Operación no válida\";\r\n  }\r\n}\r\n\r\nconsole.log(calculadora('sumar', 5, 3)); // Output: 8\r\nconsole.log(calculadora('dividir', 10, 2)); // Output: 5\r\nconsole.log(calculadora('potencia', 2, 3)); // Output: Operación no válida\n```\n\n### EJEMPLO 2: VALIDACION DE EMAIL\n\n```javascript\nfunction validarEmail(email) {\r\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return regex.test(email);\r\n}\r\n\r\nconsole.log(validarEmail(\"test@example.com\")); // Output: true\r\nconsole.log(validarEmail(\"invalid-email\")); // Output: false\n```\n\n### EJEMPLO 3: FUNCION DE ORDEN SUPERIOR (HIGHER-ORDER FUNCTION)\n\nUna función de orden superior es una función que recibe otras funciones como argumentos o devuelve una función como resultado.\n\n```javascript\nfunction aplicarOperacion(arr, operacion) {\r\n  let resultado = [];\r\n  for (let elemento of arr) {\r\n    resultado.push(operacion(elemento));\r\n  }\r\n  return resultado;\r\n}\r\n\r\nfunction cuadrado(x) {\r\n  return x * x;\r\n}\r\n\r\nconst numeros = [1, 2, 3, 4, 5];\r\nconst cuadrados = aplicarOperacion(numeros, cuadrado);\r\nconsole.log(cuadrados); // Output: [1, 4, 9, 16, 25]\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [**MDN Web Docs**: Functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions)\n\n* [**W3Schools**: JavaScript Functions](https://www.w3schools.com/js/js_functions.asp)\n\n* [**JavaScript.info**: Functions](https://javascript.info/function-basics)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-fundamentals",
    "title": "Fundamentos de Javascript",
    "description": "Exploración de los conceptos básicos de Javascript, incluyendo variables, tipos de datos, operadores, estructuras de control y funciones.",
    "content": "# FUNDAMENTOS DE JAVASCRIPT\n\nJavascript es un lenguaje de programación esencial para el desarrollo web moderno. Permite añadir interactividad y dinamismo a las páginas web, creando experiencias de usuario ricas y atractivas. Comprender los fundamentos de Javascript es crucial para cualquier desarrollador web, ya que sienta las bases para construir aplicaciones web complejas y eficientes.\n\n## OBJETIVOS CLAVE\n\n* Comprender los conceptos básicos de Javascript.\n* Aprender a declarar y utilizar variables.\n* Conocer los diferentes tipos de datos en Javascript.\n* Utilizar operadores para realizar cálculos y comparaciones.\n* Implementar estructuras de control para tomar decisiones y repetir acciones.\n* Definir y llamar funciones para organizar y reutilizar el código.\n\n## VARIABLES\n\nLas variables son contenedores que almacenan datos. En Javascript, se declaran utilizando las palabras clave `var`, `let` o `const`.\n\n* **`var`**: Declara una variable con alcance de función o global.\n* **`let`**: Declara una variable con alcance de bloque.\n* **`const`**: Declara una constante, cuyo valor no puede ser reasignado.\n\n```javascript\nvar nombre = \"Juan\";    // Variable con alcance global o de función\r\nlet edad = 30;          // Variable con alcance de bloque\r\nconst PI = 3.1416;      // Constante\n```\n\n## TIPOS DE DATOS\n\nJavascript tiene varios tipos de datos primitivos:\n\n* **Number**: Representa valores numéricos, tanto enteros como decimales.\n\n* **String**: Representa cadenas de texto.\n\n* **Boolean**: Representa valores lógicos (verdadero o falso).\n\n* **Null**: Representa la ausencia intencional de valor.\n\n* **Undefined**: Representa una variable que no ha sido inicializada.\n\n* **Symbol**: Representa un identificador único.\n\n* **BigInt**: Representa enteros de precisión arbitraria.\n\nAdemás de los tipos de datos primitivos, Javascript también tiene tipos de datos complejos, como:\n\n* **Object**: Representa una colección de propiedades.\n\n* **Array**: Representa una lista ordenada de valores.\n\n```javascript\nlet numero = 10;        // Tipo Number\r\nlet texto = \"Hola\";     // Tipo String\r\nlet esVerdadero = true; // Tipo Boolean\r\nlet nulo = null;        // Tipo Null\r\nlet indefinido;         // Tipo Undefined\r\n\r\nlet persona = {         // Tipo Object\r\n  nombre: \"Juan\",\r\n  edad: 30\r\n};\r\n\r\nlet numeros = [1, 2, 3]; // Tipo Array\n```\n\n## OPERADORES\n\n* Los operadores se utilizan para realizar cálculos, comparaciones y otras operaciones en Javascript.\n\n* Operadores aritméticos: `+`, `-`, `*`, `/`, `%` (módulo), `**` (exponenciación).\n\n* Operadores de asignación: `=`, `+=`, `-=`, `*=`, `/=`, `%=`.\n\n* Operadores de comparación: `==` (igual), `!=` (no igual), `===` (igual estricto), `!==` (no igual estricto), `>`, `<`, `>=`, `<=`.\n\n* Operadores lógicos: `&&` (AND), `||` (OR), `!` (NOT).\n\n```javascript\nlet a = 10;\r\nlet b = 5;\r\n\r\nconsole.log(a + b); // 15\r\nconsole.log(a == b); // false\r\nconsole.log(a > b && a < 20); // true\n```\n\n## ESTRUCTURAS DE CONTROL\n\nLas estructuras de control permiten tomar decisiones y repetir acciones en Javascript.\n\n* `if...else`: Ejecuta un bloque de código si una condición es verdadera, y otro bloque si es falsa.\n\n* `switch`: Ejecuta diferentes bloques de código según el valor de una expresión.\n\n* `for`: Repite un bloque de código un número determinado de veces.\n\n* `while`: Repite un bloque de código mientras una condición sea verdadera.\n\n* `do...while`: Repite un bloque de código al menos una vez, y luego mientras una condición sea verdadera.\n\n```javascript\nlet edad = 18;\r\n\r\nif (edad >= 18) {\r\n  console.log(\"Es mayor de edad\");\r\n} else {\r\n  console.log(\"Es menor de edad\");\r\n}\r\n\r\nfor (let i = 0; i < 5; i++) {\r\n  console.log(i);\r\n}\n```\n\n## FUNCIONES\n\nLas funciones son bloques de código que se pueden llamar para realizar una tarea específica. Se definen utilizando la palabra clave function.\n\n```javascript\nfunction saludar(nombre) {\r\n  console.log(\"Hola, \" + nombre + \"!\");\r\n}\r\n\r\nsaludar(\"Juan\"); // Llama a la función saludar\n```\n\nLas funciones pueden recibir parámetros y devolver valores.\n\n```javascript\nfunction sumar(a, b) {\r\n  return a + b;\r\n}\r\n\r\nlet resultado = sumar(5, 3);\r\nconsole.log(resultado); // 8\n```\n\n## FUENTES\n\n* MDN Web Docs: https://developer.mozilla.org/es/docs/Web/JavaScript\n\n* W3Schools: https://www.w3schools.com/js/default.asp\n\n* freeCodeCamp: https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-fundamentals/objects",
    "title": "Objetos de JavaScript",
    "description": "Exploración profunda de los objetos en JavaScript, sus propiedades, métodos y cómo utilizarlos eficazmente.",
    "content": "Los objetos son una estructura fundamental en JavaScript. Permiten agrupar datos relacionados y funcionalidades en una sola unidad. En esencia, un objeto es una colección de pares clave-valor, donde las claves son cadenas (o símbolos) y los valores pueden ser cualquier tipo de dato, incluyendo otros objetos, funciones, arrays, o tipos primitivos.\n\n## OBJETIVOS CLAVE\n\n* **Comprender la sintaxis y la creación de objetos:**  Aprender a definir objetos utilizando la notación literal y el constructor `Object`.\n* **Acceder y modificar propiedades:**  Dominar las diferentes formas de acceder y modificar las propiedades de un objeto.\n* **Entender los métodos de un objeto:**  Saber cómo definir y utilizar funciones dentro de un objeto.\n* **Explorar el concepto de `this`:**  Comprender cómo el valor de `this` cambia según el contexto de ejecución.\n* **Introducción a los prototipos:**  Entender cómo funciona la herencia basada en prototipos en JavaScript.\n\n## CREACION DE OBJETOS\n\nHay varias maneras de crear objetos en JavaScript:\n\n### NOTACION LITERAL\n\nEsta es la forma más común y sencilla de crear un objeto. Se define un objeto utilizando llaves `{}` y se especifican los pares clave-valor dentro de ellas.\n\n```javascript\nconst persona = {\r\n  nombre: \"Juan\",\r\n  apellido: \"Perez\",\r\n  edad: 30,\r\n  direccion: {\r\n    calle: \"Calle Falsa 123\",\r\n    ciudad: \"Springfield\"\r\n  }\r\n};\r\n\r\nconsole.log(persona.nombre); // Output: Juan\r\nconsole.log(persona.direccion.ciudad); // Output: Springfield\n```\n\n### CONSTRUCTOR OBJECT\n\nTambién se puede crear un objeto utilizando el constructor `Object`. Aunque es menos común que la notación literal, es útil en ciertos casos.\n\n```javascript\nconst persona = new Object();\r\npersona.nombre = \"Maria\";\r\npersona.apellido = \"Gomez\";\r\npersona.edad = 25;\r\n\r\nconsole.log(persona.nombre); // Output: Maria\n```\n\n### FUNCIONES CONSTRUCTORAS\n\nLas funciones constructoras son una forma de crear objetos con una estructura predefinida. Se utilizan con la palabra clave `new`.\n\n```javascript\nfunction Persona(nombre, apellido, edad) {\r\n  this.nombre = nombre;\r\n  this.apellido = apellido;\r\n  this.edad = edad;\r\n  this.saludar = function() {\r\n    console.log(`Hola, mi nombre es ${this.nombre} ${this.apellido}`);\r\n  }\r\n}\r\n\r\nconst persona1 = new Persona(\"Carlos\", \"Rodriguez\", 40);\r\npersona1.saludar(); // Output: Hola, mi nombre es Carlos Rodriguez\n```\n\n## CLASES (ECMASCRIPT 2015)\n\nLas clases en JavaScript son una forma más moderna y legible de crear objetos, aunque internamente siguen utilizando prototipos.\n\n```javascript\nclass Persona {\r\n  constructor(nombre, apellido, edad) {\r\n    this.nombre = nombre;\r\n    this.apellido = apellido;\r\n    this.edad = edad;\r\n  }\r\n\r\n  saludar() {\r\n    console.log(`Hola, mi nombre es ${this.nombre} ${this.apellido}`);\r\n  }\r\n}\r\n\r\nconst persona1 = new Persona(\"Laura\", \"Martinez\", 35);\r\npersona1.saludar(); // Output: Hola, mi nombre es Laura Martinez\n```\n\n## ACCESO Y MODIFICACION DE PROPIEDADES\n\nHay dos formas principales de acceder a las propiedades de un objeto:\n\n### NOTACION DE PUNTO\n\nEs la forma más común y legible. Se utiliza un punto (`.`) seguido del nombre de la propiedad.\n\n```javascript\nconst persona = {\r\n  nombre: \"Juan\",\r\n  apellido: \"Perez\"\r\n};\r\n\r\nconsole.log(persona.nombre); // Output: Juan\r\n\r\npersona.edad = 30; // Agrega una nueva propiedad\r\nconsole.log(persona.edad); // Output: 30\r\n\r\npersona.nombre = \"Ricardo\"; // Modifica una propiedad existente\r\nconsole.log(persona.nombre); // Output: Ricardo\n```\n\n### NOTACION DE CORCHETES\n\nSe utiliza corchetes (`[]`) y una cadena que representa el nombre de la propiedad. Es útil cuando el nombre de la propiedad está almacenado en una variable o cuando el nombre de la propiedad no es un identificador válido (por ejemplo, contiene espacios o caracteres especiales).\n\n```javascript\nconst persona = {\r\n  nombre: \"Juan\",\r\n  apellido: \"Perez\"\r\n};\r\n\r\nconsole.log(persona[\"nombre\"]); // Output: Juan\r\n\r\nconst propiedad = \"apellido\";\r\nconsole.log(persona[propiedad]); // Output: Perez\r\n\r\npersona[\"edad\"] = 30; // Agrega una nueva propiedad\r\nconsole.log(persona[\"edad\"]); // Output: 30\n```\n\n## METODOS DE UN OBJETO\n\nUn método es una función que es propiedad de un objeto. Se define como cualquier otra propiedad, pero su valor es una función.\n\n```javascript\nconst persona = {\r\n  nombre: \"Juan\",\r\n  apellido: \"Perez\",\r\n  saludar: function() {\r\n    console.log(`Hola, mi nombre es ${this.nombre} ${this.apellido}`);\r\n  },\r\n  nombreCompleto: function() {\r\n    return this.nombre + \" \" + this.apellido;\r\n  }\r\n};\r\n\r\npersona.saludar(); // Output: Hola, mi nombre es Juan Perez\r\nconsole.log(persona.nombreCompleto()); // Output: Juan Perez\n```\n\n## LA PALABRA CLAVE this\n\nEl valor de `this` depende del contexto en el que se está ejecutando el código. Dentro de un método de un objeto, `this` se refiere al objeto en sí.\n\n```javascript\nconst persona = {\r\n  nombre: \"Juan\",\r\n  apellido: \"Perez\",\r\n  saludar: function() {\r\n    console.log(`Hola, mi nombre es ${this.nombre} ${this.apellido}`);\r\n  }\r\n};\r\n\r\npersona.saludar(); // Output: Hola, mi nombre es Juan Perez\n```\n\nEn este ejemplo, `this.nombre` y `this.apellido` se refieren a las propiedades nombre y apellido del objeto persona.\n\nEs importante tener en cuenta que el valor de this puede cambiar si la función se llama de una manera diferente. Por ejemplo, si la función se llama utilizando `call` o `apply`, se puede especificar explícitamente el valor de `this`.\n\n## PROTOTIPOS\n\nEn JavaScript, los objetos heredan propiedades y métodos de un prototipo. Cada objeto tiene un prototipo asociado, y cuando se intenta acceder a una propiedad que no existe en el objeto, JavaScript busca en el prototipo del objeto. Si la propiedad no se encuentra en el prototipo, JavaScript busca en el prototipo del prototipo, y así sucesivamente hasta llegar al prototipo final, que es `null`.\n\n```javascript\nfunction Persona(nombre, apellido) {\r\n  this.nombre = nombre;\r\n  this.apellido = apellido;\r\n}\r\n\r\nPersona.prototype.saludar = function() {\r\n  console.log(`Hola, mi nombre es ${this.nombre} ${this.apellido}`);\r\n};\r\n\r\nconst persona1 = new Persona(\"Carlos\", \"Rodriguez\");\r\npersona1.saludar(); // Output: Hola, mi nombre es Carlos Rodriguez\n```\n\nEn este ejemplo, el método `saludar` se define en el prototipo de la función `Persona`. Todos los objetos creados con la función `Persona` heredarán el método `saludar`.\n\n## HERENCIA\n\nJavaScript utiliza herencia basada en prototipos. Esto significa que los objetos pueden heredar propiedades y métodos de otros objetos. La herencia se implementa utilizando la cadena de prototipos.\n\n```javascript\nfunction Empleado(nombre, apellido, salario) {\r\n  Persona.call(this, nombre, apellido); // Llama al constructor de Persona\r\n  this.salario = salario;\r\n}\r\n\r\nEmpleado.prototype = Object.create(Persona.prototype); // Establece el prototipo de Empleado\r\nEmpleado.prototype.constructor = Empleado; // Restablece el constructor\r\n\r\nEmpleado.prototype.aumentarSalario = function(porcentaje) {\r\n  this.salario *= (1 + porcentaje / 100);\r\n};\r\n\r\nconst empleado1 = new Empleado(\"Ana\", \"Lopez\", 50000);\r\nempleado1.saludar(); // Output: Hola, mi nombre es Ana Lopez\r\nconsole.log(empleado1.salario); // Output: 50000\r\nempleado1.aumentarSalario(10);\r\nconsole.log(empleado1.salario); // Output: 55000\n```\n\nEn este ejemplo, la función `Empleado` hereda de la función `Persona`. Se utiliza `Persona.call(this, nombre, apellido)` para llamar al constructor de `Persona` y establecer las propiedades `nombre` y `apellido`. Luego, se establece el prototipo de `Empleado` para que herede del prototipo de `Persona`. Finalmente, se define un nuevo método `aumentarSalario` en el prototipo de Empleado.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### CREACION DE UN OBJETO LITERAL\n\n```javascript\nconst libro = {\r\n  titulo: \"El Señor de los Anillos\",\r\n  autor: \"J.R.R. Tolkien\",\r\n  anioPublicacion: 1954,\r\n  genero: \"Fantasia\",\r\n  mostrarInformacion: function() {\r\n    console.log(`Titulo: ${this.titulo}, Autor: ${this.autor}, Año: ${this.anioPublicacion}, Genero: ${this.genero}`);\r\n  }\r\n};\r\n\r\nlibro.mostrarInformacion(); // Output: Titulo: El Señor de los Anillos, Autor: J.R.R. Tolkien, Año: 1954, Genero: Fantasia\n```\n\n### CREACION DE UN OBJETO CON UNA CLASE\n\n```javascript\nclass Coche {\r\n  constructor(marca, modelo, anio) {\r\n    this.marca = marca;\r\n    this.modelo = modelo;\r\n    this.anio = anio;\r\n    this.velocidad = 0;\r\n  }\r\n\r\n  acelerar(incremento) {\r\n    this.velocidad += incremento;\r\n    console.log(`Acelerando. Velocidad actual: ${this.velocidad} km/h`);\r\n  }\r\n\r\n  frenar(decremento) {\r\n    this.velocidad -= decremento;\r\n    if (this.velocidad < 0) {\r\n      this.velocidad = 0;\r\n    }\r\n    console.log(`Frenando. Velocidad actual: ${this.velocidad} km/h`);\r\n  }\r\n\r\n  mostrarInformacion() {\r\n    console.log(`Marca: ${this.marca}, Modelo: ${this.modelo}, Año: ${this.anio}`);\r\n  }\r\n}\r\n\r\nconst miCoche = new Coche(\"Toyota\", \"Corolla\", 2020);\r\nmiCoche.mostrarInformacion(); // Output: Marca: Toyota, Modelo: Corolla, Año: 2020\r\nmiCoche.acelerar(50); // Output: Acelerando. Velocidad actual: 50 km/h\r\nmiCoche.frenar(20); // Output: Frenando. Velocidad actual: 30 km/h\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [**MDN Web Docs**: Objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)\n\n* [**You Don't Know JS**: this & Object Prototypes](https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20&%20object%20prototypes/README.md)\n\n* [**Eloquent JavaScript**: Objects](https://eloquentjavascript.net/06_object.html)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-fundamentals/operators",
    "title": "Operadores de Javascript",
    "description": "Exploración detallada de los operadores en JavaScript, incluyendo tipos, precedencia y ejemplos de uso.",
    "content": "Los operadores en JavaScript son símbolos especiales que realizan operaciones sobre uno o más operandos (valores o variables). Estos operadores permiten manipular datos, realizar cálculos, tomar decisiones y controlar el flujo de un programa. Comprender los diferentes tipos de operadores y cómo funcionan es fundamental para escribir código JavaScript eficiente y correcto.\n\n## OBJETIVOS CLAVE\n\n* **Entender los Tipos de Operadores:** Familiarizarse con los operadores aritméticos, de asignación, de comparación, lógicos, bitwise, condicionales y de tipo.\n* **Comprender la Precedencia:** Aprender cómo la precedencia de los operadores afecta el orden de ejecución de las operaciones.\n* **Aplicar Operadores Correctamente:** Utilizar los operadores adecuados para realizar tareas específicas y evitar errores comunes.\n* **Optimizar el Código:** Escribir expresiones claras y eficientes utilizando operadores.\n\n## TIPOS DE OPERADORES\n\n### OPERADORES ARITMETICOS\n\nLos operadores aritméticos se utilizan para realizar cálculos matemáticos.\n\n* `+` **Suma**: Suma dos operandos.\n* `-` **Resta**: Resta el segundo operando del primero.\n* `*` **Multiplicación**: Multiplica dos operandos.\n* `/` **División**: Divide el primer operando por el segundo.\n* `%` **Módulo**: Devuelve el resto de la división del primer operando por el segundo.\n* `**` **Exponenciación**: Eleva el primer operando a la potencia del segundo.\n* `++` **Incremento**: Incrementa el valor de una variable en 1.\n* `--` **Decremento**: Decrementa el valor de una variable en 1.\n\n**Ejemplo:**\n\n```javascript\nlet x = 10;\r\nlet y = 5;\r\n\r\nconsole.log(x + y);   // 15\r\nconsole.log(x - y);   // 5\r\nconsole.log(x * y);   // 50\r\nconsole.log(x / y);   // 2\r\nconsole.log(x % y);   // 0\r\nconsole.log(x ** y);  // 100000\r\n\r\nx++;\r\nconsole.log(x);       // 11\r\n\r\ny--;\r\nconsole.log(y);       // 4\n```\n\n### OPERADORES DE ASIGNACION\n\nLos operadores de asignación se utilizan para asignar valores a las variables.\n\n* `=` **Asignación**: Asigna el valor del operando derecho al operando izquierdo.\n\n* `+=` **Suma y Asignación**: Suma el operando derecho al operando izquierdo y asigna el resultado al operando izquierdo.\n\n* `-=` **Resta y Asignación**: Resta el operando derecho del operando izquierdo y asigna el resultado al operando izquierdo.\n\n* `*=` **Multiplicación y Asignación**: Multiplica el operando izquierdo por el operando derecho y asigna el resultado al operando izquierdo.\n\n* `/=` **División y Asignación**: Divide el operando izquierdo por el operando derecho y asigna el resultado al operando izquierdo.\n\n* `%=` **Módulo y Asignación**: Calcula el módulo del operando izquierdo por el operando derecho y asigna el resultado al operando izquierdo.\n\n* `**=` **Exponenciación y Asignación**: Eleva el operando izquierdo a la potencia del operando derecho y asigna el resultado al operando izquierdo.\n\n**Ejemplo:**\n\n```javascript\nlet x = 10;\r\n\r\nx += 5;  // x = x + 5\r\nconsole.log(x);   // 15\r\n\r\nx -= 3;  // x = x - 3\r\nconsole.log(x);   // 12\r\n\r\nx *= 2;  // x = x * 2\r\nconsole.log(x);   // 24\r\n\r\nx /= 4;  // x = x / 4\r\nconsole.log(x);   // 6\r\n\r\nx %= 5;  // x = x % 5\r\nconsole.log(x);   // 1\r\n\r\nx **= 3; // x = x ** 3\r\nconsole.log(x);   // 1\n```\n\n### OPERADORES DE COMPARACION\n\nLos operadores de comparación se utilizan para comparar dos operandos y devolver un valor booleano (`true` o `false`).\n\n* `==` **Igual**: Devuelve `true` si los operandos son iguales en valor (después de la conversión de tipo, si es necesario).\n\n* `===` **Estrictamente Igual**: Devuelve true si los operandos son iguales en valor y tipo.\n\n* `!=` **No Igual**: Devuelve true si los operandos no son iguales en valor (después de la conversión de tipo, si es necesario).\n\n* `!==` **Estrictamente No Igual**: Devuelve true si los operandos no son iguales en valor o tipo.\n\n* `>` **Mayor Que**: Devuelve true si el operando izquierdo es mayor que el operando derecho.\n\n* `<` **Menor Que**: Devuelve true si el operando izquierdo es menor que el operando derecho.\n\n* `>=` **Mayor o Igual Que**: Devuelve true si el operando izquierdo es mayor o igual que el operando derecho.\n\n* `<=` **Menor o Igual Que**: Devuelve true si el operando izquierdo es menor o igual que el operando derecho.\n\n**Ejemplo**:\n\n```javascript\nlet x = 10;\r\nlet y = \"10\";\r\n\r\nconsole.log(x == y);   // true (comparación de valor después de la conversión de tipo)\r\nconsole.log(x === y);  // false (comparación de valor y tipo)\r\nconsole.log(x != y);   // false (comparación de valor después de la conversión de tipo)\r\nconsole.log(x !== y);  // true (comparación de valor y tipo)\r\n\r\nconsole.log(x > 5);    // true\r\nconsole.log(x < 12);   // true\r\nconsole.log(x >= 10);  // true\r\nconsole.log(x <= 9);   // false\n```\n\n### OPERADORES LOGICOS\n\nLos operadores lógicos se utilizan para combinar o modificar expresiones booleanas.\n\n* `&&` **AND Lógico**: Devuelve true si ambos operandos son true.\n\n* `||` **OR Lógico**: Devuelve true si al menos uno de los operandos es true.\n\n* `!` **NOT Lógico**: Devuelve true si el operando es false, y viceversa.\n\n**Ejemplo**:\n\n```javascript\nlet x = 5;\r\nlet y = 10;\r\n\r\nconsole.log(x > 0 && y < 20);  // true (ambas condiciones son verdaderas)\r\nconsole.log(x > 10 || y < 15); // true (al menos una condición es verdadera)\r\nconsole.log(!(x > 10));        // true (la condición es falsa, por lo que NOT la invierte)\n```\n\n### OPERADORES BITWISE\n\nLos operadores bitwise realizan operaciones a nivel de bits en los operandos.\n\n* `&` **AND Bitwise**: Realiza un AND bit a bit entre dos operandos.\n\n* `|` **OR Bitwise**: Realiza un OR bit a bit entre dos operandos.\n\n* `^` **XOR Bitwise**: Realiza un XOR bit a bit entre dos operandos.\n\n* `~` **NOT Bitwise**: Invierte los bits de un operando.\n\n* `<<` **Desplazamiento a la Izquierda**: Desplaza los bits de un operando a la izquierda.\n\n* `>>` **Desplazamiento a la Derecha**: Desplaza los bits de un operando a la derecha (conservando el signo).\n\n* `>>>` **Desplazamiento a la Derecha sin Signo**: Desplaza los bits de un operando a la derecha (rellenando con ceros).\n\n**Ejemplo**:\n\n```javascript\nlet x = 5;  // 0101 en binario\r\nlet y = 3;  // 0011 en binario\r\n\r\nconsole.log(x & y);   // 0001 (1 en decimal)\r\nconsole.log(x | y);   // 0111 (7 en decimal)\r\nconsole.log(x ^ y);   // 0110 (6 en decimal)\r\nconsole.log(~x);      // 1010 (complemento a dos, -6 en decimal)\r\nconsole.log(x << 1);  // 1010 (10 en decimal)\r\nconsole.log(x >> 1);  // 0010 (2 en decimal)\r\nconsole.log(x >>> 1); // 0010 (2 en decimal)\n```\n\n### OPERADOR CONDICIONAL (TERNARIO)\n\nEl operador condicional (ternario) es una forma abreviada de escribir una sentencia `if...else`.\n\n* `condición ? expresiónSiVerdadera : expresiónSiFalsa`\n\n**Ejemplo**:\n\n```javascript\nlet edad = 20;\r\nlet mensaje = (edad >= 18) ? \"Eres mayor de edad\" : \"Eres menor de edad\";\r\nconsole.log(mensaje);  // \"Eres mayor de edad\"\n```\n\n### OPERADORES DE TIPO\n\nLos operadores de tipo se utilizan para obtener información sobre el tipo de una variable o valor.\n\n* `typeof`: Devuelve una cadena que indica el tipo de un operando.\n\n* `instanceof`: Comprueba si un objeto es una instancia de una clase específica.\n\n**Ejemplo**:\n\n```javascript\nlet x = 10;\r\nlet nombre = \"Juan\";\r\nlet esMayor = true;\r\nlet persona = { nombre: \"Juan\", edad: 30 };\r\n\r\nconsole.log(typeof x);        // \"number\"\r\nconsole.log(typeof nombre);   // \"string\"\r\nconsole.log(typeof esMayor);  // \"boolean\"\r\nconsole.log(typeof persona);  // \"object\"\r\n\r\nconsole.log(persona instanceof Object);  // true\n```\n\n## PRECEDENCIA DE OPERADORES\n\nLa precedencia de operadores determina el orden en que se evalúan las operaciones en una expresión. Los operadores con mayor precedencia se evalúan primero. Es importante conocer la precedencia para asegurar que las expresiones se evalúen correctamente.\n\nA continuación, se muestra una lista de precedencia de operadores de mayor a menor:\n\n* `()` **Paréntesis**\n\n* `++`, `--` **Incremento/Decremento**\n\n* `**` **Exponenciación**\n\n* `*`, `/`, `%` **Multiplicación, División, Módulo**\n\n* `+`, `-` **Suma, Resta**\n\n* `<<`, `>>`, `>>>` **Desplazamiento de Bits**\n\n* `<`, `<=`, `>`, `>=` **Comparación**\n\n* `==`, `!=`, `===`, `!==` **Igualdad**\n\n* `&` **AND Bitwise**\n\n* `^` **XOR Bitwise**\n\n* `|` **OR Bitwise**\n\n* `&&` **AND Lógico**\n\n* `||` **OR Lógico**\n\n* `?:` **Operador Condicional**\n\n* `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `**=` **Asignación**\n\n* `typeof`, `instanceof` **Operadores de Tipo**\n\n**Ejemplo**:\n\n```javascript\nlet resultado = 5 + 10 * 2;  // Primero se realiza la multiplicación (10 * 2 = 20), luego la suma (5 + 20 = 25)\r\nconsole.log(resultado);       // 25\r\n\r\nlet resultado2 = (5 + 10) * 2; // Primero se realiza la suma dentro del paréntesis (5 + 10 = 15), luego la multiplicación (15 * 2 = 30)\r\nconsole.log(resultado2);      // 30\n```\n\n## CONCLUSION\n\nLos operadores son herramientas esenciales en JavaScript para realizar diversas operaciones y manipulaciones de datos. Conocer los diferentes tipos de operadores, su precedencia y cómo aplicarlos correctamente es crucial para escribir código eficiente y sin errores. Al dominar los operadores, los desarrolladores pueden crear aplicaciones más complejas y funcionales.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: Expressions and operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators)\n\n* [W3Schools: JavaScript Operators](https://www.w3schools.com/js/js_operators.asp)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-fundamentals/variables-data-types",
    "title": "Variables y Tipos de Datos en JavaScript",
    "description": "Exploración profunda de las variables y los tipos de datos en JavaScript, incluyendo declaración, asignación, tipos primitivos y objetos.",
    "content": "JavaScript, como cualquier lenguaje de programación, se basa en la manipulación de datos. Para ello, utiliza variables que actúan como contenedores para almacenar información. Comprender cómo declarar variables y los diferentes tipos de datos que pueden contener es fundamental para escribir código JavaScript efectivo y eficiente.\n\n## OBJETIVOS CLAVE\n\n* Entender la diferencia entre `var`, `let` y `const` para la declaración de variables.\n* Conocer los tipos de datos primitivos en JavaScript: `string`, `number`, `boolean`, `null`, `undefined` y `symbol`.\n* Comprender el tipo de dato `object` y cómo se utiliza para estructuras de datos más complejas.\n* Aprender sobre la conversión de tipos (coerción) en JavaScript.\n\n## DECLARACION DE VARIABLES\n\nEn JavaScript, las variables se declaran utilizando las palabras clave `var`, `let` o `const`. Cada una tiene un comportamiento diferente en cuanto a su alcance (scope) y mutabilidad.\n\n### VAR\n\n* `var` fue la forma original de declarar variables en JavaScript.\n* Tiene un alcance de función (function scope) o global si se declara fuera de una función.\n* Permite la redeclaración y reasignación.\n\n```javascript\nvar x = 10;\r\n\r\nif (true) {\r\n  var x = 20;  // ¡Misma variable!\r\n  console.log(x);  // Imprime 20\r\n}\r\n\r\nconsole.log(x);  // Imprime 20 (¡cambió fuera del bloque!)\n```\n\n### LET\n\n* let se introdujo en ECMAScript 2015 (ES6) para solucionar los problemas de alcance de var.\n\n* Tiene un alcance de bloque (block scope), lo que significa que solo es accesible dentro del bloque en el que se define (por ejemplo, dentro de un `if`, `for`, o un bloque `{}`).\n\n* Permite la reasignación, pero no la redeclaración dentro del mismo alcance.\n\n```javascript\nlet y = 10;\r\n\r\nif (true) {\r\n  let y = 20;  // ¡Variable diferente!\r\n  console.log(y);  // Imprime 20\r\n}\r\n\r\nconsole.log(y);  // Imprime 10 (no cambió)\n```\n\n### CONST\n\n* `const` también se introdujo en ES6.\n\n* También tiene un alcance de bloque.\n\n* Se utiliza para declarar constantes, es decir, variables cuyo valor no debe cambiar después de la asignación inicial.\n\n* **Importante**: `const` no significa que el valor sea inmutable. Si const se usa para un objeto o un array, las propiedades del objeto o los elementos del array pueden modificarse, pero no se puede reasignar la variable a un nuevo objeto o array.\n\n```javascript\nconst z = 10;\r\n// z = 20;  // Error: Assignment to constant variable.\r\n\r\nconst obj = { nombre: \"Juan\" };\r\nobj.nombre = \"Pedro\";  // ¡Esto es válido!\r\nconsole.log(obj.nombre); // Imprime \"Pedro\"\r\n\r\n// obj = { nombre: \"Maria\" }; // Error: Assignment to constant variable.\n```\n\n## TIPOS DE DATOS PRIMITIVOS\n\nJavaScript tiene siete tipos de datos primitivos:\n\n### 1. String\n\nRepresenta datos textuales. Se delimita con comillas simples (`'...'`) o dobles (`\"...\"`).\n\n```javascript\nlet nombre = \"Juan Perez\";\r\nlet saludo = 'Hola mundo';\n```\n\n### 2. Number\n\nRepresenta valores numéricos, incluyendo enteros y números de punto flotante.\n\n```javascript\nlet edad = 30;\r\nlet precio = 99.99;\n```\n\n### 3. Boolean\n\nRepresenta un valor de verdad, que puede ser true o false.\n\n```javascript\nlet esMayorDeEdad = true;\r\nlet estaLogueado = false;\n```\n\n### 4. Null\n\nRepresenta la ausencia intencional de un valor. Es un valor asignado explícitamente.\n\n```javascript\nlet usuario = null; // Usuario no encontrado\n```\n\n### 5. Undefined\n\nRepresenta un valor que no ha sido asignado. Una variable declarada pero no inicializada tiene el valor undefined.\n\n```javascript\nlet direccion;\r\nconsole.log(direccion); // Imprime undefined\n```\n\n### 6. Symbol (Introducido en ES6)\n\nRepresenta un identificador único e inmutable. Se utiliza principalmente para añadir claves de propiedad únicas a los objetos.\n\n```javascript\nconst idUnico = Symbol(\"id\");\r\nconst obj = {\r\n  [idUnico]: 12345\r\n};\r\n\r\nconsole.log(obj[idUnico]); // Imprime 12345\n```\n\n### 7. BigInt: (Introducido en ES2020)\n\nRepresenta enteros de precisión arbitraria. Se utiliza para trabajar con números enteros que están fuera del rango seguro de `Number`.\n\n```javascript\nconst numeroGrande = 9007199254740991n;\n```\n\n## TIPO DE DATO OBJECT\n\nEl tipo de dato `object` es una colección de propiedades, donde cada propiedad tiene un nombre (clave) y un valor. Los objetos son fundamentales en JavaScript y se utilizan para representar estructuras de datos más complejas.\n\n```javascript\nlet persona = {\r\n  nombre: \"Ana\",\r\n  edad: 25,\r\n  ciudad: \"Madrid\"\r\n};\r\n\r\nconsole.log(persona.nombre); // Imprime \"Ana\"\r\nconsole.log(persona[\"edad\"]); // Imprime 25\n```\n\nLos arrays también son un tipo de objeto en JavaScript.\n\n```javascript\nlet colores = [\"rojo\", \"verde\", \"azul\"];\r\n\r\nconsole.log(colores[0]); // Imprime \"rojo\"\n```\n\n## CONVERSION DE TIPOS (COERCION)\n\nJavaScript es un lenguaje de tipado dinámico, lo que significa que el tipo de una variable puede cambiar durante la ejecución del programa. JavaScript también realiza la conversión automática de tipos (coerción) en ciertas operaciones.\n\n### EJEMPLOS DE COERCION\n\n* **Suma con strings**: Si se suma un número con un string, JavaScript convierte el número a string y realiza la concatenación.\n\n  ```javascript\n  let resultado = \"El resultado es: \" + 10 + 20;\r\n  console.log(resultado); // Imprime \"El resultado es: 1020\"\n  ```\n\n* **Operaciones booleanas**: En contextos booleanos (como en un `if` o un bucle), JavaScript convierte automáticamente ciertos valores a `true` o `false`. Los valores \"falsy\" son: `0`, `null`, `undefined`, `NaN`, `\"\"` (string vacío) y `false`. Todos los demás valores se consideran \"truthy\".\n\n```javascript\nif (\"\") {\r\n  console.log(\"Esto no se imprimirá\");\r\n}\r\n\r\nif (10) {\r\n  console.log(\"Esto se imprimirá\");\r\n}\n```\n\n## CONVERSION EXPLICITA\n\nEs posible realizar la conversión de tipos de forma explícita utilizando funciones como:\n\n* `Number()`: Convierte un valor a número.\n\n* `String()`: Convierte un valor a string.\n\n* `Boolean()`: Convierte un valor a booleano.\n\n* `parseInt()`: Convierte un string a un entero.\n\n* `parseFloat()`: Convierte un string a un número de punto flotante.\n\n```javascript\nlet numeroString = \"42\";\r\nlet numero = Number(numeroString);\r\nconsole.log(typeof numero); // Imprime \"number\"\r\n\r\nlet valorBooleano = Boolean(0);\r\nconsole.log(valorBooleano); // Imprime false\n```\n\n## CONCLUSION\n\nComprender las variables y los tipos de datos en JavaScript es esencial para escribir código robusto y predecible. Utilizar `let` y `const` en lugar de `var` ayuda a evitar errores relacionados con el alcance de las variables. Conocer los tipos de datos primitivos y cómo JavaScript realiza la conversión de tipos permite escribir código más eficiente y evitar sorpresas inesperadas.\n\n## FUENTES DEL DOCUMENTO\n\n[MDN Web Docs: JavaScript Data types and data structures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures)\n\n[MDN Web Docs: var](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var)\n\n[MDN Web Docs: let](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)\n\n[MDN Web Docs: const](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-testing",
    "title": "Testing en Javascript",
    "description": "Introducción y guía completa sobre testing en Javascript, incluyendo tipos de pruebas, frameworks populares y mejores prácticas.",
    "content": "El testing en Javascript es un componente crucial del desarrollo de software moderno. Asegura que el código funcione como se espera, reduce la probabilidad de errores en producción y facilita la refactorización y el mantenimiento a largo plazo. Este documento proporciona una visión completa sobre el testing en Javascript, cubriendo los tipos de pruebas, los frameworks más populares y las mejores prácticas.\n\n## OBJETIVOS CLAVE\n\n1. **Asegurar la calidad del código:** Verificar que el código funcione correctamente y cumpla con los requisitos especificados.\n2. **Detectar errores tempranamente:** Identificar y corregir errores antes de que lleguen a producción, reduciendo costos y riesgos.\n3. **Facilitar la refactorización:** Permitir cambios en el código con la confianza de que no se introducirán nuevos errores.\n4. **Documentar el comportamiento del código:** Los tests sirven como documentación viva del comportamiento esperado del código.\n5. **Mejorar la colaboración:** Facilitar la comprensión del código por parte de otros desarrolladores.\n\n## TIPOS DE PRUEBAS\n\nExisten varios tipos de pruebas que se pueden aplicar en Javascript, cada uno con un enfoque y propósito diferente:\n\n### PRUEBAS UNITARIAS\n\nLas pruebas unitarias verifican el correcto funcionamiento de unidades individuales de código, como funciones o clases. El objetivo es aislar cada unidad y probarla de forma independiente.\n\n**Ejemplo:**\n\n```javascript\n// Función a probar\r\nfunction sum(a, b) {\r\n  return a + b;\r\n}\r\n\r\n// Prueba unitaria con Jest\r\ntest('sums two numbers', () => {\r\n  expect(sum(1, 2)).toBe(3);\r\n});\n```\n\n### PRUEBAS DE INTEGRACION\n\nLas pruebas de integración verifican la interacción entre diferentes unidades o componentes del sistema. El objetivo es asegurar que las diferentes partes del código trabajen juntas correctamente.\n\n**Ejemplo:**\n\n```javascript\n// Módulo de autenticación\r\nconst auth = {\r\n  login: (username, password) => {\r\n    if (username === 'admin' && password === 'password') {\r\n      return { success: true, token: 'abc123xyz' };\r\n    }\r\n    return { success: false, error: 'Invalid credentials' };\r\n  }\r\n};\r\n\r\n// Prueba de integración\r\ntest('authenticates user with valid credentials', () => {\r\n  const result = auth.login('admin', 'password');\r\n  expect(result.success).toBe(true);\r\n  expect(result.token).toBe('abc123xyz');\r\n});\n```\n\n### PRUEBAS END-TO-END (E2E)\n\nLas pruebas E2E simulan el comportamiento del usuario real en la aplicación. Verifican que la aplicación funcione correctamente de principio a fin, incluyendo la interfaz de usuario, la lógica del backend y la integración con bases de datos y otros servicios.\n\n**Ejemplo (con Cypress):**\n\n```javascript\n// Prueba E2E con Cypress\r\ndescribe('Login Form', () => {\r\n  it('should successfully log in', () => {\r\n    cy.visit('/login');\r\n    cy.get('input[name=\"username\"]').type('admin');\r\n    cy.get('input[name=\"password\"]').type('password');\r\n    cy.get('button[type=\"submit\"]').click();\r\n    cy.url().should('include', '/dashboard');\r\n  });\r\n});\n```\n\n## FRAMEWORKS DE TESTING POPULARES\n\nExisten varios frameworks de testing disponibles para Javascript, cada uno con sus propias características y ventajas. Algunos de los más populares incluyen:\n\n### JEST\n\nJest es un framework de testing desarrollado por Facebook, conocido por su facilidad de uso, configuración mínima y características integradas como la cobertura de código y los mocks.\n\n**Características:**\n\n* **Fácil de usar:** Configuración sencilla y API intuitiva.\n* **Rendimiento:** Ejecución rápida de pruebas en paralelo.\n* **Características integradas:** Cobertura de código, mocks y snapshots.\n* **Comunidad:** Amplia comunidad y soporte.\n\n**Ejemplo:**\n\n```javascript\n// Instalación\r\n// npm install --save-dev jest\r\n\r\n// Archivo de prueba (ejemplo.test.js)\r\ntest('adds 1 + 2 to equal 3', () => {\r\n  expect(1 + 2).toBe(3);\r\n});\r\n\r\n// Ejecución\r\n// npx jest\n```\n\n### MOCHA\n\nMocha es un framework de testing flexible y extensible que permite utilizar diferentes librerías de aserción y mocks.\n\n**Características:**\n\n* **Flexibilidad:** Permite elegir las librerías de aserción y mocks.\n* **Extensibilidad:** Soporte para plugins y reporters personalizados.\n* **Comunidad:** Amplia comunidad y soporte.\n\n**Ejemplo:**\n\n```javascript\n// Instalación\r\n// npm install --save-dev mocha chai\r\n\r\n// Archivo de prueba (ejemplo.test.js)\r\nconst assert = require('chai').assert;\r\n\r\ndescribe('Array', () => {\r\n  describe('#indexOf()', () => {\r\n    it('should return -1 when the value is not present', () => {\r\n      assert.equal([1, 2, 3].indexOf(4), -1);\r\n    });\r\n  });\r\n});\r\n\r\n// Ejecución\r\n// npx mocha\n```\n\n### CYPRESS\n\nCypress es un framework de testing E2E diseñado específicamente para aplicaciones web modernas. Ofrece una experiencia de desarrollo intuitiva y características avanzadas como la grabación de videos y la depuración en tiempo real.\n\n**Características:**\n\n* **Fácil de usar:** API intuitiva y documentación completa.\n* **Depuración:** Depuración en tiempo real con acceso al DOM.\n* **Grabación de videos:** Grabación automática de videos de las pruebas.\n* **Viajes en el tiempo:** Permite retroceder en el tiempo para ver el estado de la aplicación en cada paso de la prueba.\n\n**Ejemplo:**\n\n```javascript\n// Instalación\r\n// npm install --save-dev cypress\r\n\r\n// Archivo de prueba (ejemplo.spec.js)\r\ndescribe('My First Test', () => {\r\n  it('Visits the Kitchen Sink', () => {\r\n    cy.visit('https://example.cypress.io');\r\n    cy.contains('type').click();\r\n    cy.url().should('include', '/commands/actions');\r\n  });\r\n});\r\n\r\n// Ejecución\r\n// npx cypress open\n```\n\n### SELENIUM\n\nSelenium es una herramienta de automatización de navegadores web que se utiliza para pruebas E2E. Permite simular la interacción del usuario con la aplicación en diferentes navegadores y plataformas.\n\n**Características:**\n\n* **Soporte para múltiples navegadores:** Chrome, Firefox, Safari, Edge, etc.\n* **Flexibilidad:** Permite escribir pruebas en diferentes lenguajes de programación (Java, Python, Javascript, etc.).\n* **Comunidad:** Amplia comunidad y soporte.\n\n**Ejemplo (con Javascript y WebDriver):**\n\n```javascript\n// Instalación\r\n// npm install selenium-webdriver chromedriver\r\n\r\n// Archivo de prueba (ejemplo.test.js)\r\nconst { Builder, By, Key, until } = require('selenium-webdriver');\r\n\r\n(async function example() {\r\n  let driver = await new Builder().forBrowser('chrome').build();\r\n  try {\r\n    await driver.get('https://www.google.com');\r\n    await driver.findElement(By.name('q')).sendKeys('Selenium', Key.RETURN);\r\n    await driver.wait(until.titleIs('Selenium - Google Search'), 1000);\r\n  } finally {\r\n    await driver.quit();\r\n  }\r\n})();\n```\n\n## MEJORES PRACTICAS\n\n1. **Escribir pruebas claras y concisas:** Las pruebas deben ser fáciles de entender y mantener.\n2. **Probar los casos de borde:** Asegurarse de que el código maneje correctamente los casos extremos y las entradas inválidas.\n3. **Utilizar mocks y stubs:** Aislar las unidades de código y simular las dependencias externas.\n4. **Ejecutar las pruebas automáticamente:** Integrar las pruebas en el proceso de desarrollo y ejecutarlas automáticamente en cada cambio de código.\n5. **Medir la cobertura de código:** Utilizar herramientas de cobertura de código para identificar las áreas del código que no están cubiertas por las pruebas.\n6. **Refactorizar las pruebas:** Mantener las pruebas actualizadas y refactorizarlas cuando sea necesario.\n\n## DESARROLLO DEL TEMA EN CUESTION\n\n### EJEMPLO DE PRUEBAS UNITARIAS CON JEST\n\nSupongamos que tenemos una función que calcula el factorial de un número:\n\n```javascript\n// factorial.js\r\nfunction factorial(n) {\r\n  if (n === 0) {\r\n    return 1;\r\n  }\r\n  return n * factorial(n - 1);\r\n}\r\n\r\nmodule.exports = factorial;\n```\n\nPodemos escribir pruebas unitarias para esta función utilizando Jest:\n\n```javascript\n// factorial.test.js\r\nconst factorial = require('./factorial');\r\n\r\ndescribe('factorial', () => {\r\n  it('should return 1 for 0', () => {\r\n    expect(factorial(0)).toBe(1);\r\n  });\r\n\r\n  it('should return 1 for 1', () => {\r\n    expect(factorial(1)).toBe(1);\r\n  });\r\n\r\n  it('should return 120 for 5', () => {\r\n    expect(factorial(5)).toBe(120);\r\n  });\r\n\r\n  it('should throw an error for negative numbers', () => {\r\n    expect(() => factorial(-1)).toThrow();\r\n  });\r\n});\n```\n\n### EJEMPLO DE PRUEBAS DE INTEGRACION CON MOCHA Y CHAI\n\nSupongamos que tenemos un sistema de gestión de usuarios con las siguientes funciones:\n\n* Crear un usuario.\n* Obtener un usuario por ID.\n* Actualizar un usuario.\n* Eliminar un usuario.\n\nPodemos escribir pruebas de integración para verificar que estas funciones trabajen juntas correctamente:\n\n```javascript\n// user-manager.js\r\nconst users = {};\r\nlet nextId = 1;\r\n\r\nconst userManager = {\r\n  createUser: (name, email) => {\r\n    const id = nextId++;\r\n    users[id] = { id, name, email };\r\n    return users[id];\r\n  },\r\n  getUser: (id) => {\r\n    return users[id];\r\n  },\r\n  updateUser: (id, name, email) => {\r\n    if (!users[id]) {\r\n      return null;\r\n    }\r\n    users[id] = { id, name, email };\r\n    return users[id];\r\n  },\r\n  deleteUser: (id) => {\r\n    delete users[id];\r\n  }\r\n};\r\n\r\nmodule.exports = userManager;\n```\n\n```javascript\n// user-manager.test.js\r\nconst assert = require('chai').assert;\r\nconst userManager = require('./user-manager');\r\n\r\ndescribe('User Manager', () => {\r\n  it('should create, get, update, and delete a user', () => {\r\n    // Create a user\r\n    const user1 = userManager.createUser('John Doe', 'john.doe@example.com');\r\n    assert.isObject(user1, 'User should be an object');\r\n    assert.equal(user1.name, 'John Doe', 'Name should be John Doe');\r\n    assert.equal(user1.email, 'john.doe@example.com', 'Email should be john.doe@example.com');\r\n\r\n    // Get the user\r\n    const user2 = userManager.getUser(user1.id);\r\n    assert.deepEqual(user1, user2, 'Users should be equal');\r\n\r\n    // Update the user\r\n    const user3 = userManager.updateUser(user1.id, 'Jane Doe', 'jane.doe@example.com');\r\n    assert.equal(user3.name, 'Jane Doe', 'Name should be Jane Doe');\r\n    assert.equal(user3.email, 'jane.doe@example.com', 'Email should be jane.doe@example.com');\r\n\r\n    // Delete the user\r\n    userManager.deleteUser(user1.id);\r\n    const user4 = userManager.getUser(user1.id);\r\n    assert.isUndefined(user4, 'User should be undefined');\r\n  });\r\n});\n```\n\n### EJEMPLO DE PRUEBAS E2E CON CYPRESS\n\nSupongamos que tenemos una aplicación web con un formulario de registro:\n\n```html\n<!-- index.html -->\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Registration Form</title>\r\n</head>\r\n<body>\r\n  <h1>Registration Form</h1>\r\n  <form>\r\n    <label for=\"name\">Name:</label><br>\r\n    <input type=\"text\" id=\"name\" name=\"name\"><br><br>\r\n    <label for=\"email\">Email:</label><br>\r\n    <input type=\"email\" id=\"email\" name=\"email\"><br><br>\r\n    <button type=\"submit\">Register</button>\r\n  </form>\r\n</body>\r\n</html>\n```\n\nPodemos escribir pruebas E2E para verificar que el formulario de registro funcione correctamente:\n\n```javascript\n// cypress/integration/registration.spec.js\r\ndescribe('Registration Form', () => {\r\n  it('should successfully register a user', () => {\r\n    cy.visit('index.html');\r\n    cy.get('input[name=\"name\"]').type('John Doe');\r\n    cy.get('input[name=\"email\"]').type('john.doe@example.com');\r\n    cy.get('button[type=\"submit\"]').click();\r\n    // Add assertions to verify successful registration\r\n    // For example, check for a success message or redirect to a new page\r\n  });\r\n});\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [Jest Documentation](https://jestjs.io/docs/getting-started)\n* [Mocha Documentation](https://mochajs.org/)\n* [Cypress Documentation](https://docs.cypress.io/)\n* [Selenium Documentation](https://www.selenium.dev/documentation/)\n* [Testing JavaScript with Jest](https://www.valentinog.com/blog/jest/)\n* [Introduction to End-to-End Testing with Cypress](https://www.digitalocean.com/community/tutorials/introduction-to-end-to-end-testing-with-cypress)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-testing/jest",
    "title": "Jest",
    "description": "Marco de pruebas de JavaScript con un enfoque en la simplicidad y la confianza.",
    "content": "Jest es un marco de pruebas de JavaScript desarrollado por Facebook, diseñado para asegurar la corrección de cualquier base de código de JavaScript. Es especialmente popular en proyectos de React, pero puede ser utilizado con cualquier biblioteca o marco de JavaScript. Jest se distingue por su simplicidad, configuración mínima y un conjunto de características robustas que facilitan la escritura, ejecución y depuración de pruebas.\n\n## OBJETIVOS CLAVE SOBRE JEST\n\n* **Simplicidad:** Proporcionar una experiencia de prueba directa y fácil de usar.\n* **Integración:** Funcionar sin problemas con proyectos de React, así como con otras bibliotecas y marcos de JavaScript.\n* **Aislamiento:** Ejecutar pruebas en paralelo para mejorar la velocidad y evitar dependencias entre pruebas.\n* **Cobertura:** Ofrecer informes de cobertura de código integrados para identificar áreas no probadas.\n* **Mocks y Spies:** Facilitar la simulación de dependencias y el seguimiento de interacciones para pruebas más controladas.\n\n## DESARROLLO DE JEST\n\n### INSTALACION\n\nPara instalar Jest, puedes usar npm o yarn:\n\n```bash\nnpm install --save-dev jest\r\n# o\r\nyarn add --dev jest\n```\n\n### CONFIGURACION BASICA\n\nDespués de la instalación, puedes configurar Jest en tu `package.json`:\n\n```json\n{\r\n  \"scripts\": {\r\n    \"test\": \"jest\"\r\n  }\r\n}\n```\n\nEsto te permite ejecutar tus pruebas con el comando `npm test` o `yarn test`.\n\n### ESTRUCTURA DE UN ARCHIVO DE PRUEBA\n\nUn archivo de prueba en Jest típicamente tiene la extensión `.test.js` o `.spec.js`. Aquí tienes un ejemplo básico:\n\n```javascript\n// sum.js\r\nfunction sum(a, b) {\r\n  return a + b;\r\n}\r\n\r\nmodule.exports = sum;\n```\n\n```javascript\n// sum.test.js\r\nconst sum = require('./sum');\r\n\r\ntest('adds 1 + 2 to equal 3', () => {\r\n  expect(sum(1, 2)).toBe(3);\r\n});\n```\n\n### CONCEPTOS CLAVE\n\n* **`describe(name, fn)`:** Crea un bloque que agrupa varias pruebas relacionadas.\n* **`test(name, fn)` o `it(name, fn)`:** Define una prueba individual.\n* **`expect(value)`:** Inicia una aserción, que es una declaración sobre el valor que se está probando.\n* **Matchers:** Funciones que se utilizan con `expect` para verificar diferentes condiciones (ej., `toBe`, `toEqual`, `toBeNull`).\n\n### EJEMPLOS DE IMPLEMENTACION\n\n#### PRUEBAS DE COMPONENTES DE REACT\n\nJest es ideal para probar componentes de React. Aquí tienes un ejemplo usando `react-test-renderer`:\n\n```javascript\nimport React from 'react';\r\nimport renderer from 'react-test-renderer';\r\nimport MyComponent from './MyComponent';\r\n\r\ntest('MyComponent renders correctly', () => {\r\n  const tree = renderer\r\n    .create(<MyComponent name=\"Jest\" />)\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\n```\n\nEste ejemplo utiliza `toMatchSnapshot` para comparar el componente renderizado con una \"snapshot\" guardada, lo que ayuda a detectar cambios inesperados en la interfaz de usuario.\n\n#### MOCKS Y SPIES\n\nJest facilita la simulación de funciones y módulos para aislar el código que estás probando.\n\n```javascript\n// api.js\r\nexport const fetchData = () => {\r\n  return fetch('/api/data')\r\n    .then(response => response.json());\r\n};\n```\n\n```javascript\n// api.test.js\r\nimport { fetchData } from './api';\r\n\r\nglobal.fetch = jest.fn(() =>\r\n  Promise.resolve({\r\n    json: () => Promise.resolve({ data: 'test data' }),\r\n  })\r\n);\r\n\r\ntest('fetchData returns data', async () => {\r\n  const data = await fetchData();\r\n  expect(data).toEqual({ data: 'test data' });\r\n  expect(fetch).toHaveBeenCalledTimes(1);\r\n});\n```\n\nEn este ejemplo, `jest.fn()` simula la función `fetch` para que no haga una llamada real a la API. Esto permite probar la lógica de `fetchData` sin depender de un servidor en funcionamiento.\n\n#### PRUEBAS ASINCRONAS\n\nJest soporta pruebas asíncronas utilizando `async/await` o promesas.\n\n```javascript\n// async.js\r\nexport const fetchData = async () => {\r\n  const response = await fetch('/api/data');\r\n  const data = await response.json();\r\n  return data;\r\n};\n```\n\n```javascript\n// async.test.js\r\nimport { fetchData } from './async';\r\n\r\ntest('fetchData returns data', async () => {\r\n  const data = await fetchData();\r\n  expect(data).toBeDefined();\r\n});\n```\n\nEl uso de `async/await` hace que las pruebas asíncronas sean más legibles y fáciles de escribir.\n\n### CARACTERISTICAS ADICIONALES\n\n* **Cobertura de Código:** Jest puede generar informes de cobertura de código para mostrar qué partes de tu código están cubiertas por pruebas.\n* **Watch Mode:** Jest tiene un \"watch mode\" que vuelve a ejecutar las pruebas automáticamente cuando cambian los archivos.\n* **Paralelización:** Jest ejecuta pruebas en paralelo para reducir el tiempo total de ejecución.\n\n## CONCLUSION\n\nJest es una herramienta poderosa y versátil para pruebas de JavaScript. Su simplicidad, integración con React y características robustas lo convierten en una excelente opción para cualquier proyecto de JavaScript. Al adoptar Jest, puedes mejorar la calidad de tu código, reducir errores y aumentar la confianza en tus implementaciones.\n\n## FUENTES DEL DOCUMENTO\n\n* [Jest Official Documentation](https://jestjs.io/docs/getting-started)\n* [React Testing Tutorial](https://reactjs.org/docs/testing-recipes.html)\n* [Kent C. Dodds - Testing JavaScript](https://kentcdodds.com/blog/testing-javascript)\n\n```\n```\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-testing/mocha-chai",
    "title": "Mocha y Chai",
    "description": "Guía completa sobre cómo utilizar Mocha y Chai para realizar pruebas en JavaScript.",
    "content": "Mocha y Chai son dos bibliotecas de JavaScript que se utilizan comúnmente para realizar pruebas automatizadas. Mocha es un framework de pruebas que proporciona la estructura y las herramientas necesarias para ejecutar pruebas, mientras que Chai es una biblioteca de aserciones que ofrece una variedad de métodos para verificar que el código se comporta como se espera.\n\n## OBJETIVOS CLAVE\n\n* **Comprender los fundamentos de Mocha y Chai:** Aprender qué son Mocha y Chai, y cómo se complementan entre sí para facilitar las pruebas en JavaScript.\n* **Configurar un entorno de pruebas:** Configurar un proyecto de JavaScript para utilizar Mocha y Chai, incluyendo la instalación de las bibliotecas y la creación de archivos de prueba.\n* **Escribir pruebas unitarias con Mocha y Chai:** Aprender a escribir pruebas unitarias efectivas utilizando las funciones de Mocha para estructurar las pruebas y las aserciones de Chai para verificar el comportamiento del código.\n* **Utilizar diferentes estilos de aserción de Chai:** Explorar los diferentes estilos de aserción que ofrece Chai (assert, expect, should) y aprender cuándo y cómo utilizar cada uno de ellos.\n* **Integrar Mocha y Chai en un flujo de trabajo de desarrollo:** Aprender a integrar las pruebas de Mocha y Chai en un flujo de trabajo de desarrollo continuo, utilizando herramientas como npm scripts y hooks de Git.\n\n## ¿QUE ES MOCHA?\n\nMocha es un framework de pruebas de JavaScript que se ejecuta en Node.js y en el navegador. Proporciona una estructura para organizar y ejecutar pruebas, así como una variedad de opciones de configuración y reporte.\n\n**Características principales de Mocha:**\n\n* **Soporte para pruebas asíncronas:** Mocha facilita la prueba de código asíncrono utilizando callbacks, promesas y async/await.\n* **Flexibilidad:** Mocha es altamente configurable y se puede integrar con una variedad de bibliotecas de aserciones, como Chai, y herramientas de cobertura de código, como Istanbul.\n* **Reportes:** Mocha ofrece una variedad de opciones de reporte, incluyendo reportes en la consola, archivos HTML y servicios de integración continua.\n* **Extensibilidad:** Mocha se puede extender con plugins y hooks para personalizar el comportamiento del framework.\n\n## ¿QUE ES CHAI?\n\nChai es una biblioteca de aserciones de JavaScript que se puede utilizar con Mocha y otros frameworks de pruebas. Proporciona una variedad de métodos para expresar aserciones de manera clara y concisa.\n\n**Características principales de Chai:**\n\n* **Múltiples estilos de aserción:** Chai ofrece tres estilos de aserción: `assert`, `expect` y `should`. Cada estilo tiene sus propias ventajas y desventajas, y se puede elegir el estilo que mejor se adapte a las preferencias personales y al estilo del proyecto.\n* **Extensibilidad:** Chai se puede extender con plugins para agregar nuevas aserciones y personalizar el comportamiento de la biblioteca.\n* **Soporte para pruebas de comportamiento (BDD):** Chai se integra bien con el estilo de desarrollo basado en el comportamiento (BDD), que se centra en describir el comportamiento esperado del código en lugar de los detalles de implementación.\n\n## CONFIGURACION DE UN ENTORNO DE PRUEBAS\n\nPara comenzar a utilizar Mocha y Chai, primero debemos configurar un entorno de pruebas. Esto implica instalar las bibliotecas necesarias y crear un archivo de configuración para Mocha.\n\n**1. Instalación de Mocha y Chai:**\n\nPodemos instalar Mocha y Chai utilizando npm o yarn:\n\n```bash\nnpm install --save-dev mocha chai\n```\n\no\n\n```bash\nyarn add --dev mocha chai\n```\n\n**2. Creación de un archivo de prueba:**\n\nCreamos un archivo de prueba, por ejemplo, `test/test.js`, donde escribiremos nuestras pruebas.\n\n**3. Configuración de Mocha:**\n\nPodemos configurar Mocha utilizando un archivo `mocha.opts` o en la línea de comandos. Por ejemplo, para ejecutar las pruebas en el directorio `test` utilizando el reportero `spec`, podemos agregar la siguiente línea a nuestro archivo `package.json`:\n\n```json\n{\r\n  \"scripts\": {\r\n    \"test\": \"mocha test/**/*.js --reporter spec\"\r\n  }\r\n}\n```\n\n## ESCRITURA DE PRUEBAS UNITARIAS CON MOCHA Y CHAI\n\nUna vez que hemos configurado nuestro entorno de pruebas, podemos comenzar a escribir pruebas unitarias. Una prueba unitaria verifica que una unidad de código (por ejemplo, una función o un método) se comporta como se espera.\n\n**Estructura básica de una prueba con Mocha y Chai:**\n\n```javascript\nconst assert = require('chai').assert;\r\n\r\ndescribe('Nombre del módulo o componente', function() {\r\n  it('Descripción de la prueba', function() {\r\n    // Código para ejecutar la prueba\r\n    // Aserciones para verificar el resultado\r\n  });\r\n});\n```\n\n* `describe`: Define un conjunto de pruebas relacionadas.\n* `it`: Define una prueba individual.\n* `assert`: Proporciona métodos para realizar aserciones.\n\n**Ejemplo:**\n\nSupongamos que tenemos una función llamada `sumar` que toma dos números como argumentos y devuelve su suma:\n\n```javascript\nfunction sumar(a, b) {\r\n  return a + b;\r\n}\n```\n\nPodemos escribir una prueba unitaria para verificar que la función `sumar` funciona correctamente:\n\n```javascript\nconst assert = require('chai').assert;\r\nconst sumar = require('../src/sumar'); // Importa la función a probar\r\n\r\ndescribe('Sumar', function() {\r\n  it('Debería retornar la suma de dos números', function() {\r\n    assert.equal(sumar(2, 3), 5, '2 + 3 debería ser igual a 5');\r\n  });\r\n});\n```\n\n## ESTILOS DE ASERCION DE CHAI\n\nChai ofrece tres estilos de aserción: `assert`, `expect` y `should`.\n\n* **Assert:** El estilo `assert` es el estilo más tradicional y se basa en funciones.\n\n  ```javascript\n  const assert = require('chai').assert;\r\n  assert.equal(3, '3', '== coerces values to strings');\r\n  assert.strictEqual(3, 3, '=== compares types and values');\n  ```\n* **Expect:** El estilo `expect` proporciona una sintaxis más legible y encadenable.\n\n  ```javascript\n  const expect = require('chai').expect;\r\n  expect(1).to.equal(1);\r\n  expect('foo').to.be.a('string');\r\n  expect({ a: 1 }).to.have.property('a');\r\n  expect([1, 2, 3]).to.include(2);\n  ```\n* **Should:** El estilo `should` modifica el prototipo de `Object` para agregar la propiedad `should`.\n\n  ```javascript\n  require('chai').should();\r\n  (1).should.equal(1);\r\n  ('foo').should.be.a('string');\r\n  ({ a: 1 }).should.have.property('a');\r\n  ([1, 2, 3]).should.include(2);\n  ```\n\n## INTEGRACION DE MOCHA Y CHAI EN UN FLUJO DE TRABAJO DE DESARROLLO\n\nPara integrar Mocha y Chai en un flujo de trabajo de desarrollo continuo, podemos utilizar herramientas como npm scripts y hooks de Git.\n\n* **NPM Scripts:** Podemos definir scripts en nuestro archivo `package.json` para ejecutar las pruebas automáticamente. Por ejemplo:\n\n  ```json\n  {\r\n    \"scripts\": {\r\n      \"test\": \"mocha test/**/*.js --reporter spec\",\r\n      \"test:watch\": \"mocha test/**/*.js --reporter spec --watch\"\r\n    }\r\n  }\n  ```\n\n  Luego podemos ejecutar las pruebas con `npm test` o `npm run test:watch` para ejecutar las pruebas automáticamente cada vez que se modifica un archivo.\n* **Hooks de Git:** Podemos utilizar hooks de Git para ejecutar las pruebas automáticamente antes de realizar un commit o un push. Esto nos ayuda a garantizar que el código que estamos enviando al repositorio cumple con los estándares de calidad.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: PRUEBA DE UNA FUNCION DE VALIDACION\n\nSupongamos que tenemos una función que valida si una dirección de correo electrónico es válida:\n\n```javascript\nfunction validarEmail(email) {\r\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return regex.test(email);\r\n}\n```\n\nPodemos escribir pruebas unitarias para verificar que la función `validarEmail` funciona correctamente:\n\n```javascript\nconst assert = require('chai').assert;\r\nconst validarEmail = require('../src/validarEmail');\r\n\r\ndescribe('ValidarEmail', function() {\r\n  it('Debería retornar true para una dirección de correo electrónico válida', function() {\r\n    assert.equal(validarEmail('test@example.com'), true);\r\n  });\r\n\r\n  it('Debería retornar false para una dirección de correo electrónico inválida', function() {\r\n    assert.equal(validarEmail('test@example'), false);\r\n    assert.equal(validarEmail('testexample.com'), false);\r\n    assert.equal(validarEmail('test@.com'), false);\r\n  });\r\n});\n```\n\n### EJEMPLO 2: PRUEBA DE UNA API REST\n\nSupongamos que tenemos una API REST que devuelve una lista de usuarios:\n\n```javascript\nconst request = require('supertest');\r\nconst app = require('../src/app'); // Importa la aplicación Express\r\n\r\ndescribe('GET /users', function() {\r\n  it('Debería retornar una lista de usuarios', function(done) {\r\n    request(app)\r\n      .get('/users')\r\n      .expect(200)\r\n      .expect('Content-Type', /json/)\r\n      .end(function(err, res) {\r\n        if (err) return done(err);\r\n        assert.isArray(res.body, 'El cuerpo de la respuesta debe ser un array');\r\n        done();\r\n      });\r\n  });\r\n});\n```\n\nEn este ejemplo, utilizamos la biblioteca `supertest` para realizar solicitudes HTTP a nuestra API y verificar la respuesta.\n\n## FUENTES DEL DOCUMENTO\n\n* [Mocha Documentation](https://mochajs.org/)\n* [Chai Documentation](https://www.chaijs.com/)\n* [Supertest Documentation](https://github.com/visionmedia/supertest)\n* [Testing JavaScript with Mocha and Chai](https://www.sitepoint.com/testing-javascript-mocha-chai/)\n"
  },
  {
    "slug": "/programming/languages/javascript/javascript-testing/testing-types",
    "title": "Tipos de Testing en JavaScript",
    "description": "Exploración de los diferentes tipos de pruebas en JavaScript, incluyendo pruebas unitarias, de integración y end-to-end.",
    "content": "El testing es una parte fundamental del desarrollo de software, especialmente en JavaScript, donde la naturaleza dinámica y la complejidad de las aplicaciones modernas requieren una verificación exhaustiva. Los tests aseguran que el código funcione como se espera, previenen regresiones, facilitan la refactorización y mejoran la calidad general del software. En JavaScript, existen varios tipos de pruebas que se pueden aplicar, cada uno con un enfoque y propósito distintos.\n\n## OBJETIVOS CLAVE SOBRE EL TEMA\n\n* **Comprender los diferentes tipos de pruebas:** Identificar las características y propósitos de las pruebas unitarias, de integración y end-to-end.\n* **Aplicar las pruebas adecuadas:** Seleccionar el tipo de prueba más apropiado según el componente o funcionalidad que se esté evaluando.\n* **Mejorar la calidad del código:** Utilizar las pruebas para detectar errores, prevenir regresiones y facilitar la refactorización.\n* **Automatizar el proceso de testing:** Integrar las pruebas en un flujo de trabajo automatizado para garantizar una verificación continua del código.\n\n## PRUEBAS UNITARIAS\n\nLas pruebas unitarias son el tipo de prueba más básico y se centran en verificar el comportamiento de unidades individuales de código, como funciones, métodos o clases. El objetivo es aislar cada unidad y probarla de forma independiente para asegurar que funciona correctamente.\n\n* **Características:**\n  * **Aislamiento:** Se aísla la unidad de código del resto del sistema, utilizando mocks o stubs para simular dependencias externas.\n  * **Rapidez:** Las pruebas unitarias deben ejecutarse rápidamente para permitir una retroalimentación rápida durante el desarrollo.\n  * **Especificidad:** Se centran en probar casos de uso específicos y escenarios de error para asegurar la robustez de la unidad.\n\n* **Ejemplo con Jest:**\n\n```javascript\n// sum.js\r\nfunction sum(a, b) {\r\n  return a + b;\r\n}\r\n\r\nmodule.exports = sum;\n```\n\n```javascript\n// sum.test.js\r\nconst sum = require('./sum');\r\n\r\ntest('adds 1 + 2 to equal 3', () => {\r\n  expect(sum(1, 2)).toBe(3);\r\n});\n```\n\nEn este ejemplo, se prueba la función `sum` para asegurar que devuelve el resultado correcto al sumar dos números.\n\n## PRUEBAS DE INTEGRACION\n\nLas pruebas de integración verifican la interacción entre diferentes unidades o componentes del sistema. El objetivo es asegurar que las unidades trabajen juntas correctamente y que la integración no introduzca errores.\n\n* **Características:**\n  * **Interacción:** Se prueban las interacciones entre diferentes partes del sistema, como módulos, servicios o bases de datos.\n  * **Dependencias:** Se consideran las dependencias externas y se asegura que la integración con estas dependencias funcione correctamente.\n  * **Cobertura:** Se busca cubrir los diferentes caminos de ejecución y escenarios de interacción entre los componentes.\n\n* **Ejemplo con Jest:**\n\nSupongamos que tenemos dos funciones, una que obtiene datos de un usuario y otra que los procesa:\n\n```javascript\n// user.js\r\nconst api = require('./api');\r\n\r\nasync function getUser(id) {\r\n  const response = await api.getUser(id);\r\n  return response.data;\r\n}\r\n\r\nmodule.exports = getUser;\n```\n\n```javascript\n// api.js\r\nasync function getUser(id) {\r\n  // Simulación de una llamada a una API\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve({ data: { id: id, name: 'User ' + id } });\r\n    }, 50);\r\n  });\r\n}\r\n\r\nmodule.exports = { getUser };\n```\n\n```javascript\n// user.test.js\r\nconst getUser = require('./user');\r\nconst api = require('./api');\r\n\r\njest.mock('./api');\r\n\r\ntest('fetches user data from API', async () => {\r\n  api.getUser.mockResolvedValue({ data: { id: 1, name: 'User 1' } });\r\n\r\n  const user = await getUser(1);\r\n  expect(user).toEqual({ id: 1, name: 'User 1' });\r\n  expect(api.getUser).toHaveBeenCalledWith(1);\r\n});\n```\n\nEn este ejemplo, se utiliza `jest.mock` para simular la llamada a la API y asegurar que la función `getUser` interactúa correctamente con la API.\n\n## PRUEBAS END-TO-END (E2E)\n\nLas pruebas end-to-end (E2E) simulan el comportamiento de un usuario real interactuando con la aplicación. El objetivo es verificar que la aplicación funciona correctamente de principio a fin, incluyendo la interfaz de usuario, la lógica del servidor y la base de datos.\n\n* **Características:**\n  * **Simulación:** Se simula el comportamiento de un usuario real, interactuando con la aplicación a través de la interfaz de usuario.\n  * **Cobertura completa:** Se busca cubrir los diferentes flujos de usuario y escenarios de uso de la aplicación.\n  * **Entorno real:** Se ejecutan en un entorno lo más parecido posible al entorno de producción para asegurar la validez de las pruebas.\n\n* **Ejemplo con Cypress:**\n\n```javascript\n// cypress/integration/app.spec.js\r\ndescribe('My First Test', () => {\r\n  it('Visits the app root url', () => {\r\n    cy.visit('/');\r\n    cy.contains('h1', 'Welcome to Your Vue.js App');\r\n  });\r\n})\n```\n\nEste ejemplo utiliza Cypress para visitar la página principal de una aplicación Vue.js y verificar que el título principal sea el esperado.\n\n## HERRAMIENTAS DE TESTING\n\nExisten diversas herramientas y frameworks para realizar pruebas en JavaScript, cada uno con sus propias características y ventajas. Algunas de las herramientas más populares son:\n\n* **Jest:** Un framework de testing desarrollado por Facebook, conocido por su facilidad de uso, velocidad y funcionalidades integradas como mocks y cobertura de código.\n* **Mocha:** Un framework de testing flexible y extensible que permite utilizar diferentes librerías de aserción y mocks.\n* **Chai:** Una librería de aserción que se puede utilizar con Mocha u otros frameworks de testing.\n* **Sinon.JS:** Una librería para crear mocks, stubs y spies que facilita el aislamiento de las unidades de código durante las pruebas.\n* **Cypress:** Un framework de testing end-to-end diseñado específicamente para aplicaciones web modernas, que permite escribir pruebas de forma intuitiva y depurar fácilmente.\n* **Selenium:** Una herramienta de automatización de pruebas que permite controlar navegadores web y simular interacciones de usuario.\n\n## MEJORES PRACTICAS\n\n* **Escribir pruebas claras y concisas:** Las pruebas deben ser fáciles de entender y mantener, con nombres descriptivos y una estructura clara.\n* **Cubrir todos los casos de uso:** Las pruebas deben cubrir los diferentes escenarios de uso y casos de error para asegurar la robustez del código.\n* **Automatizar el proceso de testing:** Las pruebas deben integrarse en un flujo de trabajo automatizado para garantizar una verificación continua del código.\n* **Utilizar mocks y stubs:** Utilizar mocks y stubs para aislar las unidades de código y simular dependencias externas.\n* **Realizar pruebas de forma regular:** Las pruebas deben realizarse de forma regular durante el desarrollo para detectar errores y prevenir regresiones.\n\n## FUENTES DEL DOCUMENTO\n\n* [Jest Documentation](https://jestjs.io/docs/getting-started)\n* [Mocha Documentation](https://mochajs.org/)\n* [Cypress Documentation](https://docs.cypress.io/)\n* [Selenium Documentation](https://www.selenium.dev/documentation/)\n* Martin Fowler - [Test Pyramid](https://martinfowler.com/bliki/TestPyramid.html)\n"
  },
  {
    "slug": "/programming/languages/javascript/modern-javascript/arrow-functions",
    "title": "Arrow Functions en JavaScript",
    "description": "Explicación detallada de las arrow functions en JavaScript, su sintaxis, uso y diferencias con las funciones tradicionales.",
    "content": "Las **arrow functions** (también conocidas como *funciones flecha* o *fat arrow functions*) son una característica introducida en ECMAScript 6 (ES6) que proporciona una sintaxis más concisa para escribir funciones en JavaScript. Estas funciones son especialmente útiles para funciones anónimas y callbacks, simplificando el código y haciéndolo más legible.\n\n## OBJETIVOS CLAVE\n\n1. **Sintaxis Simplificada:** Reducir la cantidad de código necesario para definir funciones.\n2. **`this` Léxico:** Resolver problemas comunes relacionados con el contexto de `this` en funciones tradicionales.\n3. **Mayor Legibilidad:** Mejorar la claridad del código, especialmente en operaciones funcionales.\n\n## SINTAXIS BASICA\n\nLa sintaxis básica de una arrow function es la siguiente:\n\n```javascript\n(parámetros) => expresión\n```\n\nSi la función tiene un solo parámetro, los paréntesis son opcionales:\n\n```javascript\nparámetro => expresión\n```\n\nSi la función tiene múltiples parámetros o no tiene parámetros, los paréntesis son obligatorios:\n\n```javascript\n() => expresión\r\n(param1, param2) => expresión\n```\n\nSi la función necesita ejecutar múltiples sentencias, se utilizan llaves `{}` y se debe incluir la declaración `return` para devolver un valor:\n\n```javascript\n(parámetros) => {\r\n  // Sentencias\r\n  return valor;\r\n}\n```\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### FUNCION SIN PARAMETROS\n\n```javascript\nconst saludar = () => {\r\n  return \"Hola Mundo!\";\r\n};\r\n\r\nconsole.log(saludar()); // Output: Hola Mundo!\n```\n\n#### FUNCION CON UN PARAMETRO\n\n```javascript\nconst cuadrado = (x) => x * x;\r\n\r\nconsole.log(cuadrado(5)); // Output: 25\n```\n\nO, de forma más concisa:\n\n```javascript\nconst cuadrado = x => x * x;\r\n\r\nconsole.log(cuadrado(5)); // Output: 25\n```\n\n#### FUNCION CON MULTIPLES PARAMETROS\n\n```javascript\nconst sumar = (a, b) => a + b;\r\n\r\nconsole.log(sumar(3, 4)); // Output: 7\n```\n\n#### FUNCION CON MULTIPLES SENTENCIAS\n\n```javascript\nconst calcularAreaRectangulo = (base, altura) => {\r\n  const area = base * altura;\r\n  return area;\r\n};\r\n\r\nconsole.log(calcularAreaRectangulo(5, 10)); // Output: 50\n```\n\n### EL CONTEXTO DE this\n\nUna de las diferencias más importantes entre las arrow functions y las funciones tradicionales es cómo manejan el contexto de `this`. En las funciones tradicionales, `this` se define dinámicamente, dependiendo de cómo se llama la función. En las arrow functions, `this` se define léxicamente, es decir, hereda el valor de `this` del contexto circundante.\n\n#### EJEMPLO CON FUNCION TRADICIONAL\n\n```javascript\nfunction Persona(nombre) {\r\n  this.nombre = nombre;\r\n  this.saludar = function() {\r\n    setTimeout(function() {\r\n      console.log(\"Hola, soy \" + this.nombre); // this es undefined o window\r\n    }, 1000);\r\n  };\r\n}\r\n\r\nconst persona1 = new Persona(\"Juan\");\r\npersona1.saludar(); // Output: Hola, soy undefined (o similar)\n```\n\nEn este caso, dentro de la función `setTimeout`, `this` no se refiere a la instancia de `Persona`, sino al objeto global (window en navegadores, undefined en modo estricto).\n\n#### EJEMPLO CON arrow function\n\n```javascript\nfunction Persona(nombre) {\r\n  this.nombre = nombre;\r\n  this.saludar = function() {\r\n    setTimeout(() => {\r\n      console.log(\"Hola, soy \" + this.nombre); // this se refiere a la instancia de Persona\r\n    }, 1000);\r\n  };\r\n}\r\n\r\nconst persona2 = new Persona(\"Maria\");\r\npersona2.saludar(); // Output: Hola, soy Maria\n```\n\nAquí, la arrow function dentro de `setTimeout` captura el valor de `this` del contexto de `saludar`, que es la instancia de `Persona`.\n\n### CUANDO USAR ARROW FUNCTIONS\n\nLas arrow functions son ideales para:\n\n* **Funciones anónimas:** Especialmente en callbacks y funciones de orden superior.\n* **Funciones cortas y concisas:** Donde la sintaxis reducida mejora la legibilidad.\n* **Evitar problemas con `this`:** Cuando se necesita mantener el contexto léxico de `this`.\n\nSin embargo, no son adecuadas para:\n\n* **Métodos de objetos:** Donde se necesita que `this` se refiera al objeto.\n* **Funciones constructoras:** No se pueden usar como constructores con `new`.\n* **Funciones que necesitan el objeto `arguments`:** Las arrow functions no tienen acceso al objeto `arguments`.\n\n### EJEMPLOS ADICIONALES\n\n#### USO CON map\n\n```javascript\nconst numeros = [1, 2, 3, 4, 5];\r\nconst dobles = numeros.map(numero => numero * 2);\r\n\r\nconsole.log(dobles); // Output: [2, 4, 6, 8, 10]\n```\n\n#### USO CON filter\n\n```javascript\nconst numeros = [1, 2, 3, 4, 5];\r\nconst pares = numeros.filter(numero => numero % 2 === 0);\r\n\r\nconsole.log(pares); // Output: [2, 4]\n```\n\n#### USO CON reduce\n\n```javascript\nconst numeros = [1, 2, 3, 4, 5];\r\nconst suma = numeros.reduce((acumulador, numero) => acumulador + numero, 0);\r\n\r\nconsole.log(suma); // Output: 15\n```\n\n### CONCLUSION\n\nLas arrow functions son una herramienta poderosa en JavaScript que simplifica la sintaxis y mejora la legibilidad del código. Su manejo léxico de `this` resuelve problemas comunes y las hace ideales para funciones anónimas y callbacks. Sin embargo, es importante entender sus limitaciones y saber cuándo es más apropiado usar funciones tradicionales.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: Arrow function expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n* [ECMAScript 6 (ES6) specification](https://www.ecma-international.org/ecma-262/6.0/)\n* [W3Schools: JavaScript Arrow Functions](https://www.w3schools.com/js/js_arrow_function.asp)\n"
  },
  {
    "slug": "/programming/languages/javascript/modern-javascript/classes",
    "title": "Clases",
    "description": "Introducción y uso de clases en Javascript para la programación orientada a objetos.",
    "content": "Las clases en JavaScript son una característica introducida en ECMAScript 2015 (ES6) que proporciona una sintaxis más clara y concisa para crear objetos y manejar la herencia, facilitando la programación orientada a objetos (POO). Aunque JavaScript es un lenguaje basado en prototipos, las clases ofrecen una forma más familiar para los desarrolladores que vienen de lenguajes como Java o C++.\n\n## OBJETIVOS CLAVE\n\n* **Simplificar la creación de objetos:** Proporcionar una sintaxis más legible y estructurada para definir objetos y sus propiedades.\n* **Facilitar la herencia:** Permitir la creación de jerarquías de clases mediante la herencia, reutilizando código y promoviendo la organización.\n* **Mejorar la legibilidad del código:** Ofrecer una forma más intuitiva de entender y mantener el código orientado a objetos.\n* **Encapsulamiento:** Aunque JavaScript no tiene encapsulamiento estricto como otros lenguajes, las clases ayudan a organizar el código y a definir interfaces claras.\n\n## DEFINICION DE CLASES\n\nUna clase en JavaScript se define utilizando la palabra clave `class`, seguida del nombre de la clase. Dentro de la clase, se pueden definir métodos, incluyendo un constructor para inicializar el objeto.\n\n```javascript\nclass Persona {\r\n  constructor(nombre, edad) {\r\n    this.nombre = nombre;\r\n    this.edad = edad;\r\n  }\r\n\r\n  saludar() {\r\n    console.log(`Hola, mi nombre es ${this.nombre} y tengo ${this.edad} años.`);\r\n  }\r\n}\r\n\r\n// Crear una instancia de la clase Persona\r\nconst persona1 = new Persona(\"Juan\", 30);\r\npersona1.saludar(); // Imprime: Hola, mi nombre es Juan y tengo 30 años.\n```\n\nEn este ejemplo:\n\n* `class Persona { ... }` define la clase `Persona`.\n* `constructor(nombre, edad) { ... }` es el constructor de la clase, que se llama cuando se crea una nueva instancia de la clase.\n* `this.nombre = nombre;` y `this.edad = edad;` asignan los valores proporcionados a las propiedades del objeto.\n* `saludar() { ... }` es un método de la clase que imprime un saludo.\n\n## HERENCIA\n\nLa herencia permite crear nuevas clases basadas en clases existentes, heredando sus propiedades y métodos. Se utiliza la palabra clave `extends` para indicar la clase de la que se hereda.\n\n```javascript\nclass Estudiante extends Persona {\r\n  constructor(nombre, edad, carrera) {\r\n    super(nombre, edad); // Llama al constructor de la clase padre\r\n    this.carrera = carrera;\r\n  }\r\n\r\n  estudiar() {\r\n    console.log(`${this.nombre} está estudiando ${this.carrera}.`);\r\n  }\r\n}\r\n\r\n// Crear una instancia de la clase Estudiante\r\nconst estudiante1 = new Estudiante(\"Maria\", 20, \"Ingeniería\");\r\nestudiante1.saludar(); // Imprime: Hola, mi nombre es Maria y tengo 20 años.\r\nestudiante1.estudiar(); // Imprime: Maria está estudiando Ingeniería.\n```\n\nEn este ejemplo:\n\n* `class Estudiante extends Persona { ... }` define la clase `Estudiante` que hereda de la clase `Persona`.\n* `super(nombre, edad);` llama al constructor de la clase padre (`Persona`) para inicializar las propiedades heredadas.\n* `this.carrera = carrera;` asigna el valor proporcionado a la propiedad `carrera` del objeto `Estudiante`.\n* `estudiar() { ... }` es un método específico de la clase `Estudiante`.\n\n### METODOS ESTATICOS\n\nLos métodos estáticos son métodos que pertenecen a la clase en sí, en lugar de a las instancias de la clase. Se definen utilizando la palabra clave `static`.\n\n```javascript\nclass Matematicas {\r\n  static sumar(a, b) {\r\n    return a + b;\r\n  }\r\n}\r\n\r\n// Llamar al método estático\r\nconst resultado = Matematicas.sumar(5, 3);\r\nconsole.log(resultado); // Imprime: 8\n```\n\nEn este ejemplo:\n\n* `static sumar(a, b) { ... }` define un método estático llamado `sumar` que toma dos argumentos y devuelve su suma.\n* `Matematicas.sumar(5, 3);` llama al método estático directamente desde la clase, sin necesidad de crear una instancia de la clase.\n\n### GETTERS Y SETTERS\n\nLos getters y setters son métodos especiales que permiten controlar el acceso a las propiedades de un objeto. Los getters se utilizan para obtener el valor de una propiedad, y los setters se utilizan para establecer el valor de una propiedad.\n\n```javascript\nclass Circulo {\r\n  constructor(radio) {\r\n    this._radio = radio; // Utilizar un nombre diferente para la propiedad interna\r\n  }\r\n\r\n  get radio() {\r\n    return this._radio;\r\n  }\r\n\r\n  set radio(nuevoRadio) {\r\n    if (nuevoRadio > 0) {\r\n      this._radio = nuevoRadio;\r\n    } else {\r\n      console.log(\"El radio debe ser mayor que cero.\");\r\n    }\r\n  }\r\n\r\n  get area() {\r\n    return Math.PI * this._radio * this._radio;\r\n  }\r\n}\r\n\r\n// Crear una instancia de la clase Circulo\r\nconst circulo1 = new Circulo(5);\r\nconsole.log(circulo1.radio); // Imprime: 5\r\n\r\ncirculo1.radio = 10;\r\nconsole.log(circulo1.radio); // Imprime: 10\r\n\r\ncirculo1.radio = -2; // Imprime: El radio debe ser mayor que cero.\r\nconsole.log(circulo1.radio); // Imprime: 10 (el valor no se modificó)\r\n\r\nconsole.log(circulo1.area); // Imprime: 314.1592653589793\n```\n\nEn este ejemplo:\n\n* `get radio() { ... }` define un getter para la propiedad `radio`.\n* `set radio(nuevoRadio) { ... }` define un setter para la propiedad `radio`, que incluye una validación para asegurar que el radio sea mayor que cero.\n* `get area() { ... }` define un getter para la propiedad `area`, que calcula el área del círculo.\n\n### EJEMPLO COMPLETO\n\nA continuación, se presenta un ejemplo más completo que combina todos los conceptos anteriores:\n\n```javascript\nclass Animal {\r\n  constructor(nombre, especie) {\r\n    this.nombre = nombre;\r\n    this.especie = especie;\r\n  }\r\n\r\n  saludar() {\r\n    console.log(`Hola, soy ${this.nombre} y soy un ${this.especie}.`);\r\n  }\r\n\r\n  static describir() {\r\n    console.log(\"Los animales son seres vivos que pertenecen al reino Animalia.\");\r\n  }\r\n}\r\n\r\nclass Perro extends Animal {\r\n  constructor(nombre, raza, edad) {\r\n    super(nombre, \"Perro\");\r\n    this.raza = raza;\r\n    this.edad = edad;\r\n  }\r\n\r\n  ladrar() {\r\n    console.log(\"¡Guau guau!\");\r\n  }\r\n\r\n  get info() {\r\n    return `Nombre: ${this.nombre}, Raza: ${this.raza}, Edad: ${this.edad}`;\r\n  }\r\n}\r\n\r\n// Llamar al método estático de la clase Animal\r\nAnimal.describir(); // Imprime: Los animales son seres vivos que pertenecen al reino Animalia.\r\n\r\n// Crear una instancia de la clase Perro\r\nconst perro1 = new Perro(\"Max\", \"Labrador\", 3);\r\nperro1.saludar(); // Imprime: Hola, soy Max y soy un Perro.\r\nperro1.ladrar(); // Imprime: ¡Guau guau!\r\nconsole.log(perro1.info); // Imprime: Nombre: Max, Raza: Labrador, Edad: 3\n```\n\nEn este ejemplo:\n\n* Se define una clase base `Animal` con un constructor, un método `saludar` y un método estático `describir`.\n* Se define una clase `Perro` que hereda de `Animal`, con un constructor que llama al constructor de la clase padre, un método `ladrar` y un getter `info`.\n* Se crea una instancia de la clase `Perro` y se utilizan sus métodos y propiedades.\n\n## CONCLUSION\n\nLas clases en JavaScript proporcionan una forma estructurada y legible de trabajar con la programación orientada a objetos. Facilitan la creación de objetos, la herencia y la organización del código, lo que resulta en un código más mantenible y comprensible. Aunque JavaScript es un lenguaje basado en prototipos, las clases ofrecen una sintaxis más familiar para muchos desarrolladores y ayudan a mejorar la calidad del código.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\n* [ECMAScript 2015 (ES6) specification](https://www.ecma-international.org/ecma-262/6.0/)\n* [W3Schools: JavaScript Classes](https://www.w3schools.com/js/js_classes.asp)\n"
  },
  {
    "slug": "/programming/languages/javascript/modern-javascript/destructuring",
    "title": "Destructuring",
    "description": "Desempaquetado de valores de objetos y arrays en JavaScript.",
    "content": "El destructuring, o desempaquetado, es una característica de JavaScript que permite extraer valores de objetos o arrays y asignarlos a variables de una manera más concisa y legible. Esta funcionalidad simplifica la manipulación de datos y reduce la cantidad de código necesario para acceder a las propiedades de objetos y elementos de arrays.\n\n## OBJETIVOS CLAVE\n\n* **Simplificar la extracción de datos:** Facilitar la asignación de valores de objetos y arrays a variables.\n* **Mejorar la legibilidad del código:** Reducir la verbosidad y hacer el código más claro.\n* **Aumentar la eficiencia:** Permitir la extracción de múltiples valores en una sola línea de código.\n\n## DESTRUCTURING DE OBJETOS\n\nEl destructuring de objetos permite extraer valores de las propiedades de un objeto y asignarlos a variables con el mismo nombre (o con nombres diferentes si se especifica).\n\n**Sintaxis básica:**\n\n```javascript\nconst objeto = {\r\n  propiedad1: 'valor1',\r\n  propiedad2: 'valor2',\r\n  propiedad3: 'valor3'\r\n};\r\n\r\nconst { propiedad1, propiedad2 } = objeto;\r\n\r\nconsole.log(propiedad1); // Output: valor1\r\nconsole.log(propiedad2); // Output: valor2\n```\n\nEn este ejemplo, `propiedad1` y `propiedad2` son extraídas del objeto y asignadas a variables con el mismo nombre.\n\n**Asignación a variables con nombres diferentes:**\n\n```javascript\nconst objeto = {\r\n  propiedad1: 'valor1',\r\n  propiedad2: 'valor2'\r\n};\r\n\r\nconst { propiedad1: nuevaVariable1, propiedad2: nuevaVariable2 } = objeto;\r\n\r\nconsole.log(nuevaVariable1); // Output: valor1\r\nconsole.log(nuevaVariable2); // Output: valor2\n```\n\nAquí, `propiedad1` es asignada a la variable `nuevaVariable1` y `propiedad2` a `nuevaVariable2`.\n\n**Valores por defecto:**\n\nSe pueden asignar valores por defecto en caso de que la propiedad no exista en el objeto:\n\n```javascript\nconst objeto = {\r\n  propiedad1: 'valor1'\r\n};\r\n\r\nconst { propiedad1, propiedad2 = 'valorPorDefecto' } = objeto;\r\n\r\nconsole.log(propiedad1); // Output: valor1\r\nconsole.log(propiedad2); // Output: valorPorDefecto\n```\n\nEn este caso, como `propiedad2` no existe en el objeto, se le asigna el valor por defecto 'valorPorDefecto'.\n\n**Destructuring anidado:**\n\nEl destructuring también puede aplicarse a objetos anidados:\n\n```javascript\nconst objeto = {\r\n  propiedad1: 'valor1',\r\n  propiedad2: {\r\n    subPropiedad1: 'subValor1',\r\n    subPropiedad2: 'subValor2'\r\n  }\r\n};\r\n\r\nconst { propiedad2: { subPropiedad1, subPropiedad2 } } = objeto;\r\n\r\nconsole.log(subPropiedad1); // Output: subValor1\r\nconsole.log(subPropiedad2); // Output: subValor2\n```\n\n## DESTRUCTURING DE ARRAYS\n\nEl destructuring de arrays permite extraer valores de un array y asignarlos a variables según su posición.\n\n**Sintaxis básica:**\n\n```javascript\nconst array = ['valor1', 'valor2', 'valor3'];\r\n\r\nconst [variable1, variable2] = array;\r\n\r\nconsole.log(variable1); // Output: valor1\r\nconsole.log(variable2); // Output: valor2\n```\n\nEn este ejemplo, `variable1` recibe el primer elemento del array ('valor1') y `variable2` recibe el segundo elemento ('valor2').\n\n**Omitir elementos:**\n\nSe pueden omitir elementos utilizando comas:\n\n```javascript\nconst array = ['valor1', 'valor2', 'valor3'];\r\n\r\nconst [variable1, , variable3] = array;\r\n\r\nconsole.log(variable1); // Output: valor1\r\nconsole.log(variable3); // Output: valor3\n```\n\nAquí, el segundo elemento del array es omitido.\n\n**Rest parameters:**\n\nSe puede utilizar el rest parameter (`...`) para capturar el resto de los elementos del array en una nueva variable:\n\n```javascript\nconst array = ['valor1', 'valor2', 'valor3', 'valor4'];\r\n\r\nconst [variable1, variable2, ...resto] = array;\r\n\r\nconsole.log(variable1); // Output: valor1\r\nconsole.log(variable2); // Output: valor2\r\nconsole.log(resto);      // Output: ['valor3', 'valor4']\n```\n\nEn este caso, `resto` es un nuevo array que contiene todos los elementos restantes después de `variable1` y `variable2`.\n\n**Valores por defecto:**\n\nAl igual que con los objetos, se pueden asignar valores por defecto en caso de que el array no tenga suficientes elementos:\n\n```javascript\nconst array = ['valor1'];\r\n\r\nconst [variable1, variable2 = 'valorPorDefecto'] = array;\r\n\r\nconsole.log(variable1); // Output: valor1\r\nconsole.log(variable2); // Output: valorPorDefecto\n```\n\n### EJEMPLOS DE IMPLEMENTACION\n\n**Intercambio de variables:**\n\nEl destructuring facilita el intercambio de valores entre variables sin necesidad de una variable temporal:\n\n```javascript\nlet a = 1;\r\nlet b = 2;\r\n\r\n[a, b] = [b, a];\r\n\r\nconsole.log(a); // Output: 2\r\nconsole.log(b); // Output: 1\n```\n\n**Funciones que retornan múltiples valores:**\n\nEl destructuring es útil para trabajar con funciones que retornan arrays u objetos:\n\n```javascript\nfunction obtenerCoordenadas() {\r\n  return {\r\n    x: 10,\r\n    y: 20\r\n  };\r\n}\r\n\r\nconst { x, y } = obtenerCoordenadas();\r\n\r\nconsole.log(x); // Output: 10\r\nconsole.log(y); // Output: 20\n```\n\n**Iteración con `for...of`:**\n\nEl destructuring puede utilizarse en bucles `for...of` para iterar sobre arrays de objetos:\n\n```javascript\nconst usuarios = [\r\n  { id: 1, nombre: 'Juan' },\r\n  { id: 2, nombre: 'Maria' },\r\n  { id: 3, nombre: 'Pedro' }\r\n];\r\n\r\nfor (const { id, nombre } of usuarios) {\r\n  console.log(`ID: ${id}, Nombre: ${nombre}`);\r\n}\n```\n\n## CONCLUSION\n\nEl destructuring es una herramienta poderosa en JavaScript que mejora la legibilidad y eficiencia del código al simplificar la extracción de datos de objetos y arrays. Su uso adecuado puede reducir la verbosidad y hacer que el código sea más fácil de mantener.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: Destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n* [ES6 Features: Destructuring](https://es6-features.org/#ArrayMatching)\n* [JavaScript.info: Destructuring assignment](https://javascript.info/destructuring-assignment)\n"
  },
  {
    "slug": "/programming/languages/javascript/modern-javascript",
    "title": "Javascript Moderno (ES6+)",
    "description": "Introducción a las características y sintaxis de JavaScript moderno (ECMAScript 2015 y versiones posteriores).",
    "content": "JavaScript Moderno, también conocido como ECMAScript 2015 (ES6) y versiones posteriores, representa una evolución significativa del lenguaje JavaScript. Estas actualizaciones introdujeron una serie de nuevas características y sintaxis que hacen que el código sea más legible, mantenible y eficiente. Este documento proporciona una visión general de las características más importantes de JavaScript Moderno.\n\n## OBJETIVOS CLAVE\n\n* **Mejorar la legibilidad y mantenibilidad del código:** Facilitar la escritura de código más claro y fácil de entender.\n* **Añadir nuevas funcionalidades:** Incorporar características que simplifiquen tareas comunes y permitan abordar problemas más complejos.\n* **Optimizar el rendimiento:** Introducir mejoras que permitan ejecutar el código de manera más eficiente.\n* **Estandarizar el desarrollo:** Proporcionar un conjunto de herramientas y sintaxis consistentes para todos los desarrolladores.\n\n## VARIABLES: LET Y CONST\n\n`let` y `const` son nuevas formas de declarar variables en JavaScript Moderno, que ofrecen un mejor control sobre el alcance y la mutabilidad en comparación con `var`.\n\n* **let:** Declara una variable con alcance de bloque. Esto significa que la variable solo es accesible dentro del bloque en el que se define (por ejemplo, dentro de un bucle `for` o una declaración `if`).\n\n  ```javascript\n  function ejemploLet() {\r\n    if (true) {\r\n      let x = 10;\r\n      console.log(x); // Imprime 10\r\n    }\r\n    // console.log(x); // Error: x is not defined\r\n  }\n  ```\n\n* **const:** Declara una constante con alcance de bloque. Una vez que se asigna un valor a una constante, no se puede reasignar.\n\n  ```javascript\n  function ejemploConst() {\r\n    const PI = 3.14159;\r\n    console.log(PI); // Imprime 3.14159\r\n    // PI = 3.14; // Error: Assignment to constant variable.\r\n  }\n  ```\n\n## ARROW FUNCTIONS\n\nLas arrow functions (funciones flecha) proporcionan una sintaxis más concisa para escribir funciones.\n\n* **Sintaxis básica:**\n\n  ```javascript\n  const suma = (a, b) => a + b;\r\n  console.log(suma(5, 3)); // Imprime 8\n  ```\n\n* **Sin parámetros:**\n\n  ```javascript\n  const saludo = () => \"Hola\";\r\n  console.log(saludo()); // Imprime \"Hola\"\n  ```\n\n* **Un solo parámetro (sin paréntesis):**\n\n  ```javascript\n  const cuadrado = x => x * x;\r\n  console.log(cuadrado(4)); // Imprime 16\n  ```\n\n* **Múltiples líneas (requiere `return`):**\n\n  ```javascript\n  const multiplicar = (a, b) => {\r\n    const resultado = a * b;\r\n    return resultado;\r\n  };\r\n  console.log(multiplicar(2, 6)); // Imprime 12\n  ```\n\n## CLASES\n\nJavaScript Moderno introdujo la sintaxis de clases, que proporciona una forma más clara y estructurada de crear objetos y manejar la herencia.\n\n* **Definición de una clase:**\n\n  ```javascript\n  class Animal {\r\n    constructor(nombre) {\r\n      this.nombre = nombre;\r\n    }\r\n\r\n    hablar() {\r\n      console.log(`${this.nombre} hace un sonido.`);\r\n    }\r\n  }\n  ```\n\n* **Creación de una instancia:**\n\n  ```javascript\n  const miAnimal = new Animal(\"León\");\r\n  miAnimal.hablar(); // Imprime \"León hace un sonido.\"\n  ```\n\n* **Herencia:**\n\n  ```javascript\n  class Perro extends Animal {\r\n    constructor(nombre, raza) {\r\n      super(nombre);\r\n      this.raza = raza;\r\n    }\r\n\r\n    hablar() {\r\n      console.log(`${this.nombre} ladra.`);\r\n    }\r\n  }\r\n\r\n  const miPerro = new Perro(\"Buddy\", \"Golden Retriever\");\r\n  miPerro.hablar(); // Imprime \"Buddy ladra.\"\n  ```\n\n## TEMPLATE LITERALS\n\nLos template literals (plantillas literales) permiten insertar expresiones dentro de cadenas de texto de una manera más legible y conveniente.\n\n* **Sintaxis:**\n\n  ```javascript\n  const nombre = \"Juan\";\r\n  const saludo = `Hola, ${nombre}!`;\r\n  console.log(saludo); // Imprime \"Hola, Juan!\"\n  ```\n\n* **Múltiples líneas:**\n\n  ```javascript\n  const mensaje = `\r\n  Esta es una cadena\r\n  que ocupa varias líneas.\r\n  `;\r\n  console.log(mensaje);\n  ```\n\n## DESTRUCTURING\n\nDestructuring (desestructuración) permite extraer valores de objetos y arrays y asignarlos a variables de una manera más concisa.\n\n* **Desestructuración de objetos:**\n\n  ```javascript\n  const persona = {\r\n    nombre: \"Ana\",\r\n    edad: 30,\r\n    ciudad: \"Madrid\"\r\n  };\r\n\r\n  const { nombre, edad } = persona;\r\n  console.log(nombre); // Imprime \"Ana\"\r\n  console.log(edad); // Imprime 30\n  ```\n\n* **Desestructuración de arrays:**\n\n  ```javascript\n  const colores = [\"rojo\", \"verde\", \"azul\"];\r\n\r\n  const [primerColor, segundoColor] = colores;\r\n  console.log(primerColor); // Imprime \"rojo\"\r\n  console.log(segundoColor); // Imprime \"verde\"\n  ```\n\n## SPREAD Y REST OPERATORS\n\nLos spread y rest operators (operadores de propagación y resto) son herramientas poderosas para trabajar con arrays y objetos.\n\n* **Spread operator:** Permite expandir un array o un objeto en elementos individuales.\n\n  ```javascript\n  const array1 = [1, 2, 3];\r\n  const array2 = [...array1, 4, 5];\r\n  console.log(array2); // Imprime [1, 2, 3, 4, 5]\r\n\r\n  const obj1 = { a: 1, b: 2 };\r\n  const obj2 = { ...obj1, c: 3 };\r\n  console.log(obj2); // Imprime { a: 1, b: 2, c: 3 }\n  ```\n\n* **Rest operator:** Permite representar un número indefinido de argumentos como un array.\n\n  ```javascript\n  function sumar(...numeros) {\r\n    return numeros.reduce((total, num) => total + num, 0);\r\n  }\r\n\r\n  console.log(sumar(1, 2, 3, 4)); // Imprime 10\n  ```\n\n## PROMISES\n\nLas promises (promesas) son objetos que representan el resultado eventual de una operación asíncrona.\n\n* **Creación de una promesa:**\n\n  ```javascript\n  const miPromesa = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(\"¡Éxito!\");\r\n    }, 2000);\r\n  });\n  ```\n\n* **Manejo de una promesa:**\n\n  ```javascript\n  miPromesa\r\n    .then(resultado => {\r\n      console.log(\"Resultado:\", resultado); // Imprime \"Resultado: ¡Éxito!\"\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error:\", error);\r\n    });\n  ```\n\n## ASYNC/AWAIT\n\n`async/await` es una sintaxis que facilita la escritura de código asíncrono de manera más legible y similar al código síncrono.\n\n* **Función async:**\n\n  ```javascript\n  async function obtenerDatos() {\r\n    const promesa = new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        resolve(\"Datos obtenidos\");\r\n      }, 1000);\r\n    });\r\n\r\n    const resultado = await promesa;\r\n    console.log(resultado); // Imprime \"Datos obtenidos\"\r\n  }\r\n\r\n  obtenerDatos();\n  ```\n\n* **Manejo de errores:**\n\n  ```javascript\n  async function obtenerDatos() {\r\n    try {\r\n      const promesa = new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          reject(\"Error al obtener los datos\");\r\n        }, 1000);\r\n      });\r\n\r\n      const resultado = await promesa;\r\n      console.log(resultado);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error); // Imprime \"Error: Error al obtener los datos\"\r\n    }\r\n  }\r\n\r\n  obtenerDatos();\n  ```\n\n## MODULOS\n\nLos módulos permiten dividir el código en archivos separados, facilitando la organización y reutilización del código.\n\n* **Exportación:**\n\n  ```javascript\n  // archivo: modulo.js\r\n  export function sumar(a, b) {\r\n    return a + b;\r\n  }\r\n\r\n  export const PI = 3.14159;\n  ```\n\n* **Importación:**\n\n  ```javascript\n  // archivo: main.js\r\n  import { sumar, PI } from './modulo.js';\r\n\r\n  console.log(sumar(5, 3)); // Imprime 8\r\n  console.log(PI); // Imprime 3.14159\n  ```\n\n## OBJETOS LITERALES MEJORADOS\n\nLos objetos literales mejorados ofrecen una sintaxis más concisa para definir objetos.\n\n* **Inicialización de propiedades:**\n\n  ```javascript\n  const nombre = \"Carlos\";\r\n  const edad = 25;\r\n\r\n  const persona = {\r\n    nombre,\r\n    edad,\r\n    saludar() {\r\n      console.log(`Hola, soy ${this.nombre}`);\r\n    }\r\n  };\r\n\r\n  persona.saludar(); // Imprime \"Hola, soy Carlos\"\n  ```\n\n## PARAMETROS POR DEFECTO\n\nLos parámetros por defecto permiten asignar valores predeterminados a los parámetros de una función.\n\n* **Ejemplo:**\n\n  ```javascript\n  function saludar(nombre = \"Invitado\") {\r\n    console.log(`Hola, ${nombre}!`);\r\n  }\r\n\r\n  saludar(); // Imprime \"Hola, Invitado!\"\r\n  saludar(\"María\"); // Imprime \"Hola, María!\"\n  ```\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: JavaScript](https://developer.mozilla.org/es/docs/Web/JavaScript)\n* [ECMAScript 2015 (ES6) and later](https://www.ecma-international.org/publications-and-standards/standards/ecma-262/)\n* [You Don't Know JS Yet: Get Started](https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/get-started)\n"
  },
  {
    "slug": "/programming/languages/javascript/modern-javascript/let-const",
    "title": "LET Y CONST JAVASCRIPT",
    "description": "Diferencias y usos de let y const en JavaScript.",
    "content": "En JavaScript, `let` y `const` son dos formas modernas de declarar variables, introducidas en ECMAScript 2015 (ES6).  Antes de ES6, la única forma de declarar variables era con la palabra clave `var`.  Sin embargo, `var` tiene algunas peculiaridades en cuanto al alcance (scope) que pueden llevar a errores inesperados.  `let` y `const` fueron introducidas para solucionar estos problemas y proporcionar un control más preciso sobre el alcance de las variables.\n\n## OBJETIVOS CLAVE\n\n* Entender las diferencias entre `let`, `const` y `var`.\n* Comprender el concepto de alcance de bloque (block scope).\n* Saber cuándo usar `let` y cuándo usar `const`.\n* Evitar errores comunes asociados con el uso de `var`.\n\n## DIFERENCIAS ENTRE VAR, LET Y CONST\n\n### VAR\n\n* **Alcance de función o global:** Si se declara dentro de una función, su alcance es la función entera. Si se declara fuera de una función, su alcance es global.\n* **Hoisting:** Las declaraciones `var` son \"elevadas\" (hoisted) al principio de su alcance, lo que significa que puedes usar la variable antes de que aparezca la declaración en el código. Sin embargo, su valor será `undefined` hasta que se alcance la línea de declaración.\n* **Redeclaración:** Permite redeclarar la misma variable dentro de su alcance.\n\n### LET\n\n* **Alcance de bloque:** El alcance de una variable `let` se limita al bloque (un conjunto de sentencias dentro de llaves `{}`) en el que se declara.\n* **No hoisting:** Aunque las declaraciones `let` también son elevadas, no se inicializan. Intentar usar una variable `let` antes de su declaración resultará en un error `ReferenceError`. Esto se conoce como la \"zona muerta temporal\" (Temporal Dead Zone o TDZ).\n* **No redeclaración:** No permite redeclarar la misma variable dentro de su alcance.\n\n### CONST\n\n* **Alcance de bloque:** Similar a `let`, el alcance de una variable `const` se limita al bloque en el que se declara.\n* **No hoisting:** Al igual que `let`, `const` también tiene una zona muerta temporal.\n* **No redeclaración:** No permite redeclarar la misma variable dentro de su alcance.\n* **Inmutable:** Una vez que se asigna un valor a una variable `const`, no se puede reasignar. Sin embargo, si `const` se usa con un objeto o un array, los contenidos del objeto o array pueden ser modificados, pero la variable no puede ser reasignada a un nuevo objeto o array.\n\n## ALCANCE DE BLOQUE\n\nEl alcance de bloque es una característica clave de `let` y `const`. Significa que una variable declarada dentro de un bloque (por ejemplo, dentro de un bucle `for` o una sentencia `if`) solo es accesible dentro de ese bloque.\n\n```javascript\nfunction ejemplo() {\r\n  if (true) {\r\n    let x = 10;\r\n    const y = 20;\r\n    var z = 30;\r\n  }\r\n  // x e y no son accesibles aquí\r\n  console.log(z); // 30 (z es accesible porque fue declarada con var)\r\n}\r\n\r\nejemplo();\n```\n\nEn este ejemplo, `x` e `y` no son accesibles fuera del bloque `if`, mientras que `z` sí lo es porque fue declarada con `var`.\n\n## CUANDO USAR LET Y CUANDO USAR CONST\n\n* **`const`:** Usa `const` para variables que no deberían ser reasignadas después de su inicialización. Esto ayuda a prevenir errores accidentales y hace que el código sea más fácil de entender. Ejemplos comunes incluyen constantes matemáticas, configuraciones, o referencias a elementos del DOM.\n* **`let`:** Usa `let` para variables que necesitan ser reasignadas. Esto es común en bucles, contadores, o variables que cambian su valor a lo largo del tiempo.\n\n```javascript\nconst PI = 3.14159; // Nunca cambiará\r\nlet radio = 5; // Puede cambiar\r\nlet area = PI * radio * radio;\r\n\r\nconsole.log(area); // 78.53975\r\n\r\nradio = 10;\r\narea = PI * radio * radio;\r\n\r\nconsole.log(area); // 314.159\n```\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: BUCLE FOR\n\n```javascript\nfor (let i = 0; i < 5; i++) {\r\n  console.log(i);\r\n}\r\n\r\n// console.log(i); // Error: i no está definido fuera del bucle\n```\n\nEn este ejemplo, `i` solo es accesible dentro del bucle `for`.\n\n### EJEMPLO 2: CONST CON OBJETOS\n\n```javascript\nconst persona = {\r\n  nombre: \"Juan\",\r\n  edad: 30\r\n};\r\n\r\npersona.edad = 31; // Esto es válido, estamos modificando la propiedad del objeto\r\nconsole.log(persona); // { nombre: 'Juan', edad: 31 }\r\n\r\n// persona = { nombre: \"Pedro\", edad: 25 }; // Error: No se puede reasignar a la variable persona\n```\n\nAunque `persona` es una constante, podemos modificar sus propiedades. Lo que no podemos hacer es reasignar `persona` a un nuevo objeto.\n\n### EJEMPLO 3: CONST CON ARRAYS\n\n```javascript\nconst numeros = [1, 2, 3];\r\n\r\nnumeros.push(4); // Esto es válido, estamos modificando el array\r\nconsole.log(numeros); // [ 1, 2, 3, 4 ]\r\n\r\n// numeros = [4, 5, 6]; // Error: No se puede reasignar a la variable numeros\n```\n\nSimilar a los objetos, podemos modificar los elementos de un array declarado con `const`, pero no podemos reasignar la variable a un nuevo array.\n\n## CONSEJOS ADICIONALES\n\n* **Usa `const` por defecto:** Siempre que sea posible, usa `const` para declarar variables. Esto ayuda a hacer el código más predecible y reduce la posibilidad de errores.\n* **Sé explícito:** Usa `let` solo cuando necesites reasignar una variable. Esto hace que el código sea más fácil de entender y mantener.\n* **Evita `var`:** En general, es mejor evitar el uso de `var` en el código moderno de JavaScript. `let` y `const` proporcionan un control más preciso sobre el alcance de las variables y ayudan a prevenir errores comunes.\n\n## CONCLUSION\n\n`let` y `const` son herramientas poderosas para declarar variables en JavaScript. Proporcionan un control más preciso sobre el alcance de las variables y ayudan a prevenir errores comunes asociados con el uso de `var`. Al entender las diferencias entre `let`, `const` y `var`, y al seguir las mejores prácticas, puedes escribir código JavaScript más limpio, más fácil de entender y más robusto.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: let](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/let)\n* [MDN Web Docs: const](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/const)\n* [Diferencias entre var, let y const en JavaScript](https://www.freecodecamp.org/espanol/news/var-let-y-const-cual-es-la-diferencia/)\n"
  },
  {
    "slug": "/programming/languages/javascript/modern-javascript/modules",
    "title": "Módulos",
    "description": "Exploracion profunda de los modulos en Javascript, incluyendo CommonJS, AMD, y ES Modules.",
    "content": "Los módulos en JavaScript son una parte fundamental de la organización y estructuración del código, especialmente en aplicaciones grandes y complejas. Permiten dividir el código en piezas reutilizables y mantenibles, evitando la contaminación del espacio de nombres global y facilitando la gestión de dependencias.\n\n## OBJETIVOS CLAVE\n\n1. **Encapsulamiento:** Aislar el código en unidades lógicas para evitar conflictos de nombres y reducir la complejidad.\n2. **Reutilización:** Facilitar la reutilización de código en diferentes partes de la aplicación o en otros proyectos.\n3. **Mantenibilidad:** Mejorar la mantenibilidad del código al dividirlo en módulos más pequeños y manejables.\n4. **Gestión de Dependencias:** Declarar y gestionar las dependencias de cada módulo de forma clara y explícita.\n\n### HISTORIA DE LOS MODULOS EN JAVASCRIPT\n\nJavaScript, en sus primeras versiones, no tenía un sistema de módulos nativo. Esto significaba que todo el código se ejecutaba en el mismo espacio de nombres global, lo que podía llevar a conflictos de nombres y dificultaba la organización del código en aplicaciones grandes.\n\nPara solucionar este problema, surgieron diferentes patrones y bibliotecas para implementar módulos en JavaScript, como:\n\n* **CommonJS:** Utilizado principalmente en entornos de servidor, como Node.js.\n* **Asynchronous Module Definition (AMD):** Diseñado para navegadores web, permitiendo la carga asíncrona de módulos.\n* **ECMAScript Modules (ES Modules):** Introducido en ECMAScript 2015 (ES6), es el sistema de módulos estándar de JavaScript.\n\n### COMMONJS\n\nCommonJS fue uno de los primeros sistemas de módulos ampliamente adoptados en JavaScript. Se utiliza principalmente en entornos de servidor, como Node.js.\n\n**Características Principales:**\n\n* **`require()`:** Se utiliza para importar módulos.\n* **`module.exports`:** Se utiliza para exportar módulos.\n* **Sincrónico:** La carga de módulos es síncrona, lo que significa que el código se bloquea hasta que se carga el módulo.\n\n**Ejemplo:**\n\n```javascript\n// modulo.js\r\nfunction saludar(nombre) {\r\n  return 'Hola, ' + nombre + '!';\r\n}\r\n\r\nmodule.exports = saludar;\n```\n\n```javascript\n// app.js\r\nconst saludar = require('./modulo');\r\n\r\nconsole.log(saludar('Juan')); // Hola, Juan!\n```\n\n### ASYNCHRONOUS MODULE DEFINITION (AMD)\n\nAMD fue diseñado para navegadores web, donde la carga síncrona de módulos puede ser problemática debido a la latencia de la red. AMD permite la carga asíncrona de módulos, lo que mejora el rendimiento de la aplicación.\n\n**Características Principales:**\n\n* **`define()`:** Se utiliza para definir módulos y sus dependencias.\n* **Asíncrono:** La carga de módulos es asíncrona.\n\n**Ejemplo (usando RequireJS):**\n\n```javascript\n// modulo.js\r\ndefine(function() {\r\n  function saludar(nombre) {\r\n    return 'Hola, ' + nombre + '!';\r\n  }\r\n\r\n  return {\r\n    saludar: saludar\r\n  };\r\n});\n```\n\n```html\n<!-- index.html -->\r\n<script src=\"require.js\"></script>\r\n<script>\r\n  require(['modulo'], function(modulo) {\r\n    console.log(modulo.saludar('Juan')); // Hola, Juan!\r\n  });\r\n</script>\n```\n\n### ECMASCRIPT MODULES (ES MODULES)\n\nES Modules es el sistema de módulos estándar de JavaScript, introducido en ECMAScript 2015 (ES6). Ofrece una sintaxis clara y concisa para importar y exportar módulos, y es compatible con navegadores web y entornos de servidor.\n\n**Características Principales:**\n\n* **`import`:** Se utiliza para importar módulos.\n* **`export`:** Se utiliza para exportar módulos.\n* **Estático:** La estructura de los módulos se analiza estáticamente, lo que permite optimizaciones y detección temprana de errores.\n* **Asíncrono:** La carga de módulos es asíncrona en navegadores web.\n\n**Ejemplo:**\n\n```javascript\n// modulo.js\r\nexport function saludar(nombre) {\r\n  return 'Hola, ' + nombre + '!';\r\n}\n```\n\n```javascript\n// app.js\r\nimport { saludar } from './modulo.js';\r\n\r\nconsole.log(saludar('Juan')); // Hola, Juan!\n```\n\n### USO DE ES MODULES EN NODE.JS\n\nA partir de Node.js 14, se puede utilizar ES Modules de forma nativa. Para ello, se debe añadir `\"type\": \"module\"` en el `package.json` o utilizar la extensión `.mjs` para los archivos de módulo.\n\n**Ejemplo (`package.json`):**\n\n```json\n{\r\n  \"name\": \"mi-proyecto\",\r\n  \"version\": \"1.0.0\",\r\n  \"type\": \"module\",\r\n  \"dependencies\": {}\r\n}\n```\n\n**Ejemplo (`modulo.js`):**\n\n```javascript\n// modulo.js\r\nexport function saludar(nombre) {\r\n  return 'Hola, ' + nombre + '!';\r\n}\n```\n\n**Ejemplo (`app.js`):**\n\n```javascript\n// app.js\r\nimport { saludar } from './modulo.js';\r\n\r\nconsole.log(saludar('Juan')); // Hola, Juan!\n```\n\n### TIPOS DE EXPORTACIONES\n\n#### EXPORTACIONES NOMBRADAS\n\nLas exportaciones nombradas permiten exportar múltiples valores desde un módulo, cada uno con su propio nombre.\n\n**Ejemplo:**\n\n```javascript\n// modulo.js\r\nexport function saludar(nombre) {\r\n  return 'Hola, ' + nombre + '!';\r\n}\r\n\r\nexport const PI = 3.1416;\n```\n\n```javascript\n// app.js\r\nimport { saludar, PI } from './modulo.js';\r\n\r\nconsole.log(saludar('Juan')); // Hola, Juan!\r\nconsole.log(PI); // 3.1416\n```\n\n#### EXPORTACION POR DEFECTO\n\nLa exportación por defecto permite exportar un único valor desde un módulo como valor por defecto.\n\n**Ejemplo:**\n\n```javascript\n// modulo.js\r\nfunction saludar(nombre) {\r\n  return 'Hola, ' + nombre + '!';\r\n}\r\n\r\nexport default saludar;\n```\n\n```javascript\n// app.js\r\nimport saludar from './modulo.js';\r\n\r\nconsole.log(saludar('Juan')); // Hola, Juan!\n```\n\n### IMPORTACIONES DINAMICAS\n\nLas importaciones dinámicas permiten importar módulos de forma asíncrona en tiempo de ejecución. Esto puede ser útil para cargar módulos bajo demanda o para optimizar el rendimiento de la aplicación.\n\n**Ejemplo:**\n\n```javascript\nasync function cargarModulo() {\r\n  const modulo = await import('./modulo.js');\r\n  console.log(modulo.saludar('Juan')); // Hola, Juan!\r\n}\r\n\r\ncargarModulo();\n```\n\n### CONCLUSION\n\nLos módulos son una parte esencial del desarrollo de JavaScript moderno. Permiten organizar el código en unidades reutilizables y mantenibles, facilitando la gestión de dependencias y mejorando la estructura general de la aplicación. Con la llegada de ES Modules, JavaScript finalmente cuenta con un sistema de módulos estándar y potente que es compatible con navegadores web y entornos de servidor.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: JavaScript modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)\n* [Node.js documentation: Modules](https://nodejs.org/api/modules.html)\n* [ES Modules: A cartoon deep dive](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/)\n"
  },
  {
    "slug": "/programming/languages/javascript/modern-javascript/promises-async-await",
    "title": "Promesas y Async/Await",
    "description": "Manejo de operaciones asíncronas en JavaScript utilizando Promesas y Async/Await.",
    "content": "JavaScript, siendo un lenguaje de un solo hilo, requiere mecanismos para manejar operaciones que no se completan inmediatamente, como las solicitudes de red o el acceso a archivos. Tradicionalmente, esto se ha manejado con *callbacks*. Sin embargo, el uso excesivo de callbacks puede llevar al \"callback hell\", un código difícil de leer y mantener. Las *promesas* y *async/await* son alternativas modernas que simplifican el manejo del asincronismo, haciendo el código más legible y mantenible.\n\n## OBJETIVOS CLAVE SOBRE EL TEMA\n\n1. **Comprender el problema del asincronismo:** Identificar por qué JavaScript necesita mecanismos especiales para manejar operaciones que tardan en completarse.\n2. **Dominar el concepto de Promesas:** Entender qué son las promesas, cómo se crean, y cómo se manejan sus posibles resultados (éxito o fracaso).\n3. **Aprender a usar Async/Await:** Utilizar async/await para escribir código asíncrono que se vea y se comporte de manera similar al código síncrono.\n4. **Manejo de errores:** Implementar estrategias efectivas para capturar y manejar errores en operaciones asíncronas.\n5. **Aplicaciones prácticas:** Aplicar promesas y async/await en escenarios comunes, como llamadas a APIs y manipulación de datos.\n\n## PROMESAS\n\nUna promesa en JavaScript es un objeto que representa la eventual finalización (o falla) de una operación asíncrona y su valor resultante. Una promesa puede estar en uno de tres estados:\n\n* **Pendiente (Pending):** Estado inicial, ni cumplida ni rechazada.\n* **Cumplida (Fulfilled):** La operación se completó con éxito.\n* **Rechazada (Rejected):** La operación falló.\n\n### CREACION DE UNA PROMESA\n\nPara crear una promesa, se utiliza el constructor `Promise`, que recibe una función con dos argumentos: `resolve` y `reject`.\n\n```javascript\nconst miPromesa = new Promise((resolve, reject) => {\r\n  // Operación asíncrona (ejemplo: setTimeout)\r\n  setTimeout(() => {\r\n    const exito = true; // Simula un resultado exitoso o fallido\r\n    if (exito) {\r\n      resolve(\"¡Operación exitosa!\"); // Resuelve la promesa con un valor\r\n    } else {\r\n      reject(\"¡Operación fallida!\"); // Rechaza la promesa con un motivo\r\n    }\r\n  }, 2000); // Espera 2 segundos\r\n});\n```\n\nEn este ejemplo, la promesa se resuelve después de 2 segundos si `exito` es `true`, y se rechaza si es `false`.\n\n### MANEJO DE RESULTADOS DE UNA PROMESA\n\nPara manejar el resultado de una promesa, se utilizan los métodos `.then()` y `.catch()`.\n\n* `.then(onFulfilled, onRejected)`: Recibe dos funciones como argumentos. `onFulfilled` se ejecuta cuando la promesa se resuelve, y `onRejected` se ejecuta cuando la promesa se rechaza.\n* `.catch(onRejected)`: Es una forma abreviada de manejar el rechazo de la promesa.\n\n```javascript\nmiPromesa\r\n  .then(\r\n    (resultado) => {\r\n      console.log(\"Éxito:\", resultado); // Se ejecuta si la promesa se resuelve\r\n    },\r\n    (error) => {\r\n      console.error(\"Error:\", error); // Se ejecuta si la promesa se rechaza\r\n    }\r\n  )\r\n  .catch((error) => {\r\n    console.error(\"Error (catch):\", error); // Otra forma de manejar el error\r\n  });\n```\n\n### ENCADENAMIENTO DE PROMESAS\n\nLas promesas se pueden encadenar para realizar una serie de operaciones asíncronas de forma secuencial. Cada `.then()` puede retornar una nueva promesa, lo que permite encadenar operaciones.\n\n```javascript\nfunction obtenerDatos() {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve({ id: 1, nombre: \"Ejemplo\" });\r\n    }, 1000);\r\n  });\r\n}\r\n\r\nfunction procesarDatos(datos) {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(`Datos procesados: ${datos.nombre}`);\r\n    }, 1000);\r\n  });\r\n}\r\n\r\nobtenerDatos()\r\n  .then((datos) => {\r\n    console.log(\"Datos obtenidos:\", datos);\r\n    return procesarDatos(datos); // Retorna una nueva promesa\r\n  })\r\n  .then((resultado) => {\r\n    console.log(\"Resultado:\", resultado);\r\n  })\r\n  .catch((error) => {\r\n    console.error(\"Error:\", error);\r\n  });\n```\n\n## ASYNC/AWAIT\n\n`async/await` es una sintaxis que facilita el trabajo con promesas, permitiendo escribir código asíncrono de manera más legible y similar al código síncrono.\n\n* `async`: Se utiliza para definir una función asíncrona. Una función `async` siempre retorna una promesa, implícitamente.\n* `await`: Se utiliza dentro de una función `async` para esperar a que una promesa se resuelva. El uso de `await` pausa la ejecución de la función hasta que la promesa se cumpla o se rechace.\n\n### USO DE ASYNC/AWAIT\n\n```javascript\nasync function ejecutarOperaciones() {\r\n  try {\r\n    const datos = await obtenerDatos(); // Espera a que la promesa se resuelva\r\n    console.log(\"Datos obtenidos:\", datos);\r\n\r\n    const resultado = await procesarDatos(datos); // Espera a que la promesa se resuelva\r\n    console.log(\"Resultado:\", resultado);\r\n  } catch (error) {\r\n    console.error(\"Error:\", error); // Maneja cualquier error que ocurra\r\n  }\r\n}\r\n\r\nejecutarOperaciones();\n```\n\nEn este ejemplo, la función `ejecutarOperaciones` es una función `async`. Dentro de ella, `await` se utiliza para esperar a que las promesas retornadas por `obtenerDatos` y `procesarDatos` se resuelvan. Si alguna de las promesas se rechaza, el error se captura en el bloque `catch`.\n\n### MANEJO DE ERRORES CON ASYNC/AWAIT\n\nEl manejo de errores con `async/await` se realiza utilizando bloques `try...catch`. Cualquier error que ocurra dentro del bloque `try`, ya sea un error síncrono o el rechazo de una promesa, será capturado por el bloque `catch`.\n\n```javascript\nasync function obtenerDatosDeAPI(url) {\r\n  try {\r\n    const respuesta = await fetch(url); // Lanza un error si la respuesta no es exitosa\r\n    const datos = await respuesta.json(); // Lanza un error si no se puede parsear el JSON\r\n    return datos;\r\n  } catch (error) {\r\n    console.error(\"Error al obtener datos:\", error);\r\n    throw error; // Re-lanza el error para que pueda ser manejado por el llamador\r\n  }\r\n}\r\n\r\nasync function usarDatos() {\r\n  try {\r\n    const datos = await obtenerDatosDeAPI(\"https://ejemplo.com/api/datos\");\r\n    console.log(\"Datos de la API:\", datos);\r\n  } catch (error) {\r\n    console.error(\"Error al usar datos:\", error);\r\n  }\r\n}\r\n\r\nusarDatos();\n```\n\nEn este ejemplo, la función `obtenerDatosDeAPI` utiliza `fetch` para obtener datos de una API. Si la respuesta de la API no es exitosa (por ejemplo, un código de estado 404 o 500), `fetch` lanza un error. Este error, junto con cualquier error que ocurra al parsear el JSON, es capturado por el bloque `catch`.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### OBTENER DATOS DE UNA API\n\nUn caso de uso común para promesas y async/await es obtener datos de una API.\n\n```javascript\nasync function obtenerUsuario(id) {\r\n  try {\r\n    const respuesta = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n    const usuario = await respuesta.json();\r\n    return usuario;\r\n  } catch (error) {\r\n    console.error(\"Error al obtener el usuario:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function mostrarUsuario(id) {\r\n  const usuario = await obtenerUsuario(id);\r\n  if (usuario) {\r\n    console.log(\"Usuario:\", usuario);\r\n  } else {\r\n    console.log(\"No se pudo obtener el usuario.\");\r\n  }\r\n}\r\n\r\nmostrarUsuario(1); // Obtiene y muestra el usuario con ID 1\n```\n\n### MANIPULACION DE ARCHIVOS\n\nOtro caso de uso es la manipulación de archivos en entornos como Node.js.\n\n```javascript\nconst fs = require('fs').promises;\r\n\r\nasync function leerArchivo(ruta) {\r\n  try {\r\n    const contenido = await fs.readFile(ruta, 'utf8');\r\n    console.log(\"Contenido del archivo:\", contenido);\r\n    return contenido;\r\n  } catch (error) {\r\n    console.error(\"Error al leer el archivo:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function escribirArchivo(ruta, contenido) {\r\n  try {\r\n    await fs.writeFile(ruta, contenido, 'utf8');\r\n    console.log(\"Archivo escrito con éxito.\");\r\n  } catch (error) {\r\n    console.error(\"Error al escribir el archivo:\", error);\r\n  }\r\n}\r\n\r\nasync function procesarArchivo(rutaLectura, rutaEscritura) {\r\n  const contenido = await leerArchivo(rutaLectura);\r\n  if (contenido) {\r\n    const contenidoProcesado = contenido.toUpperCase();\r\n    await escribirArchivo(rutaEscritura, contenidoProcesado);\r\n  }\r\n}\r\n\r\nprocesarArchivo('archivo_entrada.txt', 'archivo_salida.txt');\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: Promise](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n* [MDN Web Docs: async function](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/async_function)\n* [MDN Web Docs: await](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/await)\n* [JavaScript.info: Async/await](https://javascript.info/async-await)\n* [Google Developers: JavaScript Promises](https://developers.google.com/web/fundamentals/primers/promises)\n"
  },
  {
    "slug": "/programming/languages/javascript/modern-javascript/spread-rest",
    "title": "Spread y Rest",
    "description": "Explicación detallada de los operadores Spread y Rest en JavaScript, sus usos, diferencias y ejemplos prácticos.",
    "content": "Los operadores Spread y Rest son características introducidas en ECMAScript 6 (ES6) que permiten trabajar de manera más flexible con arrays y objetos. Aunque su sintaxis es similar (tres puntos: `...`), su función es diferente dependiendo del contexto en el que se utilicen.\n\n## OBJETIVOS CLAVE\n\n1. **Comprender la diferencia** entre el operador Spread y el operador Rest.\n2. **Utilizar el operador Spread** para expandir arrays y objetos.\n3. **Utilizar el operador Rest** para recolectar argumentos en funciones y desestructurar arrays y objetos.\n4. **Aplicar estos operadores** en casos prácticos para mejorar la legibilidad y eficiencia del código.\n\n## OPERADOR SPREAD\n\nEl operador Spread (`...`) permite expandir un iterable (como un array o una cadena) en lugares donde se esperan cero o más argumentos (para llamadas a funciones) o elementos (para literales de array) o pares clave-valor (para literales de objeto).\n\n### EXPANDIENDO ARRAYS\n\nUna de las aplicaciones más comunes del operador Spread es expandir un array en otro array.\n\n```javascript\nconst arr1 = [1, 2, 3];\r\nconst arr2 = [4, 5, 6];\r\n\r\nconst combinedArray = [...arr1, ...arr2];\r\nconsole.log(combinedArray); // Output: [1, 2, 3, 4, 5, 6]\n```\n\nEn este ejemplo, el operador Spread expande `arr1` y `arr2` dentro de `combinedArray`, creando un nuevo array que contiene todos los elementos de ambos arrays.\n\n### COPIANDO ARRAYS\n\nEl operador Spread también se puede utilizar para crear una copia superficial de un array.\n\n```javascript\nconst originalArray = [1, 2, 3];\r\nconst copiedArray = [...originalArray];\r\n\r\nconsole.log(copiedArray); // Output: [1, 2, 3]\r\n\r\n// Modificar copiedArray no afecta originalArray\r\ncopiedArray[0] = 10;\r\nconsole.log(originalArray); // Output: [1, 2, 3]\r\nconsole.log(copiedArray);  // Output: [10, 2, 3]\n```\n\nEs importante tener en cuenta que esta es una copia superficial. Si el array contiene objetos, solo se copiarán las referencias a esos objetos, no los objetos en sí.\n\n### EXPANDIENDO OBJETOS\n\nEl operador Spread también se puede utilizar para expandir las propiedades de un objeto en otro objeto.\n\n```javascript\nconst obj1 = { a: 1, b: 2 };\r\nconst obj2 = { c: 3, d: 4 };\r\n\r\nconst combinedObject = { ...obj1, ...obj2 };\r\nconsole.log(combinedObject); // Output: { a: 1, b: 2, c: 3, d: 4 }\n```\n\nSi hay propiedades con el mismo nombre en ambos objetos, la propiedad del último objeto prevalecerá.\n\n```javascript\nconst obj1 = { a: 1, b: 2 };\r\nconst obj2 = { a: 10, c: 3 };\r\n\r\nconst combinedObject = { ...obj1, ...obj2 };\r\nconsole.log(combinedObject); // Output: { a: 10, b: 2, c: 3 }\n```\n\n### UTILIZANDO SPREAD CON FUNCIONES\n\nEl operador Spread puede ser utilizado para pasar los elementos de un array como argumentos a una función.\n\n```javascript\nfunction sum(x, y, z) {\r\n  return x + y + z;\r\n}\r\n\r\nconst numbers = [1, 2, 3];\r\nconsole.log(sum(...numbers)); // Output: 6\n```\n\n## OPERADOR REST\n\nEl operador Rest (`...`) permite representar un número indefinido de argumentos como un array. Se utiliza principalmente en dos contextos:\n\n1. **Parámetros de funciones:** Permite a una función aceptar un número variable de argumentos.\n2. **Desestructuración:** Permite extraer una parte de un array u objeto y asignar el resto a una nueva variable.\n\n### PARAMETROS REST EN FUNCIONES\n\nCuando se utiliza en la lista de parámetros de una función, el operador Rest permite recolectar todos los argumentos restantes en un array.\n\n```javascript\nfunction myFun(a, b, ...args) {\r\n  console.log(\"a\", a)\r\n  console.log(\"b\", b)\r\n  console.log(\"args\", args)\r\n}\r\n\r\nmyFun(\"uno\", \"dos\", \"tres\", \"cuatro\", \"cinco\");\r\n// Output:\r\n// a uno\r\n// b dos\r\n// args [ 'tres', 'cuatro', 'cinco' ]\n```\n\nEn este ejemplo, `a` y `b` reciben los dos primeros argumentos, y todos los argumentos restantes se recolectan en el array `args`.\n\n### DESESTRUCTURACION CON REST\n\nEl operador Rest también se puede utilizar en la desestructuración de arrays y objetos.\n\n#### DESESTRUCTURACION DE ARRAYS\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\r\nconst [first, second, ...rest] = numbers;\r\n\r\nconsole.log(first);  // Output: 1\r\nconsole.log(second); // Output: 2\r\nconsole.log(rest);   // Output: [3, 4, 5]\n```\n\nAquí, `first` y `second` reciben los dos primeros elementos del array, y el resto de los elementos se recolectan en el array `rest`.\n\n#### DESESTRUCTURACION DE OBJETOS\n\n```javascript\nconst person = {\r\n  name: \"Juan\",\r\n  age: 30,\r\n  city: \"Madrid\",\r\n  country: \"España\"\r\n};\r\n\r\nconst { name, age, ...address } = person;\r\n\r\nconsole.log(name);    // Output: Juan\r\nconsole.log(age);     // Output: 30\r\nconsole.log(address); // Output: { city: 'Madrid', country: 'España' }\n```\n\nEn este caso, `name` y `age` reciben los valores correspondientes del objeto, y el resto de las propiedades se recolectan en el objeto `address`.\n\n## DIFERENCIAS CLAVE\n\n| Característica | Operador Spread                               | Operador Rest                                  |\r\n| :------------- | :-------------------------------------------- | :--------------------------------------------- |\r\n| Función        | Expande un iterable en elementos individuales | Recolecta elementos en un array                |\r\n| Uso            | Llamadas a funciones, literales de array y objeto | Parámetros de funciones, desestructuración |\r\n| Contexto       | Donde se esperan múltiples valores           | Donde se espera un número variable de valores |\n\n## EJEMPLOS PRACTICOS\n\n### COMBINANDO MULTIPLES ARRAYS\n\n```javascript\nconst arr1 = [1, 2];\r\nconst arr2 = [3, 4];\r\nconst arr3 = [5, 6];\r\n\r\nconst combined = [...arr1, ...arr2, ...arr3];\r\nconsole.log(combined); // Output: [1, 2, 3, 4, 5, 6]\n```\n\n### CREANDO UNA COPIA DE UN OBJETO CON MODIFICACIONES\n\n```javascript\nconst original = { a: 1, b: 2, c: 3 };\r\nconst modified = { ...original, b: 20 };\r\n\r\nconsole.log(original); // Output: { a: 1, b: 2, c: 3 }\r\nconsole.log(modified); // Output: { a: 1, b: 20, c: 3 }\n```\n\n### IMPLEMENTANDO UNA FUNCION SUMA CON UN NUMERO VARIABLE DE ARGUMENTOS\n\n```javascript\nfunction sum(...numbers) {\r\n  return numbers.reduce((acc, num) => acc + num, 0);\r\n}\r\n\r\nconsole.log(sum(1, 2, 3));       // Output: 6\r\nconsole.log(sum(1, 2, 3, 4, 5)); // Output: 15\n```\n\n## CONCLUSION\n\nLos operadores Spread y Rest son herramientas poderosas en JavaScript que facilitan la manipulación de arrays y objetos, así como la creación de funciones más flexibles. Comprender sus diferencias y aplicaciones puede mejorar significativamente la legibilidad y eficiencia del código.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: Spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)\n* [MDN Web Docs: Rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Rest_parameters)\n* [ES6 Features - Spread Operator](https://www.tutorialspoint.com/es6/es6_spread_operator.htm)\n* [ES6 Features - Rest Parameter](https://www.tutorialspoint.com/es6/es6_rest_parameter.htm)\n"
  },
  {
    "slug": "/programming/languages/javascript/modern-javascript/template-literals",
    "title": "Template Literals",
    "description": "Explicación detallada de los template literals en JavaScript, su sintaxis, ventajas y casos de uso.",
    "content": "Los template literals, también conocidos como template strings, son una característica introducida en ECMAScript 2015 (ES6) que proporciona una forma más flexible y legible de crear cadenas en JavaScript. Permiten la interpolación de expresiones y el uso de cadenas multilínea de manera más sencilla que las cadenas tradicionales.\n\n## ¿QUE SON LOS TEMPLATE LITERALS?\n\nLos template literals son una forma de definir cadenas en JavaScript utilizando comillas invertidas (`` ` ``) en lugar de comillas simples (`' '`) o dobles (`\" \"`). La principal ventaja de los template literals es que permiten la interpolación de variables y expresiones directamente dentro de la cadena, lo que facilita la creación de cadenas dinámicas.\n\n### SINTAXIS BASICA\n\nLa sintaxis básica de un template literal es la siguiente:\n\n```javascript\n`Esta es una cadena de texto.`\n```\n\nPara interpolar una variable o expresión dentro de un template literal, se utiliza la siguiente sintaxis:\n\n```javascript\n`El resultado es: ${expresion}`\n```\n\nDonde `expresion` puede ser cualquier expresión válida de JavaScript, como una variable, una operación aritmética o una llamada a una función.\n\n## OBJETIVOS CLAVE\n\n* **Facilitar la interpolación de cadenas:** Permitir la inserción de variables y expresiones directamente dentro de las cadenas sin necesidad de concatenación.\n* **Mejorar la legibilidad del código:** Ofrecer una sintaxis más clara y concisa para la creación de cadenas dinámicas.\n* **Soporte para cadenas multilínea:** Permitir la creación de cadenas que ocupan varias líneas en el código fuente sin necesidad de caracteres de escape.\n* **Habilitar tagged templates:** Proporcionar una forma de procesar cadenas con funciones personalizadas, lo que abre la puerta a casos de uso avanzados como la internacionalización y el escape automático.\n\n## INTERPOLACION DE CADENAS\n\nUna de las principales ventajas de los template literals es la facilidad con la que se pueden interpolar variables y expresiones dentro de una cadena. En lugar de utilizar el operador de concatenación (`+`) para unir cadenas y variables, se puede utilizar la sintaxis `${}` para insertar el valor de una variable o el resultado de una expresión directamente en la cadena.\n\n```javascript\nconst nombre = \"Juan\";\r\nconst edad = 30;\r\n\r\nconst mensaje = `Hola, mi nombre es ${nombre} y tengo ${edad} años.`;\r\n\r\nconsole.log(mensaje); // Output: Hola, mi nombre es Juan y tengo 30 años.\n```\n\nEn este ejemplo, las variables `nombre` y `edad` se interpolan directamente dentro del template literal utilizando la sintaxis `${nombre}` y `${edad}`. El resultado es una cadena que contiene los valores de las variables.\n\n## CADENAS MULTILINEA\n\nOtra ventaja de los template literals es que permiten la creación de cadenas que ocupan varias líneas en el código fuente sin necesidad de caracteres de escape. En las cadenas tradicionales, para crear una cadena multilínea, se debe utilizar el carácter de escape `\\n` para indicar un salto de línea. Con los template literals, simplemente se puede escribir la cadena en varias líneas y los saltos de línea se conservarán.\n\n```javascript\nconst mensaje = `Esta es una cadena\r\nque ocupa varias\r\nlíneas.`;\r\n\r\nconsole.log(mensaje);\r\n/*\r\nOutput:\r\nEsta es una cadena\r\nque ocupa varias\r\nlíneas.\r\n*/\n```\n\nEn este ejemplo, la cadena `mensaje` ocupa tres líneas en el código fuente y los saltos de línea se conservan en la cadena resultante.\n\n## TAGGED TEMPLATES\n\nLos tagged templates son una característica avanzada de los template literals que permite procesar cadenas con funciones personalizadas. Un tagged template es una función que se llama con el template literal como argumento. La función recibe un array de cadenas y un array de valores interpolados.\n\n```javascript\nfunction tag(cadenas, ...valores) {\r\n  console.log(cadenas);\r\n  console.log(valores);\r\n\r\n  return \"Procesado\";\r\n}\r\n\r\nconst nombre = \"Juan\";\r\nconst edad = 30;\r\n\r\nconst mensaje = tag`Hola, mi nombre es ${nombre} y tengo ${edad} años.`;\r\n\r\nconsole.log(mensaje);\r\n/*\r\nOutput:\r\n[ 'Hola, mi nombre es ', ' y tengo ', ' años.' ]\r\n[ 'Juan', 30 ]\r\nProcesado\r\n*/\n```\n\nEn este ejemplo, la función `tag` se llama con el template literal `Hola, mi nombre es ${nombre} y tengo ${edad} años.` como argumento. La función recibe un array de cadenas `cadenas` que contiene las partes estáticas del template literal y un array de valores `valores` que contiene los valores interpolados. La función puede procesar estos arrays y devolver una nueva cadena.\n\nLos tagged templates son útiles para casos de uso avanzados como la internacionalización, el escape automático de caracteres y la creación de lenguajes de dominio específico (DSL).\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### CREACION DE HTML DINAMICO\n\nLos template literals son muy útiles para la creación de HTML dinámico en JavaScript. Se pueden utilizar para interpolar variables y expresiones directamente dentro de las etiquetas HTML, lo que facilita la creación de interfaces de usuario dinámicas.\n\n```javascript\nconst nombre = \"Juan\";\r\nconst edad = 30;\r\n\r\nconst html = `\r\n  <div>\r\n    <h1>Hola, mi nombre es ${nombre}</h1>\r\n    <p>Tengo ${edad} años.</p>\r\n  </div>\r\n`;\r\n\r\ndocument.body.innerHTML = html;\n```\n\nEn este ejemplo, se crea una cadena HTML utilizando un template literal. Las variables `nombre` y `edad` se interpolan directamente dentro de las etiquetas HTML utilizando la sintaxis `${nombre}` y `${edad}`. El resultado es una cadena HTML que contiene los valores de las variables.\n\n### CREACION DE CONSULTAS SQL DINAMICAS\n\nLos template literals también son útiles para la creación de consultas SQL dinámicas. Se pueden utilizar para interpolar variables y expresiones directamente dentro de la consulta SQL, lo que facilita la creación de consultas personalizadas.\n\n```javascript\nconst tabla = \"usuarios\";\r\nconst columna = \"nombre\";\r\nconst valor = \"Juan\";\r\n\r\nconst sql = `\r\n  SELECT *\r\n  FROM ${tabla}\r\n  WHERE ${columna} = '${valor}'\r\n`;\r\n\r\nconsole.log(sql);\r\n/*\r\nOutput:\r\nSELECT *\r\nFROM usuarios\r\nWHERE nombre = 'Juan'\r\n*/\n```\n\nEn este ejemplo, se crea una consulta SQL utilizando un template literal. Las variables `tabla`, `columna` y `valor` se interpolan directamente dentro de la consulta SQL utilizando la sintaxis `${tabla}`, `${columna}` y `${valor}`. El resultado es una cadena SQL que contiene los valores de las variables.\n\n**Precaución:** Al utilizar template literals para crear consultas SQL dinámicas, es importante tener en cuenta la seguridad. Se debe evitar la interpolación directa de valores proporcionados por el usuario para prevenir ataques de inyección SQL. En su lugar, se deben utilizar mecanismos de escape o parametrización para garantizar que los valores se traten como datos y no como código SQL.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: Template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n* [ES6 Features: Template Strings](https://es6-features.org/#StringInterpolation)\n* [FreeCodeCamp: Template Literals in JavaScript](https://www.freecodecamp.org/news/template-literals-javascript/)\n"
  },
  {
    "slug": "/programming/languages/python/control-structure",
    "title": "Estructuras de Control en Python",
    "description": "Una guía completa sobre las estructuras de control en Python, incluyendo condicionales, bucles y manejo de excepciones.",
    "content": "Las estructuras de control son elementos fundamentales en cualquier lenguaje de programación, ya que permiten dirigir el flujo de ejecución de un programa. En Python, estas estructuras se caracterizan por su sintaxis clara y legible, lo que facilita la escritura de código eficiente y mantenible. Este documento explora en detalle las estructuras de control en Python, incluyendo condicionales (`if`, `else`, `elif`), bucles (`for`, `while`) y el manejo de excepciones (`try`, `except`).\n\n## CONDICIONES: if, else, elif\n\nLas sentencias condicionales permiten ejecutar diferentes bloques de código dependiendo de si una condición es verdadera o falsa.\n\n* **`if`**: Ejecuta un bloque de código si la condición es verdadera.\n\n  ```python\n  edad = 20\r\n  if edad >= 18:\r\n      print(\"Eres mayor de edad\")\n  ```\n* **`else`**: Ejecuta un bloque de código si la condición del `if` es falsa.\n\n  ```python\n  edad = 16\r\n  if edad >= 18:\r\n      print(\"Eres mayor de edad\")\r\n  else:\r\n      print(\"Eres menor de edad\")\n  ```\n* **`elif`**: Permite evaluar múltiples condiciones en secuencia. Es una contracción de \"else if\".\n\n  ```python\n  calificacion = 75\r\n  if calificacion >= 90:\r\n      print(\"Excelente\")\r\n  elif calificacion >= 80:\r\n      print(\"Notable\")\r\n  elif calificacion >= 70:\r\n      print(\"Aprobado\")\r\n  else:\r\n      print(\"Reprobado\")\n  ```\n\n## BUCLES: for, while\n\nLos bucles permiten ejecutar un bloque de código repetidamente. Python ofrece dos tipos principales de bucles: `for` y `while`.\n\n* **`for`**: Itera sobre una secuencia (como una lista, tupla, cadena) o cualquier objeto iterable.\n\n  ```python\n  frutas = [\"manzana\", \"banana\", \"cereza\"]\r\n  for fruta in frutas:\r\n      print(fruta)\n  ```\n\n  También se utiliza comúnmente con la función `range()` para iterar un número específico de veces.\n\n  ```python\n  for i in range(5):\r\n      print(i)  # Imprime 0, 1, 2, 3, 4\n  ```\n* **`while`**: Ejecuta un bloque de código mientras una condición sea verdadera.\n\n  ```python\n  contador = 0\r\n  while contador < 5:\r\n      print(contador)\r\n      contador += 1\n  ```\n\n  Es importante asegurarse de que la condición del `while` eventualmente se vuelva falsa para evitar un bucle infinito.\n\n## MANEJO DE EXCEPCIONES: try, except\n\nEl manejo de excepciones permite controlar errores que pueden ocurrir durante la ejecución de un programa.\n\n* **`try`**: Encierra el código que puede generar una excepción.\n* **`except`**: Captura y maneja la excepción si ocurre.\n\n  ```python\n  try:\r\n      resultado = 10 / 0\r\n  except ZeroDivisionError:\r\n      print(\"Error: División por cero\")\n  ```\n\n  También se puede incluir un bloque `else` que se ejecuta si no se produce ninguna excepción en el bloque `try`, y un bloque `finally` que se ejecuta siempre, independientemente de si se produjo o no una excepción.\n\n  ```python\n  try:\r\n      resultado = 10 / 2\r\n  except ZeroDivisionError:\r\n      print(\"Error: División por cero\")\r\n  else:\r\n      print(\"El resultado es:\", resultado)\r\n  finally:\r\n      print(\"Fin del bloque try-except\")\n  ```\n\n## OBJETIVOS CLAVE\n\n* **Control del Flujo**: Las estructuras de control permiten dirigir el flujo de ejecución de un programa, ejecutando diferentes bloques de código según las condiciones y repitiendo acciones cuando sea necesario.\n* **Manejo de Errores**: El manejo de excepciones permite controlar errores que pueden ocurrir durante la ejecución de un programa, evitando que el programa se detenga abruptamente.\n* **Legibilidad y Mantenibilidad**: El uso adecuado de las estructuras de control mejora la legibilidad y mantenibilidad del código, facilitando su comprensión y modificación.\n\n## EJEMPLO DE IMPLEMENTACION\n\n### EJEMPLO 1: CALCULADORA SIMPLE\n\n```python\ndef calculadora():\r\n    operacion = input(\"Ingrese la operación a realizar (+, -, *, /): \")\r\n    num1 = float(input(\"Ingrese el primer número: \"))\r\n    num2 = float(input(\"Ingrese el segundo número: \"))\r\n\r\n    if operacion == '+':\r\n        resultado = num1 + num2\r\n    elif operacion == '-':\r\n        resultado = num1 - num2\r\n    elif operacion == '*':\r\n        resultado = num1 * num2\r\n    elif operacion == '/':\r\n        try:\r\n            resultado = num1 / num2\r\n        except ZeroDivisionError:\r\n            print(\"Error: No se puede dividir por cero.\")\r\n            return\r\n    else:\r\n        print(\"Operación no válida.\")\r\n        return\r\n\r\n    print(\"El resultado es:\", resultado)\r\n\r\ncalculadora()\n```\n\n### EJEMPLO 2: BUSQUEDA EN UNA LISTA\n\n```python\ndef buscar_elemento(lista, elemento):\r\n    for i in range(len(lista)):\r\n        if lista[i] == elemento:\r\n            print(\"Elemento encontrado en el índice:\", i)\r\n            return\r\n    print(\"Elemento no encontrado en la lista.\")\r\n\r\nmi_lista = [10, 20, 30, 40, 50]\r\nbuscar_elemento(mi_lista, 30)\r\nbuscar_elemento(mi_lista, 60)\n```\n\n## SUBTEMAS SUGERIDOS\n\n* **Sentencias break y continue**: Controlar el flujo de los bucles.\n\n* **Comprensión de Listas**: Una forma concisa de crear listas utilizando bucles y condicionales.\n\n* **Iteradores y Generadores**: Formas avanzadas de iterar sobre secuencias.\n\n* **Manejo de Múltiples Excepciones**: Capturar y manejar diferentes tipos de excepciones.\n"
  },
  {
    "slug": "/programming/languages/python/data-types/dictionary-operations",
    "title": "Operaciones con Diccionarios en Python",
    "description": "Guía completa sobre las operaciones esenciales que puedes realizar con diccionarios en Python, incluyendo creación, acceso, modificación, eliminación y métodos avanzados.",
    "content": "Los diccionarios en Python son una de las estructuras de datos más versátiles y utilizadas. Permiten almacenar datos en pares clave-valor, lo que facilita la búsqueda y manipulación de información. Este documento detalla las operaciones fundamentales que puedes realizar con diccionarios, desde la creación hasta métodos más avanzados.\n\n## Creación de Diccionarios\n\nUn diccionario se crea utilizando llaves `{}` y definiendo pares clave-valor separados por dos puntos `:`.\n\n```python\n# Diccionario vacío\r\ndiccionario_vacio = {}\r\n\r\n# Diccionario con valores iniciales\r\npersona = {\r\n    \"nombre\": \"Juan\",\r\n    \"edad\": 30,\r\n    \"ciudad\": \"Madrid\"\r\n}\n```\n\n## ACCESO A ELEMENTOS\n\nPara acceder a un valor en un diccionario, se utiliza la clave correspondiente entre corchetes `[]`.\n\n```python\nnombre = persona[\"nombre\"]  # Accede al valor de la clave \"nombre\"\r\nprint(nombre)  # Output: Juan\n```\n\nTambién puedes utilizar el método `get()` para acceder a un valor. La ventaja de `get()` es que permite especificar un valor por defecto si la clave no existe.\n\n```python\napellido = persona.get(\"apellido\", \"Desconocido\")  # Si \"apellido\" no existe, devuelve \"Desconocido\"\r\nprint(apellido)  # Output: Desconocido\n```\n\n## MODIFICACION DE ELEMENTOS\n\nLos diccionarios son mutables, lo que significa que puedes modificar sus valores, añadir nuevas claves o eliminar claves existentes.\n\n```python\n# Modificar un valor existente\r\npersona[\"edad\"] = 31\r\n\r\n# Añadir un nuevo par clave-valor\r\npersona[\"profesion\"] = \"Ingeniero\"\r\n\r\nprint(persona)\r\n# Output: {'nombre': 'Juan', 'edad': 31, 'ciudad': 'Madrid', 'profesion': 'Ingeniero'}\n```\n\n## ELIMINACION DE ELEMENTOS\n\nPara eliminar un elemento de un diccionario, puedes utilizar la sentencia del o los métodos `pop()` y `popitem()`.\n\n```python\n# Eliminar un elemento con del\r\ndel persona[\"ciudad\"]\r\n\r\n# Eliminar un elemento con pop()\r\nedad = persona.pop(\"edad\")  # Elimina la clave \"edad\" y devuelve su valor\r\nprint(edad)  # Output: 31\r\n\r\n# Eliminar el último elemento insertado con popitem()\r\nultimo_elemento = persona.popitem()  # Elimina y devuelve el último par clave-valor\r\nprint(ultimo_elemento)  # Output: ('profesion', 'Ingeniero')\r\n\r\nprint(persona)  # Output: {'nombre': 'Juan'}\n```\n\n## METODOS DE DICCIONARIO\n\nPython proporciona varios métodos útiles para trabajar con diccionarios:\n\n* **keys()**: Devuelve una vista de todas las claves del diccionario.\n\n* **values()**: Devuelve una vista de todos los valores del diccionario.\n\n* **items()**: Devuelve una vista de todos los pares clave-valor del diccionario.\n\n* **update()**: Actualiza el diccionario con los elementos de otro diccionario o un iterable de pares clave-valor.\n\n* **clear()**: Elimina todos los elementos del diccionario.\n\n* **copy()**: Devuelve una copia superficial del diccionario.\n\n```python\npersona = {\r\n    \"nombre\": \"Juan\",\r\n    \"edad\": 30,\r\n    \"ciudad\": \"Madrid\"\r\n}\r\n\r\n# keys()\r\nclaves = persona.keys()\r\nprint(claves)  # Output: dict_keys(['nombre', 'edad', 'ciudad'])\r\n\r\n# values()\r\nvalores = persona.values()\r\nprint(valores)  # Output: dict_values(['Juan', 30, 'Madrid'])\r\n\r\n# items()\r\nelementos = persona.items()\r\nprint(elementos)  # Output: dict_items([('nombre', 'Juan'), ('edad', 30), ('ciudad', 'Madrid')])\r\n\r\n# update()\r\npersona.update({\"profesion\": \"Ingeniero\", \"pais\": \"España\"})\r\nprint(persona)  # Output: {'nombre': 'Juan', 'edad': 30, 'ciudad': 'Madrid', 'profesion': 'Ingeniero', 'pais': 'España'}\r\n\r\n# clear()\r\n# persona.clear()\r\n# print(persona)  # Output: {}\r\n\r\n# copy()\r\npersona_copia = persona.copy()\r\nprint(persona_copia)  # Output: {'nombre': 'Juan', 'edad': 30, 'ciudad': 'Madrid', 'profesion': 'Ingeniero', 'pais': 'España'}\n```\n\n## ITERACCION SOBRE DICCIONARIOS\n\nPuedes iterar sobre un diccionario utilizando un bucle `for`. Por defecto, la iteración se realiza sobre las claves.\n\n```python\nfor clave in persona:\r\n    print(clave, persona[clave])\n```\n\nTambién puedes iterar sobre los valores o los pares clave-valor utilizando los métodos `values()` e `items()`, respectivamente.\n\n```python\n# Iterar sobre los valores\r\nfor valor in persona.values():\r\n    print(valor)\r\n\r\n# Iterar sobre los pares clave-valor\r\nfor clave, valor in persona.items():\r\n    print(clave, valor)\n```\n\n## COMPRESION DE DICCIONARIOS\n\nAl igual que las listas, los diccionarios también admiten la comprensión, lo que permite crear diccionarios de manera concisa.\n\n```python\n# Crear un diccionario con los cuadrados de los números del 1 al 5\r\ncuadrados = {x: x**2 for x in range(1, 6)}\r\nprint(cuadrados)  # Output: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n```\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### CONTEO DE FRECUENCIA DE PALABRAS\n\nUn ejemplo común es contar la frecuencia de palabras en un texto.\n\n```python\ntexto = \"Este es un ejemplo de texto para contar palabras. Este texto es un ejemplo.\"\r\npalabras = texto.lower().split()\r\n\r\nfrecuencia = {}\r\nfor palabra in palabras:\r\n    if palabra in frecuencia:\r\n        frecuencia[palabra] += 1\r\n    else:\r\n        frecuencia[palabra] = 1\r\n\r\nprint(frecuencia)\r\n# Output: {'este': 2, 'es': 2, 'un': 2, 'ejemplo': 2, 'de': 1, 'texto': 2, 'para': 1, 'contar': 1, 'palabras.': 1, 'texto.': 1}\n```\n\n### AGRUPACION DE DATOS\n\nOtro uso común es agrupar datos relacionados.\n\n```python\nestudiantes = [\r\n    {\"nombre\": \"Ana\", \"edad\": 20, \"carrera\": \"Ingeniería\"},\r\n    {\"nombre\": \"Pedro\", \"edad\": 22, \"carrera\": \"Medicina\"},\r\n    {\"nombre\": \"Sofia\", \"edad\": 21, \"carrera\": \"Ingeniería\"}\r\n]\r\n\r\n# Agrupar estudiantes por carrera\r\ncarreras = {}\r\nfor estudiante in estudiantes:\r\n    carrera = estudiante[\"carrera\"]\r\n    if carrera in carreras:\r\n        carreras[carrera].append(estudiante[\"nombre\"])\r\n    else:\r\n        carreras[carrera] = [estudiante[\"nombre\"]]\r\n\r\nprint(carreras)\r\n# Output: {'Ingeniería': ['Ana', 'Sofia'], 'Medicina': ['Pedro']}\n```\n"
  },
  {
    "slug": "/programming/languages/python/data-types",
    "title": "Tipos de Datos en Python",
    "description": "Explora los diferentes tipos de datos disponibles en Python, incluyendo tipos numéricos, cadenas, booleanos y estructuras de datos como listas, tuplas, diccionarios y conjuntos.",
    "content": "Python ofrece una variedad de tipos de datos incorporados que permiten a los programadores representar y manipular diferentes tipos de información. Comprender estos tipos de datos es fundamental para escribir código eficiente y efectivo en Python.\n\n## TIPOS DE DATOS PRIMITIVOS\n\nLos tipos de datos primitivos son los bloques de construcción básicos de los datos en Python.\n\n1. **Números:**\n   * **Enteros (`int`):** Representan números enteros sin parte decimal.\n     * Ejemplo: `10`, `-5`, `0`\n   * **Números de Punto Flotante (`float`):** Representan números reales con parte decimal.\n     * Ejemplo: `3.14`, `-2.5`, `0.0`\n   * **Números Complejos (`complex`):** Representan números con una parte real y una parte imaginaria.\n     * Ejemplo: `2 + 3j`, `-1 - 1j`\n\n2. **Cadenas (`str`):**\n   * Representan secuencias de caracteres. Las cadenas son inmutables, lo que significa que no se pueden modificar después de su creación.\n     * Ejemplo: `\"Hola\"`, `'Python'`, `\"123\"`\n\n3. **Booleanos (`bool`):**\n   * Representan valores de verdad: `True` o `False`.\n     * Ejemplo: `True`, `False`\n\n## ESTRUCTURA DE DATOS\n\nLas estructuras de datos son contenedores que pueden almacenar múltiples elementos de datos.\n\n1. **Listas (`list`):**\n   * Son colecciones ordenadas y mutables de elementos. Los elementos pueden ser de diferentes tipos.\n     * Ejemplo: `[1, 2, 3]`, `[\"a\", \"b\", \"c\"]`, `[1, \"hello\", 3.14]`\n\n2. **Tuplas (`tuple`):**\n   * Son colecciones ordenadas e inmutables de elementos. Similar a las listas, pero no se pueden modificar después de su creación.\n     * Ejemplo: `(1, 2, 3)`, `(\"a\", \"b\", \"c\")`\n\n3. **Diccionarios (`dict`):**\n   * Son colecciones de pares clave-valor. Las claves deben ser únicas e inmutables (por ejemplo, cadenas, números o tuplas), mientras que los valores pueden ser de cualquier tipo.\n     * Ejemplo: `{\"nombre\": \"Juan\", \"edad\": 30}`, `{1: \"a\", 2: \"b\"}`\n\n4. **Conjuntos (`set`):**\n   * Son colecciones no ordenadas de elementos únicos. Los conjuntos son mutables y se utilizan para realizar operaciones de conjuntos como unión, intersección y diferencia.\n     * Ejemplo: `{1, 2, 3}`, `{\"a\", \"b\", \"c\"}`\n\n## TIPADO DINAMICO\n\nPython es un lenguaje de tipado dinámico, lo que significa que no es necesario declarar el tipo de una variable antes de usarla. El tipo de una variable se determina en tiempo de ejecución en función del valor que se le asigna.\n\n```python\nx = 10        # x es un entero\r\nx = \"Hola\"    # x ahora es una cadena\r\nx = [1, 2, 3] # x ahora es una lista\n```\n\n## MUTABILIDAD VS INMUTABILIDAD\n\nLa mutabilidad se refiere a la capacidad de un objeto para ser modificado después de su creación.\n\nTipos Mutables: Listas, diccionarios y conjuntos son tipos de datos mutables. Esto significa que se pueden modificar sus elementos después de su creación.\n\nTipos Inmutables: Enteros, números de punto flotante, cadenas, booleanos y tuplas son tipos de datos inmutables. Esto significa que no se pueden modificar después de su creación. Si se intenta modificar un objeto inmutable, se creará un nuevo objeto en su lugar.\n\n## OBJETIVOS CLAVE\n\nComprender los Tipos de Datos: Familiarizarse con los diferentes tipos de datos disponibles en Python y cómo se utilizan para representar diferentes tipos de información.\n\nDistinguir Mutabilidad e Inmutabilidad: Entender la diferencia entre tipos de datos mutables e inmutables y cómo esto afecta la forma en que se manipulan los datos.\n\nElegir el Tipo de Datos Correcto: Aprender a seleccionar el tipo de datos más apropiado para cada situación, teniendo en cuenta factores como la necesidad de mutabilidad, la eficiencia y la legibilidad del código.\n\nUtilizar Estructuras de Datos: Dominar el uso de estructuras de datos como listas, tuplas, diccionarios y conjuntos para organizar y manipular colecciones de datos de manera eficiente.\n\n## INFORMACION INTERESANTE\n\nConversión de Tipos: Python permite convertir entre diferentes tipos de datos utilizando funciones como int(), float(), str(), list(), tuple(), dict() y set().\n\nOperadores: Python ofrece una variedad de operadores para realizar operaciones en diferentes tipos de datos, como operadores aritméticos, operadores de comparación, operadores lógicos y operadores de pertenencia.\n\nMétodos: Cada tipo de datos en Python tiene una serie de métodos asociados que permiten realizar operaciones específicas en los datos. Por ejemplo, las cadenas tienen métodos como upper(), lower(), split() y replace().\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: TIPOS NUMERICOS\n\n```python\nentero = 10\r\nflotante = 3.14\r\ncomplejo = 2 + 3j\r\n\r\nprint(type(entero))    # <class 'int'>\r\nprint(type(flotante))  # <class 'float'>\r\nprint(type(complejo))  # <class 'complex'>\n```\n\n### EJEMPLO 2: CADENAS\n\n```python\ncadena = \"Hola, mundo!\"\r\nprint(cadena)           # Hola, mundo!\r\nprint(cadena[0])        # H\r\nprint(len(cadena))      # 13\n```\n\n### EJEMPLO 3: LISTAS\n\n```python\nlista = [1, 2, 3, \"a\", \"b\", \"c\"]\r\nprint(lista)            # [1, 2, 3, 'a', 'b', 'c']\r\nlista.append(4)\r\nprint(lista)            # [1, 2, 3, 'a', 'b', 'c', 4]\n```\n\n### EJEMPLO 4: TUPLAS\n\n```python\ntupla = (1, 2, 3)\r\nprint(tupla)            # (1, 2, 3)\r\n# tupla[0] = 4          # Error: 'tuple' object does not support item assignment\n```\n\n### EJEMPLO 5: DICCIONARIO\n\n```python\ndiccionario = {\"nombre\": \"Juan\", \"edad\": 30}\r\nprint(diccionario[\"nombre\"])  # Juan\r\ndiccionario[\"ciudad\"] = \"Madrid\"\r\nprint(diccionario)            # {'nombre': 'Juan', 'edad': 30, 'ciudad': 'Madrid'}\n```\n\n### EJEMPLO 6: CONJUNTOS\n\n```python\nconjunto = {1, 2, 3, 3, 4, 5}\r\nprint(conjunto)           # {1, 2, 3, 4, 5}\r\nconjunto.add(6)\r\nprint(conjunto)           # {1, 2, 3, 4, 5, 6}\n```\n"
  },
  {
    "slug": "/programming/languages/python/data-types/list-operations",
    "title": "Operaciones con Listas en Python",
    "description": "Guía completa sobre las operaciones fundamentales que se pueden realizar con listas en Python, incluyendo acceso, modificación, adición, eliminación y manipulación avanzada de elementos.",
    "content": "Las listas en Python son una de las estructuras de datos más versátiles y utilizadas. Permiten almacenar colecciones ordenadas de elementos, que pueden ser de diferentes tipos. Dominar las operaciones con listas es esencial para cualquier programador de Python, ya que facilita la manipulación y el procesamiento de datos de manera eficiente.\n\n## INTRODUCCION A LAS LISTAS EN PYTHON\n\nUna lista en Python es una secuencia mutable de elementos. Esto significa que puedes cambiar los elementos de una lista después de su creación. Las listas se definen utilizando corchetes `[]` y los elementos se separan por comas.\n\n```python\nmi_lista = [1, 2, 3, \"a\", \"b\", \"c\", 4.5, 5.6]\n```\n\n## OPERACIONES BASICAS CON LISTAS\n\n### 1. ACCESO A ELEMENTOS\n\nPuedes acceder a los elementos de una lista utilizando su índice. Los índices en Python comienzan en 0.\n\n```python\nmi_lista = [10, 20, 30, 40, 50]\r\nprint(mi_lista[0])  # Imprime 10\r\nprint(mi_lista[3])  # Imprime 40\n```\n\nTambién puedes utilizar índices negativos para acceder a los elementos desde el final de la lista.\n\n```python\nprint(mi_lista[-1]) # Imprime 50 (el último elemento)\r\nprint(mi_lista[-2]) # Imprime 40 (el penúltimo elemento)\n```\n\n### 2. MODIFICACION DE ELEMENTOS\n\nLas listas son mutables, lo que significa que puedes cambiar el valor de un elemento específico.\n\n```python\nmi_lista = [1, 2, 3]\r\nmi_lista[1] = 10\r\nprint(mi_lista)  # Imprime [1, 10, 3]\n```\n\n### 3. ADICION DE ELEMENTOS\n\nEl método `append()` añade un elemento al final de la lista.\n\n```python\nmi_lista = [1, 2, 3]\r\nmi_lista.append(4)\r\nprint(mi_lista)  # Imprime [1, 2, 3, 4]\n```\n\nEl método `insert()` añade un elemento en una posición específica.\n\n```python\nmi_lista = [1, 2, 3]\r\nmi_lista.insert(1, 10)  # Inserta 10 en la posición 1\r\nprint(mi_lista)  # Imprime [1, 10, 2, 3]\n```\n\nEl método `extend()` añade múltiples elementos de otra lista (o cualquier iterable) al final de la lista actual.\n\n```python\nmi_lista = [1, 2, 3]\r\notra_lista = [4, 5, 6]\r\nmi_lista.extend(otra_lista)\r\nprint(mi_lista)  # Imprime [1, 2, 3, 4, 5, 6]\n```\n\n### 4. ELIMINACION DE ELEMENTOS\n\nEl método `remove()` elimina la primera ocurrencia de un valor específico de la lista.\n\n```python\nmi_lista = [1, 2, 3, 2]\r\nmi_lista.remove(2)\r\nprint(mi_lista)  # Imprime [1, 3, 2]\n```\n\nEl método `pop()` elimina el elemento en una posición específica y lo retorna. Si no se especifica la posición, elimina y retorna el último elemento.\n\n```python\nmi_lista = [1, 2, 3]\r\nelemento = mi_lista.pop(1)  # Elimina el elemento en la posición 1 (2)\r\nprint(mi_lista)  # Imprime [1, 3]\r\nprint(elemento)  # Imprime 2\r\n\r\nelemento = mi_lista.pop()   # Elimina el último elemento (3)\r\nprint(mi_lista)  # Imprime [1]\r\nprint(elemento)  # Imprime 3\n```\n\nLa palabra clave `del` elimina un elemento en una posición específica o la lista completa.\n\n```python\nmi_lista = [1, 2, 3]\r\ndel mi_lista[1]\r\nprint(mi_lista)  # Imprime [1, 3]\r\n\r\ndel mi_lista  # Elimina la lista\r\n# print(mi_lista)  # Esto causará un error porque la lista ya no existe\n```\n\n### 5. BUSQUEDA DE ELEMENTOS\n\nEl método `index()` retorna el índice de la primera ocurrencia de un valor específico.\n\n```python\nmi_lista = [10, 20, 30, 20]\r\nindice = mi_lista.index(20)\r\nprint(indice)  # Imprime 1\n```\n\nSi el valor no está en la lista, se genera una excepción `ValueError`.\n\nEl método `count()` retorna el número de veces que un valor aparece en la lista.\n\n```python\nmi_lista = [10, 20, 30, 20, 20]\r\nconteo = mi_lista.count(20)\r\nprint(conteo)  # Imprime 3\n```\n\n### 6. ORDENAMIENTO DE LISTAS\n\nEl método `sort()` ordena la lista en su lugar (modifica la lista original).\n\n```python\nmi_lista = [3, 1, 4, 1, 5, 9, 2, 6]\r\nmi_lista.sort()\r\nprint(mi_lista)  # Imprime [1, 1, 2, 3, 4, 5, 6, 9]\r\n\r\nmi_lista.sort(reverse=True)  # Ordena en orden descendente\r\nprint(mi_lista)  # Imprime [9, 6, 5, 4, 3, 2, 1, 1]\n```\n\nLa función `sorted()` retorna una nueva lista ordenada sin modificar la lista original.\n\n```python\nmi_lista = [3, 1, 4, 1, 5, 9, 2, 6]\r\nnueva_lista = sorted(mi_lista)\r\nprint(nueva_lista)  # Imprime [1, 1, 2, 3, 4, 5, 6, 9]\r\nprint(mi_lista)     # Imprime [3, 1, 4, 1, 5, 9, 2, 6] (la lista original no se modifica)\n```\n\n### 7. INVERSION DE LISTAS\n\nEl método `reverse()` invierte el orden de los elementos en la lista en su lugar.\n\n```python\nmi_lista = [1, 2, 3, 4, 5]\r\nmi_lista.reverse()\r\nprint(mi_lista)  # Imprime [5, 4, 3, 2, 1]\n```\n\n### 8. COPIA DE LISTAS\n\nEl método `copy()` retorna una copia superficial de la lista.\n\n```python\nmi_lista = [1, 2, 3]\r\ncopia_lista = mi_lista.copy()\r\nprint(copia_lista)  # Imprime [1, 2, 3]\r\n\r\nmi_lista[0] = 10\r\nprint(mi_lista)     # Imprime [10, 2, 3]\r\nprint(copia_lista)  # Imprime [1, 2, 3] (la copia no se modifica)\n```\n\nTambién puedes usar la función `list()` para crear una copia de la lista.\n\n```python\nmi_lista = [1, 2, 3]\r\ncopia_lista = list(mi_lista)\r\nprint(copia_lista)  # Imprime [1, 2, 3]\n```\n\n### 9. LIMPIEZA DE LISTAS\n\nEl método `clear()` elimina todos los elementos de la lista, dejándola vacía.\n\n```python\nmi_lista = [1, 2, 3]\r\nmi_lista.clear()\r\nprint(mi_lista)  # Imprime []\n```\n\n## OPERACIONES AVANZADAS CON LISTAS\n\n### 1. CONCATENACION DE LISTAS\n\nPuedes concatenar listas utilizando el operador `+`.\n\n```python\nlista1 = [1, 2, 3]\r\nlista2 = [4, 5, 6]\r\nlista_concatenada = lista1 + lista2\r\nprint(lista_concatenada)  # Imprime [1, 2, 3, 4, 5, 6]\n```\n\n### 2. MULTIPLICACION DE LISTAS\n\nPuedes multiplicar una lista por un número entero para repetir sus elementos.\n\n```python\nmi_lista = [1, 2, 3]\r\nlista_multiplicada = mi_lista * 3\r\nprint(lista_multiplicada)  # Imprime [1, 2, 3, 1, 2, 3, 1, 2, 3]\n```\n\n### 3. COMPRENSION DE LISTAS\n\nLa comprensión de listas es una forma concisa de crear listas en Python. Permite generar una nueva lista aplicando una expresión a cada elemento de una lista existente.\n\n```python\n# Ejemplo: Crear una lista con los cuadrados de los números del 0 al 9\r\ncuadrados = [x**2 for x in range(10)]\r\nprint(cuadrados)  # Imprime [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\r\n\r\n# Ejemplo: Crear una lista con los números pares del 0 al 9\r\npares = [x for x in range(10) if x % 2 == 0]\r\nprint(pares)  # Imprime [0, 2, 4, 6, 8]\n```\n\n### 4. LISTAS ANIDADAS\n\nLas listas pueden contener otras listas como elementos.\n\n```python\nmatriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\nprint(matriz[0][1])  # Imprime 2 (elemento en la fila 0, columna 1)\n```\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: FILTRAR ELEMENTOS DE UNA LISTA\n\n```python\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\npares = [x for x in numeros if x % 2 == 0]\r\nimpares = [x for x in numeros if x % 2 != 0]\r\n\r\nprint(\"Números pares:\", pares)    # Imprime [2, 4, 6, 8, 10]\r\nprint(\"Números impares:\", impares)  # Imprime [1, 3, 5, 7, 9]\n```\n\n### EJEMPLO 2: PROCESAR ELEMENTOS DE UNA LISTA\n\n```python\npalabras = [\"hola\", \"mundo\", \"python\"]\r\nlongitudes = [len(palabra) for palabra in palabras]\r\n\r\nprint(\"Longitudes de las palabras:\", longitudes)  # Imprime [4, 5, 6]\n```\n"
  },
  {
    "slug": "/programming/languages/python/data-types/list-operations/map-filter-reduce",
    "title": "Funciones map(), filter() y reduce() en Python",
    "description": "Descripción detallada de las funciones map(), filter() y reduce() en Python, incluyendo ejemplos de uso y consideraciones importantes.",
    "content": "Las funciones `map()`, `filter()` y `reduce()` son herramientas poderosas en Python que permiten aplicar operaciones a secuencias de datos de manera concisa y eficiente. Estas funciones son pilares de la programación funcional en Python y facilitan la escritura de código más limpio y legible.\n\n## DESCRIPCION GENERAL\n\n* **`map()`**: Aplica una función a cada elemento de un iterable (como una lista) y devuelve un iterador con los resultados.\n* **`filter()`**: Filtra los elementos de un iterable basándose en una función que devuelve `True` o `False` para cada elemento.\n* **`reduce()`**: Aplica una función de dos argumentos acumulativamente a los elementos de un iterable, reduciéndolo a un solo valor.\n\n## OBJETIVOS CLAVE\n\n* Entender el propósito y la sintaxis de cada función.\n* Aprender a usar estas funciones con funciones anónimas (lambda).\n* Comprender cómo estas funciones pueden simplificar el código y mejorar la eficiencia.\n* Conocer las alternativas modernas a `map()`, `filter()` y `reduce()` en Python 3.\n\n## map()\n\nLa función `map()` toma dos argumentos: una función y un iterable. Aplica la función a cada elemento del iterable y devuelve un iterador que produce los resultados.\n\n### SINTAXIS map()\n\n```python\nmap(function, iterable, ...)\n```\n\n* **function**: La función que se aplicará a cada elemento del iterable.\n\n* **iterable**: Uno o más iterables sobre los cuales se aplicará la función.\n\n### EJEMPLOS DE IMPLEMENTACION map()\n\n```python\ndef cuadrado(x):\r\n    return x * x\r\n\r\nnumeros = [1, 2, 3, 4, 5]\r\nresultados = map(cuadrado, numeros)\r\n\r\nprint(list(resultados))  # Output: [1, 4, 9, 16, 25]\n```\n\nEn este ejemplo, la función cuadrado se aplica a cada número en la lista numeros. La función map() devuelve un iterador, que luego se convierte en una lista para imprimir los resultados.\n\n### USO CON FUNCIONES LAMBDA map()\n\nLas funciones lambda son pequeñas funciones anónimas que se pueden definir en línea. Son especialmente útiles con `map()` para operaciones simples.\n\n```python\nnumeros = [1, 2, 3, 4, 5]\r\nresultados = map(lambda x: x * x, numeros)\r\n\r\nprint(list(resultados))  # Output: [1, 4, 9, 16, 25]\n```\n\nEste ejemplo es equivalente al anterior, pero utiliza una función lambda para calcular el cuadrado de cada número.\n\n## MULTIPLES ITERABLES\n\n`map()` puede tomar múltiples iterables como argumentos. En este caso, la función debe aceptar tantos argumentos como iterables se proporcionen.\n\n```python\nnumeros1 = [1, 2, 3]\r\nnumeros2 = [4, 5, 6]\r\n\r\nresultados = map(lambda x, y: x + y, numeros1, numeros2)\r\n\r\nprint(list(resultados))  # Output: [5, 7, 9]\n```\n\nAquí, la función lambda suma los elementos correspondientes de numeros1 y numeros2.\n\n`filter()`\n\nLa función `filter()` toma dos argumentos: una función y un iterable. Aplica la función a cada elemento del iterable y devuelve un iterador con los elementos para los cuales la función devuelve `True`.\n\n### SINTAXIS\n\n```python\nfilter(function, iterable)\n```\n\n* **function**: Una función que devuelve True o False.\n\n* **iterable**: El iterable que se va a filtrar.\n\n### EJEMPLO DE IMPLEMENTACION\n\n```python\ndef es_par(x):\r\n    return x % 2 == 0\r\n\r\nnumeros = [1, 2, 3, 4, 5, 6]\r\nresultados = filter(es_par, numeros)\r\n\r\nprint(list(resultados))  # Output: [2, 4, 6]\n```\n\nEn este ejemplo, la función `es_par` verifica si un número es par. La función `filter()` devuelve un iterador con los números pares de la lista numeros.\n\n### USO CON FUNCIONES LAMBDA\n\nAl igual que con `map()`, las funciones lambda son útiles con `filter()` para operaciones simples.\n\n```python\nnumeros = [1, 2, 3, 4, 5, 6]\r\nresultados = filter(lambda x: x % 2 == 0, numeros)\r\n\r\nprint(list(resultados))  # Output: [2, 4, 6]\n```\n\nEste ejemplo es equivalente al anterior, pero utiliza una función lambda para verificar si un número es par.\n\n## reduce()\n\nLa función `reduce()` aplica una función de dos argumentos acumulativamente a los elementos de un iterable, reduciéndolo a un solo valor. A diferencia de `map()` y `filter()`, `reduce()` no es una función incorporada en Python 3 y debe importarse desde el módulo `functools`.\n\n### SINTAXIS reduce()\n\n```python\nfrom functools import reduce\r\n\r\nreduce(function, iterable[, initializer])\n```\n\n* **function**: Una función que toma dos argumentos y devuelve un valor.\n\n* **iterable**: El iterable que se va a reducir.\n\n* **initializer (opcional)**: Un valor inicial que se utiliza como primer argumento en la primera llamada a la función.\n\n### EJEMPLO DE IMPLEMENTACION reduce()\n\n```python\nfrom functools import reduce\r\n\r\ndef multiplicar(x, y):\r\n    return x * y\r\n\r\nnumeros = [1, 2, 3, 4, 5]\r\nresultado = reduce(multiplicar, numeros)\r\n\r\nprint(resultado)  # Output: 120\n```\n\nEn este ejemplo, la función `multiplicar` multiplica dos números. La función `reduce()` aplica esta función acumulativamente a los elementos de la lista `numeros`, resultando en el producto de todos los números.\n\n### USO CON FUNCIONES LAMBDA reduce()\n\nAl igual que con map() y filter(), las funciones lambda son útiles con reduce() para operaciones simples.\n\n```python\nfrom functools import reduce\r\n\r\nnumeros = [1, 2, 3, 4, 5]\r\nresultado = reduce(lambda x, y: x * y, numeros)\r\n\r\nprint(resultado)  # Output: 120\n```\n\nEste ejemplo es equivalente al anterior, pero utiliza una función lambda para multiplicar los números.\n\n### INICIALIZADOR\n\nEl argumento `initializer` se utiliza como valor inicial. Si se proporciona, se utiliza como el primer argumento en la primera llamada a la función.\n\n```python\nfrom functools import reduce\r\n\r\nnumeros = [1, 2, 3, 4, 5]\r\nresultado = reduce(lambda x, y: x * y, numeros, 10)\r\n\r\nprint(resultado)  # Output: 1200\n```\n\nEn este ejemplo, el valor inicial es 10, por lo que el resultado es 10 multiplicado por el producto de todos los números en la lista.\n\n## ALTERNATIVAS MODERNAS\n\nEn Python 3, las funciones `map()` y `filter()` devuelven iteradores en lugar de listas, lo que puede ser más eficiente en términos de memoria. Sin embargo, a menudo se utilizan comprensiones de lista y expresiones generadoras como alternativas más legibles y Pythonicas.\n\n### COMPRESIONES DE LISTA\n\nLas comprensiones de lista ofrecen una sintaxis concisa para crear listas basadas en iterables existentes.\n\n```python\nnumeros = [1, 2, 3, 4, 5]\r\nresultados = [x * x para x in numeros]\r\n\r\nprint(resultados)  # Output: [1, 4, 9, 16, 25]\n```\n\nEste ejemplo es equivalente al uso de map() con una función lambda para calcular el cuadrado de cada número.\n\n### EXPRESIONES GENERADORAS\n\nLas expresiones generadoras son similares a las comprensiones de lista, pero devuelven un iterador en lugar de una lista. Son útiles para trabajar con grandes cantidades de datos, ya que no almacenan todos los resultados en la memoria a la vez.\n\n```python\nnumeros = [1, 2, 3, 4, 5]\r\nresultados = (x * x para x in numeros)\r\n\r\nprint(list(resultados))  # Output: [1, 4, 9, 16, 25]\n```\n\nEste ejemplo es equivalente al uso de `map()` con una función lambda para calcular el cuadrado de cada número, pero devuelve un iterador en lugar de una lista.\n\n## ALTERNATIVA A filter()\n\nLas comprensiones de lista y las expresiones generadoras también se pueden utilizar como alternativas a `filter()`.\n\n```python\nnumeros = [1, 2, 3, 4, 5, 6]\r\nresultados = [x para x in numeros if x % 2 == 0]\r\n\r\nprint(resultados)  # Output: [2, 4, 6]\n```\n\nEste ejemplo es equivalente al uso de `filter()` con una función lambda para filtrar los números pares.\n\n## ALTERNATIVA A reduce()\n\nPara `reduce()`, no hay una alternativa tan directa en Python moderno, pero se puede lograr el mismo resultado utilizando un bucle `for` o una función acumuladora.\n\n```python\nnumeros = [1, 2, 3, 4, 5]\r\nresultado = 1\r\nfor x in numeros:\r\n    resultado *= x\r\n\r\nprint(resultado)  # Output: 120\n```\n\nEste ejemplo es equivalente al uso de `reduce()` con una función lambda para multiplicar todos los números en la lista.\n\n## CONSIDERACIONES IMPORTANTES\n\n* **Legibilidad**: Aunque `map()`, `filter()` y `reduce()` pueden ser concisas, a veces las comprensiones de lista y las expresiones generadoras son más legibles, especialmente para operaciones complejas.\n\n* **Eficiencia**: En Python 3, `map()` y `filter()` devuelven iteradores, lo que puede ser más eficiente en términos de memoria que las listas. Sin embargo, las comprensiones de lista y las expresiones generadoras a menudo son más rápidas.\n\n* **reduce()**: Debido a su eliminación de las funciones incorporadas, se recomienda usar alternativas más explícitas como bucles `for` para mejorar la legibilidad.\n\n## EJEMPLOS ADICIONALES\n\n### EJEMPLO 1: CONVERTIR UNA LISTA DE STRING A ENTEROS\n\n```python\nstrings = [\"1\", \"2\", \"3\", \"4\", \"5\"]\r\nenteros = list(map(int, strings))\r\n\r\nprint(enteros)  # Output: [1, 2, 3, 4, 5]\n```\n\n### EJEMPLO 2: FILTRAR PALABRAS QUE COMIENZAN CON UNA VOCAL\n\n```python\npalabras = [\"manzana\", \"banana\", \"uva\", \"pera\", \"kiwi\"]\r\nvocales = [\"a\", \"e\", \"i\", \"o\", \"u\"]\r\nresultados = list(filter(lambda x: x[0].lower() in vocales, palabras))\r\n\r\nprint(resultados)  # Output: ['manzana', 'uva']\n```\n\n### EJEMPLO 3: CALCULAR LA SUMA DE LOS CUADRADOS DE UNA LISTA\n\n```python\nfrom functools import reduce\r\n\r\nnumeros = [1, 2, 3, 4, 5]\r\nresultado = reduce(lambda x, y: x + y**2, numeros, 0)\r\n\r\nprint(resultado)  # Output: 55 (0 + 1 + 4 + 9 + 16 + 25)\n```\n"
  },
  {
    "slug": "/programming/languages/python/data-types/numeric-operations",
    "title": "Operaciones con tipos numéricos en Python",
    "description": "Guía detallada sobre las operaciones aritméticas, funciones y bibliotecas para trabajar con números en Python.",
    "content": "Python ofrece una amplia gama de herramientas para realizar operaciones con tipos numéricos, que incluyen enteros (`int`), números de punto flotante (`float`) y números complejos (`complex`). Este documento explora las operaciones aritméticas básicas, las funciones integradas y las bibliotecas que facilitan el trabajo con números en Python.\n\n## OPERACIONES ARITMETICAS BASICAS\n\nPython soporta las operaciones aritméticas básicas utilizando los siguientes operadores:\n\n* **Suma (+):** Suma dos números.\n\n* **Resta (-):** Resta dos números.\n\n* **Multiplicación (\\*):** Multiplica dos números.\n\n* **División (/):** Divide dos números y devuelve un número de punto flotante.\n\n* **División Entera (//):** Divide dos números y devuelve la parte entera del cociente.\n\n* **Módulo (%):** Devuelve el resto de la división entre dos números.\n\n* **Potenciación (\\*\\*):** Eleva un número a la potencia de otro.\n\n```python\na = 10\r\nb = 3\r\n\r\nsuma = a + b                # Resultado: 13\r\nresta = a - b               # Resultado: 7\r\nmultiplicacion = a * b      # Resultado: 30\r\ndivision = a / b            # Resultado: 3.333...\r\ndivision_entera = a // b    # Resultado: 3\r\nmodulo = a % b              # Resultado: 1\r\npotencia = a ** b           # Resultado: 1000\r\n\r\nprint(f\"Suma: {suma}, Resta: {resta}, Multiplicación: {multiplicacion}\")\r\nprint(f\"División: {division}, División Entera: {division_entera}, Módulo: {modulo}, Potencia: {potencia}\")\n```\n\n## FUNCIONES INTEGRADAS PARA OPERACIONES NUMERICAS\n\nPython ofrece varias funciones integradas que facilitan las operaciones numéricas:\n\n* **abs(x)**: Devuelve el valor absoluto de x.\n\n* **round(x, n)**: Redondea x a n decimales.\n\n* **pow(x, y)**: Eleva x a la potencia de y (equivalente a x \\*\\* y).\n\n* **min(a, b, ...)**: Devuelve el valor mínimo entre los argumentos.\n\n* **max(a, b, ...)**: Devuelve el valor máximo entre los argumentos.\n\n```python\nx = -5.7\r\ny = 3.14159\r\n\r\nvalor_absoluto = abs(x)     # Resultado: 5.7\r\nredondeo = round(y, 2)      # Resultado: 3.14\r\npotencia = pow(2, 3)        # Resultado: 8\r\nminimo = min(1, 2, 3, 4)    # Resultado: 1\r\nmaximo = max(1, 2, 3, 4)    # Resultado: 4\r\n\r\nprint(f\"Valor Absoluto: {valor_absoluto}, Redondeo: {redondeo}, Potencia: {potencia}\")\r\nprint(f\"Mínimo: {minimo}, Máximo: {maximo}\")\n```\n\n## BIBLIOTECA math\n\nLa biblioteca math proporciona funciones matemáticas más avanzadas:\n\n* **math.sqrt(x)**: Devuelve la raíz cuadrada de x.\n\n* **math.ceil(x)**: Redondea x al entero superior más cercano.\n\n* **math.floor(x)**: Redondea x al entero inferior más cercano.\n\n* **math.sin(x)**: Devuelve el seno de x (en radianes).\n\n* **math.cos(x)**: Devuelve el coseno de x (en radianes).\n\n* **math.tan(x)**: Devuelve la tangente de x (en radianes).\n\n* **math.log(x, base)**: Devuelve el logaritmo de x en la base especificada.\n\n* **math.pi**: Constante que representa el valor de π (pi).\n\n* **math.e**: Constante que representa el número de Euler.\n\n```python\nimport math\r\n\r\nx = 16\r\ny = 5.7\r\n\r\nraiz_cuadrada = math.sqrt(x)   # Resultado: 4.0\r\nceil = math.ceil(y)           # Resultado: 6\r\nfloor = math.floor(y)          # Resultado: 5\r\nseno = math.sin(math.pi / 2)  # Resultado: 1.0\r\nlogaritmo = math.log(10, 10)   # Resultado: 1.0\r\n\r\nprint(f\"Raíz Cuadrada: {raiz_cuadrada}, Ceil: {ceil}, Floor: {floor}\")\r\nprint(f\"Seno (π/2): {seno}, Logaritmo (10 en base 10): {logaritmo}\")\r\nprint(f\"Valor de Pi: {math.pi}, Valor de e: {math.e}\")\n```\n\n## BIBLIOTECA cmath PARA NUMEROS COMPLEJOS\n\nPara trabajar con números complejos, Python ofrece la biblioteca cmath:\n\n* **cmath.sqrt(x)**: Devuelve la raíz cuadrada de un número complejo.\n\n* **cmath.phase(x)**: Devuelve la fase de un número complejo.\n\n* **cmath.polar(x)**: Convierte un número complejo a coordenadas polares.\n\n* **cmath.rect(r, phi)**: Convierte coordenadas polares a un número complejo.\n\n```python\nimport cmath\r\n\r\nz = complex(3, -4)\r\n\r\nraiz_cuadrada = cmath.sqrt(z)  # Resultado: (2-1j)\r\nfase = cmath.phase(z)         # Resultado: -0.927...\r\npolar = cmath.polar(z)        # Resultado: (5.0, -0.927...)\r\nrect = cmath.rect(5, 0)       # Resultado: (5+0j)\r\n\r\nprint(f\"Raíz Cuadrada: {raiz_cuadrada}, Fase: {fase}, Polar: {polar}, Rect: {rect}\")\n```\n\n## FORMATEO DE NUMEROS\n\nPython permite formatear números para controlar la precisión y la representación:\n\n* **f-strings**: Permiten insertar variables directamente en cadenas de texto.\n\n* **format()**: Método para formatear cadenas.\n\n```python\nnumero = 1234.56789\r\n\r\n# Usando f-strings\r\nprint(f\"Número con dos decimales: {numero:.2f}\")       # Resultado: 1234.57\r\nprint(f\"Número con separador de miles: {numero:,.2f}\")  # Resultado: 1,234.57\r\n\r\n# Usando format()\r\nprint(\"Número con dos decimales: {:.2f}\".format(numero))       # Resultado: 1234.57\r\nprint(\"Número con separador de miles: {:,.2f}\".format(numero))  # Resultado: 1,234.57\n```\n"
  },
  {
    "slug": "/programming/languages/python/data-types/set-operations",
    "title": "Operaciones con Conjuntos en Python",
    "description": "Explora las operaciones fundamentales que puedes realizar con conjuntos (sets) en Python, incluyendo unión, intersección, diferencia y diferencia simétrica.",
    "content": "Los conjuntos en Python son colecciones desordenadas de elementos únicos. Son una herramienta poderosa para realizar operaciones matemáticas de conjuntos, como unión, intersección y diferencia. En esta documentación, exploraremos cómo realizar estas operaciones utilizando Python.\n\n## ¿QUE SON LOS CONJUNTOS?\n\nUn conjunto es una colección no ordenada de elementos únicos. Esto significa que un conjunto no puede contener duplicados. Los conjuntos son útiles para eliminar duplicados de una lista y para realizar operaciones matemáticas de conjuntos.\n\nEn Python, los conjuntos se crean utilizando la función `set()` o utilizando llaves `{}`.\n\n```python\n# Creación de un conjunto utilizando la función set()\r\nmi_conjunto = set([1, 2, 3, 4, 5])\r\nprint(mi_conjunto)  # Output: {1, 2, 3, 4, 5}\r\n\r\n# Creación de un conjunto utilizando llaves {}\r\notro_conjunto = {3, 4, 5, 6, 7}\r\nprint(otro_conjunto)  # Output: {3, 4, 5, 6, 7}\n```\n\n## OPERACIONES BASICAS CON CONJUNTOS\n\nPython proporciona varios métodos para realizar operaciones con conjuntos. Aquí están las operaciones más comunes:\n\n### 1. UNION\n\nLa unión de dos conjuntos contiene todos los elementos de ambos conjuntos.\n\n* **Método**: `union()` o el operador `|`\n\n```python\nconjunto_a = {1, 2, 3}\r\nconjunto_b = {3, 4, 5}\r\n\r\n# Usando el método union()\r\nunion_conjunto = conjunto_a.union(conjunto_b)\r\nprint(union_conjunto)  # Output: {1, 2, 3, 4, 5}\r\n\r\n# Usando el operador |\r\nunion_conjunto_operador = conjunto_a | conjunto_b\r\nprint(union_conjunto_operador)  # Output: {1, 2, 3, 4, 5}\n```\n\n### 2. ITERSECCION\n\nLa intersección de dos conjuntos contiene solo los elementos que están presentes en ambos conjuntos.\n\n* **Método**: `intersection()` o el operador `&`\n\n```python\nconjunto_a = {1, 2, 3}\r\nconjunto_b = {3, 4, 5}\r\n\r\n# Usando el método intersection()\r\ninterseccion_conjunto = conjunto_a.intersection(conjunto_b)\r\nprint(interseccion_conjunto)  # Output: {3}\r\n\r\n# Usando el operador &\r\ninterseccion_conjunto_operador = conjunto_a & conjunto_b\r\nprint(interseccion_conjunto_operador)  # Output: {3}\n```\n\n### 3. DIFERENCIA\n\nLa diferencia entre dos conjuntos contiene los elementos que están en el primer conjunto pero no en el segundo.\n\n* **Método**: `difference()` o el operador `-`\n\n```python\nconjunto_a = {1, 2, 3}\r\nconjunto_b = {3, 4, 5}\r\n\r\n# Usando el método difference()\r\ndiferencia_conjunto = conjunto_a.difference(conjunto_b)\r\nprint(diferencia_conjunto)  # Output: {1, 2}\r\n\r\n# Usando el operador -\r\ndiferencia_conjunto_operador = conjunto_a - conjunto_b\r\nprint(diferencia_conjunto_operador)  # Output: {1, 2}\n```\n\n### 4. DIFERENCIA SIMETRICA\n\nLa diferencia simétrica entre dos conjuntos contiene los elementos que están en uno u otro conjunto, pero no en ambos.\n\n* **Método**: `symmetric_difference()` o el operador `^`\n\n```python\nconjunto_a = {1, 2, 3}\r\nconjunto_b = {3, 4, 5}\r\n\r\n# Usando el método symmetric_difference()\r\ndiferencia_simetrica_conjunto = conjunto_a.symmetric_difference(conjunto_b)\r\nprint(diferencia_simetrica_conjunto)  # Output: {1, 2, 4, 5}\r\n\r\n# Usando el operador ^\r\ndiferencia_simetrica_conjunto_operador = conjunto_a ^ conjunto_b\r\nprint(diferencia_simetrica_conjunto_operador)  # Output: {1, 2, 4, 5}\n```\n\n## OTROS METODOS UTILES\n\n* **add(elemento)**: Añade un elemento al conjunto.\n\n* **remove(elemento)**: Elimina un elemento del conjunto. Lanza un error si el elemento no está presente.\n\n* **discard(elemento)**: Elimina un elemento del conjunto si está presente. No lanza un error si el elemento no está presente.\n\n* **pop()**: Elimina y retorna un elemento arbitrario del conjunto.\n\n* **clear()**: Elimina todos los elementos del conjunto.\n\n```python\nconjunto = {1, 2, 3}\r\n\r\nconjunto.add(4)\r\nprint(conjunto)  # Output: {1, 2, 3, 4}\r\n\r\nconjunto.remove(2)\r\nprint(conjunto)  # Output: {1, 3, 4}\r\n\r\nconjunto.discard(5)  # No hace nada porque 5 no está en el conjunto\r\nprint(conjunto)  # Output: {1, 3, 4}\r\n\r\nelemento_eliminado = conjunto.pop()\r\nprint(elemento_eliminado)  # Output: (puede ser 1, 3 o 4)\r\nprint(conjunto)  # Output: (dependiendo del elemento eliminado)\r\n\r\nconjunto.clear()\r\nprint(conjunto)  # Output: set()\n```\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: ENCONTRAR ELEMENTOS UNICOS EN UNA LISTA\n\n```python\nlista_con_duplicados = [1, 2, 2, 3, 4, 4, 5]\r\nelementos_unicos = set(lista_con_duplicados)\r\nprint(elementos_unicos)  # Output: {1, 2, 3, 4, 5}\n```\n\n### EJEMPLO 2: COMPARAR ELEMENTOS ENTRE DOS LISTAS\n\n```python\nlista_a = [1, 2, 3, 4, 5]\r\nlista_b = [3, 4, 5, 6, 7]\r\n\r\nconjunto_a = set(lista_a)\r\nconjunto_b = set(lista_b)\r\n\r\n# Elementos en lista_a pero no en lista_b\r\ndiferencia = conjunto_a - conjunto_b\r\nprint(diferencia)  # Output: {1, 2}\r\n\r\n# Elementos comunes en ambas listas\r\ninterseccion = conjunto_a & conjunto_b\r\nprint(interseccion)  # Output: {3, 4, 5}\n```\n"
  },
  {
    "slug": "/programming/languages/python/data-types/string-methods",
    "title": "Métodos de Cadenas en Python",
    "description": "Exploración exhaustiva de los métodos de cadenas en Python, incluyendo manipulación, búsqueda, validación y formateo.",
    "content": "Las cadenas son uno de los tipos de datos más fundamentales en Python, utilizadas para representar texto. Python ofrece una rica variedad de métodos integrados para manipular y trabajar con cadenas de manera eficiente. Este documento explora en detalle estos métodos, proporcionando ejemplos y casos de uso para cada uno.\n\n### OBJETIVOS CLAVE\n\n1. **Manipulación de Cadenas:** Aprender a modificar cadenas, como cambiar mayúsculas/minúsculas, eliminar espacios en blanco y dividir/unir cadenas.\n2. **Búsqueda y Reemplazo:** Dominar las técnicas para buscar subcadenas dentro de una cadena y reemplazarlas.\n3. **Validación de Cadenas:** Utilizar métodos para verificar si una cadena cumple con ciertos criterios, como ser numérica, alfabética o contener solo espacios en blanco.\n4. **Formateo de Cadenas:** Explorar las diferentes formas de formatear cadenas para insertar valores y crear salidas personalizadas.\n\n### METODOS DE MANIPULACION DE CADENAS\n\n* **`lower()`:** Convierte todos los caracteres de una cadena a minúsculas.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  texto_minusculas = texto.lower()\r\n  print(texto_minusculas)  # Output: hola mundo\n  ```\n* **`upper()`:** Convierte todos los caracteres de una cadena a mayúsculas.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  texto_mayusculas = texto.upper()\r\n  print(texto_mayusculas)  # Output: HOLA MUNDO\n  ```\n* **`capitalize()`:** Convierte el primer carácter de una cadena a mayúscula y el resto a minúsculas.\n\n  ```python\n  texto = \"hola mundo\"\r\n  texto_capitalizado = texto.capitalize()\r\n  print(texto_capitalizado)  # Output: Hola mundo\n  ```\n* **`title()`:** Convierte el primer carácter de cada palabra en una cadena a mayúscula.\n\n  ```python\n  texto = \"hola mundo\"\r\n  texto_titulo = texto.title()\r\n  print(texto_titulo)  # Output: Hola Mundo\n  ```\n* **`swapcase()`:** Invierte las mayúsculas y minúsculas en una cadena.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  texto_invertido = texto.swapcase()\r\n  print(texto_invertido)  # Output: hOLA mUNDO\n  ```\n* **`strip()`:** Elimina los espacios en blanco al principio y al final de una cadena.\n\n  ```python\n  texto = \"   Hola Mundo   \"\r\n  texto_sin_espacios = texto.strip()\r\n  print(texto_sin_espacios)  # Output: Hola Mundo\n  ```\n* **`lstrip()`:** Elimina los espacios en blanco al principio de una cadena.\n\n  ```python\n  texto = \"   Hola Mundo   \"\r\n  texto_sin_espacios_izquierda = texto.lstrip()\r\n  print(texto_sin_espacios_izquierda)  # Output: Hola Mundo\n  ```\n* **`rstrip()`:** Elimina los espacios en blanco al final de una cadena.\n\n  ```python\n  texto = \"   Hola Mundo   \"\r\n  texto_sin_espacios_derecha = texto.rstrip()\r\n  print(texto_sin_espacios_derecha)  # Output:   Hola Mundo\n  ```\n* **`removeprefix(prefix)` (Python 3.9+):** Elimina un prefijo específico de una cadena si está presente.\n\n  ```python\n  texto = \"PrefijoHola Mundo\"\r\n  texto_sin_prefijo = texto.removeprefix(\"Prefijo\")\r\n  print(texto_sin_prefijo)  # Output: Hola Mundo\n  ```\n* **`removesuffix(suffix)` (Python 3.9+):** Elimina un sufijo específico de una cadena si está presente.\n\n  ```python\n  texto = \"Hola MundoSufijo\"\r\n  texto_sin_sufijo = texto.removesuffix(\"Sufijo\")\r\n  print(texto_sin_sufijo)  # Output: Hola Mundo\n  ```\n\n### METODOS DE BUSQUEDA Y REEMPLAZO\n\n* **`find(subcadena, inicio, fin)`:** Busca la primera ocurrencia de una subcadena dentro de una cadena y devuelve su índice. Devuelve -1 si no se encuentra. Los argumentos `inicio` y `fin` son opcionales y especifican el rango de búsqueda.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  indice = texto.find(\"Hola\")\r\n  print(indice)  # Output: 0\r\n  indice2 = texto.find(\"Hola\", 1)\r\n  print(indice2) # Output: 12\n  ```\n* **`rfind(subcadena, inicio, fin)`:** Busca la última ocurrencia de una subcadena dentro de una cadena y devuelve su índice. Devuelve -1 si no se encuentra.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  indice = texto.rfind(\"Hola\")\r\n  print(indice)  # Output: 12\n  ```\n* **`index(subcadena, inicio, fin)`:** Similar a `find()`, pero lanza una excepción `ValueError` si la subcadena no se encuentra.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  indice = texto.index(\"Mundo\")\r\n  print(indice)  # Output: 5\n  ```\n* **`rindex(subcadena, inicio, fin)`:** Similar a `rfind()`, pero lanza una excepción `ValueError` si la subcadena no se encuentra.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  indice = texto.rindex(\"Hola\")\r\n  print(indice)  # Output: 12\n  ```\n* **`startswith(prefijo, inicio, fin)`:** Verifica si una cadena comienza con un prefijo específico.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  comienza_con_hola = texto.startswith(\"Hola\")\r\n  print(comienza_con_hola)  # Output: True\n  ```\n* **`endswith(sufijo, inicio, fin)`:** Verifica si una cadena termina con un sufijo específico.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  termina_con_mundo = texto.endswith(\"Mundo\")\r\n  print(termina_con_mundo)  # Output: True\n  ```\n* **`replace(viejo, nuevo, conteo)`:** Reemplaza todas las ocurrencias de una subcadena con otra. El argumento `conteo` es opcional y especifica el número máximo de reemplazos a realizar.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  nuevo_texto = texto.replace(\"Hola\", \"Adiós\")\r\n  print(nuevo_texto)  # Output: Adiós Mundo, Adiós Python\n  ```\n* **`count(subcadena, inicio, fin)`:** Cuenta el número de ocurrencias de una subcadena dentro de una cadena.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  conteo = texto.count(\"Hola\")\r\n  print(conteo)  # Output: 2\n  ```\n\n### METODOS DE VALIDACION DE CADENAS\n\n* **`isalnum()`:** Devuelve `True` si todos los caracteres de la cadena son alfanuméricos (letras o números) y la cadena no está vacía.\n\n  ```python\n  texto1 = \"HolaMundo123\"\r\n  texto2 = \"Hola Mundo\"\r\n  print(texto1.isalnum())  # Output: True\r\n  print(texto2.isalnum())  # Output: False\n  ```\n* **`isalpha()`:** Devuelve `True` si todos los caracteres de la cadena son letras y la cadena no está vacía.\n\n  ```python\n  texto1 = \"HolaMundo\"\r\n  texto2 = \"Hola Mundo123\"\r\n  print(texto1.isalpha())  # Output: True\r\n  print(texto2.isalpha())  # Output: False\n  ```\n* **`isdigit()`:** Devuelve `True` si todos los caracteres de la cadena son dígitos y la cadena no está vacía.\n\n  ```python\n  texto1 = \"12345\"\r\n  texto2 = \"123Hola\"\r\n  print(texto1.isdigit())  # Output: True\r\n  print(texto2.isdigit())  # Output: False\n  ```\n* **`isnumeric()`:** Devuelve `True` si todos los caracteres de la cadena son caracteres numéricos y la cadena no está vacía. Similar a `isdigit()`, pero también incluye caracteres Unicode que representan números.\n\n  ```python\n  texto1 = \"12345\"\r\n  texto2 = \"½\"\r\n  print(texto1.isnumeric())  # Output: True\r\n  print(texto2.isnumeric())  # Output: True\n  ```\n* **`isdecimal()`:** Devuelve `True` si todos los caracteres de la cadena son caracteres decimales y la cadena no está vacía. Más restrictivo que `isnumeric()`.\n\n  ```python\n  texto1 = \"12345\"\r\n  texto2 = \"½\"\r\n  print(texto1.isdecimal())  # Output: True\r\n  print(texto2.isdecimal())  # Output: False\n  ```\n* **`isspace()`:** Devuelve `True` si todos los caracteres de la cadena son espacios en blanco y la cadena no está vacía.\n\n  ```python\n  texto1 = \"   \"\r\n  texto2 = \" Hola \"\r\n  print(texto1.isspace())  # Output: True\r\n  print(texto2.isspace())  # Output: False\n  ```\n* **`islower()`:** Devuelve `True` si todos los caracteres de la cadena están en minúsculas y hay al menos un carácter en minúscula.\n\n  ```python\n  texto1 = \"hola mundo\"\r\n  texto2 = \"Hola Mundo\"\r\n  print(texto1.islower())  # Output: True\r\n  print(texto2.islower())  # Output: False\n  ```\n* **`isupper()`:** Devuelve `True` si todos los caracteres de la cadena están en mayúsculas y hay al menos un carácter en mayúscula.\n\n  ```python\n  texto1 = \"HOLA MUNDO\"\r\n  texto2 = \"Hola Mundo\"\r\n  print(texto1.isupper())  # Output: True\r\n  print(texto2.isupper())  # Output: False\n  ```\n* **`istitle()`:** Devuelve `True` si la cadena está en formato de título (la primera letra de cada palabra en mayúscula).\n\n  ```python\n  texto1 = \"Hola Mundo\"\r\n  texto2 = \"hola mundo\"\r\n  print(texto1.istitle())  # Output: True\r\n  print(texto2.istitle())  # Output: False\n  ```\n* **`isidentifier()`:** Devuelve `True` si la cadena es un identificador válido en Python.\n\n  ```python\n  texto1 = \"variable_valida\"\r\n  texto2 = \"1variable\"\r\n  print(texto1.isidentifier())  # Output: True\r\n  print(texto2.isidentifier())  # Output: False\n  ```\n* **`isprintable()`:** Devuelve `True` si todos los caracteres de la cadena son imprimibles (no son caracteres de control).\n\n  ```python\n  texto1 = \"Hola Mundo\"\r\n  texto2 = \"Hola\\nMundo\"\r\n  print(texto1.isprintable())  # Output: True\r\n  print(texto2.isprintable())  # Output: False\n  ```\n\n### METODOS DE FORMATO DE CADENAS\n\n* **`format(*args, **kwargs)`:** Permite insertar valores en una cadena utilizando marcadores de posición.\n\n  ```python\n  nombre = \"Juan\"\r\n  edad = 30\r\n  texto = \"Me llamo {} y tengo {} años.\".format(nombre, edad)\r\n  print(texto)  # Output: Me llamo Juan y tengo 30 años.\n  ```\n\n  También se pueden usar nombres para los marcadores de posición:\n\n  ```python\n  nombre = \"Juan\"\r\n  edad = 30\r\n  texto = \"Me llamo {nombre} y tengo {edad} años.\".format(nombre=nombre, edad=edad)\r\n  print(texto)  # Output: Me llamo Juan y tengo 30 años.\n  ```\n\n* **`f-strings` (Python 3.6+):** Una forma más concisa y legible de formatear cadenas.\n\n  ```python\n  nombre = \"Juan\"\r\n  edad = 30\r\n  texto = f\"Me llamo {nombre} y tengo {edad} años.\"\r\n  print(texto)  # Output: Me llamo Juan y tengo 30 años.\n  ```\n\n* **`%`-formatting (estilo antiguo):** Aunque menos común en el código moderno, todavía se puede encontrar.\n\n  ```python\n  nombre = \"Juan\"\r\n  edad = 30\r\n  texto = \"Me llamo %s y tengo %d años.\" % (nombre, edad)\r\n  print(texto)  # Output: Me llamo Juan y tengo 30 años.\n  ```\n\n### METODOS DE DIVISION Y UNION DE CADENAS\n\n* **`split(separador, maxsplit)`:** Divide una cadena en una lista de subcadenas, utilizando un separador específico. El argumento `maxsplit` es opcional y especifica el número máximo de divisiones a realizar.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  lista = texto.split(\", \")\r\n  print(lista)  # Output: ['Hola Mundo', 'Hola Python']\n  ```\n* **`rsplit(separador, maxsplit)`:** Similar a `split()`, pero comienza a dividir desde el final de la cadena.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  lista = texto.rsplit(\", \", 1)\r\n  print(lista)  # Output: ['Hola Mundo', 'Hola Python']\n  ```\n* **`splitlines(keepends)`:** Divide una cadena en una lista de líneas, utilizando los caracteres de nueva línea como separadores. El argumento `keepends` es opcional y especifica si se deben mantener los caracteres de nueva línea en las líneas resultantes.\n\n  ```python\n  texto = \"Hola Mundo\\nHola Python\"\r\n  lista = texto.splitlines()\r\n  print(lista)  # Output: ['Hola Mundo', 'Hola Python']\n  ```\n* **`join(iterable)`:** Une una lista de cadenas en una sola cadena, utilizando la cadena como separador.\n\n  ```python\n  lista = [\"Hola\", \"Mundo\", \"Python\"]\r\n  texto = \" \".join(lista)\r\n  print(texto)  # Output: Hola Mundo Python\n  ```\n\n### OTROS METODOS UTILES\n\n* **`zfill(ancho)`:** Rellena una cadena con ceros a la izquierda hasta alcanzar un ancho específico.\n\n  ```python\n  numero = \"123\"\r\n  numero_rellenado = numero.zfill(5)\r\n  print(numero_rellenado)  # Output: 00123\n  ```\n* **`center(ancho, caracter_de_relleno)`:** Centra una cadena dentro de un ancho específico, rellenando los espacios restantes con un carácter de relleno.\n\n  ```python\n  texto = \"Hola\"\r\n  texto_centrado = texto.center(10, \"*\")\r\n  print(texto_centrado)  # Output: ***Hola***\n  ```\n* **`ljust(ancho, caracter_de_relleno)`:** Justifica una cadena a la izquierda dentro de un ancho específico, rellenando los espacios restantes con un carácter de relleno.\n\n  ```python\n  texto = \"Hola\"\r\n  texto_justificado_izquierda = texto.ljust(10, \"*\")\r\n  print(texto_justificado_izquierda)  # Output: Hola******\n  ```\n* **`rjust(ancho, caracter_de_relleno)`:** Justifica una cadena a la derecha dentro de un ancho específico, rellenando los espacios restantes con un carácter de relleno.\n\n  ```python\n  texto = \"Hola\"\r\n  texto_justificado_derecha = texto.rjust(10, \"*\")\r\n  print(texto_justificado_derecha)  # Output: ******Hola\n  ```\n* **`encode(encoding='utf-8', errors='strict')`:** Codifica una cadena en una secuencia de bytes utilizando una codificación específica.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  bytes_codificados = texto.encode('utf-8')\r\n  print(bytes_codificados)  # Output: b'Hola Mundo'\n  ```\n* **`expandtabs(tabsize=8)`:** Reemplaza los caracteres de tabulación en una cadena con un número específico de espacios.\n\n  ```python\n  texto = \"Hola\\tMundo\"\r\n  texto_sin_tabs = texto.expandtabs(4)\r\n  print(texto_sin_tabs)  # Output: Hola    Mundo\n  ```\n\n### EJEMPLOS DE IMPLEMENTACION\n\n#### EJEMPLO 1: LIMPIEZA DE DATOS\n\n```python\ndatos = \"   Nombre:  Juan Pérez  ,  Edad: 30  \"\r\ndatos_limpios = datos.strip().replace(\"Nombre:\", \"\").replace(\"Edad:\", \"\").split(\",\")\r\nnombre = datos_limpios[0].strip()\r\nedad = datos_limpios[1].strip()\r\nprint(f\"Nombre: {nombre}, Edad: {edad}\")\n```\n\n#### EJEMPLO 2: VALIDACION DE ENTRADA DE USUARIO\n\n```python\ndef validar_email(email):\r\n    if \"@\" in email and \".\" in email:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nemail = input(\"Ingrese su email: \")\r\nif validar_email(email):\r\n    print(\"Email válido\")\r\nelse:\r\n    print(\"Email inválido\")\n```\n"
  },
  {
    "slug": "/programming/languages/python/exceptions",
    "title": "Manejo de Excepciones en Python",
    "description": "Aprende a manejar excepciones en Python para escribir código robusto y a prueba de errores.",
    "content": "El manejo de excepciones es un aspecto crucial en la programación, especialmente en Python, ya que permite crear aplicaciones robustas y tolerantes a fallos. Las excepciones son eventos que interrumpen el flujo normal de un programa, generalmente debido a errores o condiciones inesperadas. Python proporciona mecanismos para capturar y manejar estas excepciones, permitiendo que el programa se recupere o termine de manera controlada.\n\n## ¿QUE SON LAS EXCEPCIONES?\n\nEn Python, una excepción es un objeto que representa un error. Cuando ocurre un error, Python \"lanza\" (o \"levanta\") una excepción. Si la excepción no se maneja, el programa se detiene y muestra un mensaje de error.\n\n### TIPOS COMUNES DE EXCEPCIONES\n\nPython tiene una variedad de excepciones incorporadas, cada una representando un tipo diferente de error. Algunos ejemplos comunes incluyen:\n\n* **TypeError**: Ocurre cuando una operación o función se aplica a un objeto de tipo inapropiado.\n* **ValueError**: Ocurre cuando una función recibe un argumento del tipo correcto, pero con un valor inapropiado.\n* **IndexError**: Ocurre cuando se intenta acceder a un índice fuera de rango en una secuencia (lista, tupla, etc.).\n* **KeyError**: Ocurre cuando se intenta acceder a una clave que no existe en un diccionario.\n* **FileNotFoundError**: Ocurre cuando se intenta abrir un archivo que no existe.\n* **IOError**: Ocurre cuando una operación de entrada/salida falla (por ejemplo, al leer o escribir un archivo).\n* **ZeroDivisionError**: Ocurre cuando se intenta dividir un número por cero.\n* **ImportError**: Ocurre cuando falla la importación de un módulo.\n\n## BLOQUES try, except, finally\n\nPython utiliza los bloques `try`, `except` y `finally` para manejar excepciones.\n\n### EL BLOQUE try\n\nEl bloque `try` contiene el código que podría generar una excepción. Si una excepción ocurre dentro de este bloque, el control se transfiere al bloque `except` correspondiente.\n\n### EL BLOQUE except\n\nEl bloque `except` especifica cómo manejar una excepción particular. Puedes tener múltiples bloques `except` para manejar diferentes tipos de excepciones. Si una excepción ocurre en el bloque `try` y coincide con el tipo especificado en un bloque `except`, el código dentro de ese bloque `except` se ejecuta.\n\n### EL BLOQUE finally\n\nEl bloque `finally` contiene código que siempre se ejecuta, independientemente de si una excepción ocurrió o no. Este bloque es útil para realizar tareas de limpieza, como cerrar archivos o liberar recursos.\n\n### SINTAXIS GENERAL\n\n```python\ntry:\r\n    # Código que podría generar una excepción\r\nexcept TipoDeExcepcion1:\r\n    # Manejo para TipoDeExcepcion1\r\nexcept TipoDeExcepcion2:\r\n    # Manejo para TipoDeExcepcion2\r\nexcept:\r\n    # Manejo para cualquier otra excepción\r\nfinally:\r\n    # Código que siempre se ejecuta\n```\n\n## EJEMPLO DE IMPLEMENTACION\n\n```python\ndef dividir(a, b):\r\n    try:\r\n        resultado = a / b\r\n        print(\"El resultado es:\", resultado)\r\n    except ZeroDivisionError:\r\n        print(\"¡Error! No se puede dividir por cero.\")\r\n    except TypeError:\r\n        print(\"¡Error! Los argumentos deben ser números.\")\r\n    finally:\r\n        print(\"La función dividir ha terminado.\")\r\n\r\n# Ejemplos de uso\r\ndividir(10, 2)\r\ndividir(10, 0)\r\ndividir(10, \"2\")\n```\n\nEn este ejemplo:\n\n* La función `dividir` intenta dividir `a` por `b`.\n\n* Si `b` es cero, se levanta una excepción `ZeroDivisionError`, y el primer bloque `except` la maneja.\n\n* Si `a` o `b` no son números, se levanta una excepción `TypeError`, y el segundo bloque `except` la maneja.\n\n* El bloque `finally` siempre se ejecuta, mostrando un mensaje al final.\n\n### LANZAR EXCEPCIONES (RAISE)\n\nAdemás de manejar excepciones, también puedes lanzar tus propias excepciones usando la palabra clave `raise`. Esto es útil para indicar que algo salió mal en tu código.\n\n```python\ndef validar_edad(edad):\r\n    if edad < 0:\r\n        raise ValueError(\"La edad no puede ser negativa.\")\r\n    if edad > 150:\r\n        raise ValueError(\"La edad no puede ser mayor a 150.\")\r\n    print(\"Edad válida:\", edad)\r\n\r\ntry:\r\n    validar_edad(-10)\r\nexcept ValueError as e:\r\n    print(\"¡Error!\", e)\r\n\r\ntry:\r\n    validar_edad(200)\r\nexcept ValueError as e:\r\n    print(\"¡Error!\", e)\r\n\r\ntry:\r\n    validar_edad(30)\r\nexcept ValueError as e:\r\n    print(\"¡Error!\", e)\n```\n\nEn este ejemplo:\n\n* La función `validar_edad` lanza una excepción `ValueError` si la edad es negativa o mayor a `150`.\n\n* El bloque `try` llama a `validar_edad` y el bloque `except` maneja la excepción `ValueError`, mostrando un mensaje de `error`.\n\n### EXCEPCIONES PERSONALIZADAS\n\nPuedes crear tus propias clases de excepción personalizadas heredando de la clase base `Exception`. Esto te permite definir excepciones específicas para tu aplicación.\n\n```python\nclass MiErrorPersonalizado(Exception):\r\n    def __init__(self, mensaje):\r\n        self.mensaje = mensaje\r\n\r\n    def __str__(self):\r\n        return self.mensaje\r\n\r\ndef procesar_dato(dato):\r\n    if not isinstance(dato, int):\r\n        raise MiErrorPersonalizado(\"El dato debe ser un entero.\")\r\n    print(\"Dato procesado:\", dato)\r\n\r\ntry:\r\n    procesar_dato(\"abc\")\r\nexcept MiErrorPersonalizado as e:\r\n    print(\"¡Error!\", e)\r\n\r\ntry:\r\n    procesar_dato(123)\r\nexcept MiErrorPersonalizado as e:\r\n    print(\"¡Error!\", e)\n```\n\nEn este ejemplo:\n\n* Se define una clase de excepción personalizada `MiErrorPersonalizado` que hereda de `Exception`.\n\n* La función `procesar_dato` lanza una excepción `MiErrorPersonalizado` si el dato no es un entero.\n\n* El bloque `try` llama a `procesar_dato` y el bloque `except` maneja la excepción `MiErrorPersonalizado`, mostrando un mensaje de `error`.\n\n## BUENAS PRACTICAS\n\n* **Sé específico**: Captura solo las excepciones que esperas y puedes manejar. Evita usar bloques except genéricos que capturen todas las excepciones, ya que esto puede ocultar errores inesperados.\n\n* **Usa `finally` para la limpieza**: Asegúrate de liberar recursos en el bloque finally para evitar fugas de memoria o problemas de rendimiento.\n\n* **Documenta tus excepciones**: Explica qué excepciones pueden ser lanzadas por tus funciones y cómo deben ser manejadas.\n\n* **No ignores las excepciones**: Si no puedes manejar una excepción, déjala propagarse para que pueda ser manejada por un nivel superior en la jerarquía de llamadas.\n\n* **Usa excepciones para situaciones excepcionales**: No uses excepciones para el flujo normal del programa. Las excepciones deben reservarse para errores y condiciones inesperadas.\n\n## SUBTEMAS SUGERIDOS\n\n* **Context Managers (with statement)**: Simplifica el manejo de recursos (como archivos) asegurando que se liberen automáticamente.\n\n* **Logging**: Registra información sobre excepciones para facilitar la depuración y el monitoreo de aplicaciones.\n\n* **Testing**: Escribe pruebas unitarias para verificar que las excepciones se manejen correctamente.\n\nEl manejo de excepciones es una habilidad esencial para cualquier programador de Python. Al comprender cómo funcionan los bloques try, except y finally, y al seguir las buenas prácticas, puedes escribir código más robusto y tolerante a fallos.\n"
  },
  {
    "slug": "/programming/languages/python/functions",
    "title": "Funciones en Python",
    "description": "Explicación detallada de las funciones en Python, incluyendo su sintaxis, tipos, uso y mejores prácticas.",
    "content": "Las funciones son bloques de código reutilizables que realizan una tarea específica. Son fundamentales en la programación porque permiten dividir un programa grande en partes más pequeñas y manejables, lo que facilita la lectura, la depuración y el mantenimiento del código. En Python, las funciones se definen utilizando la palabra clave `def`.\n\n## SINTAXIS BASICA\n\nLa sintaxis básica para definir una función en Python es la siguiente:\n\n```python\ndef nombre_de_la_funcion(parametros):\r\n    \"\"\"\r\n    Documentación de la función (docstring).\r\n    Explica qué hace la función, qué parámetros acepta y qué retorna.\r\n    \"\"\"\r\n    # Cuerpo de la función\r\n    # Aquí va el código que realiza la tarea\r\n    return valor_de_retorno  # Opcional\n```\n\n* **def**: Palabra clave que indica el inicio de la definición de una función.\n\n* **nombre\\_de\\_la\\_funcion**: El nombre que le das a la función. Debe seguir las reglas de nomenclatura de Python (letras, números y guiones bajos, comenzando con una letra o guión bajo).\n\n* **parametros**: Son las variables que la función recibe como entrada. Pueden ser cero o más parámetros, separados por comas.\n\n* **\"\"\"Documentación\"\"\"**: Es una cadena de texto (docstring) que describe la función. Es una buena práctica incluir una descripción clara de lo que hace la función, los parámetros que acepta y el valor que retorna.\n\n* **cuerpo de la función**: Es el bloque de código que se ejecuta cuando se llama la función.\n\n* **return**: Palabra clave que indica el valor que la función retorna. Si no se especifica return, la función retorna None por defecto.\n\n## TIPOS DE FUNCIONES\n\n### 1. FUNCIONES SIN PARAMETROS Y SIN RETORNO\n\n```python\ndef saludar():\r\n    print(\"¡Hola, mundo!\")\r\n\r\nsaludar()  # Llama a la función\n```\n\n### 2. FUNCIONES CON PARAMETROS Y SIN RETORNO\n\n```python\ndef saludar_a(nombre):\r\n    print(f\"¡Hola, {nombre}!\")\r\n\r\nsaludar_a(\"Juan\")  # Llama a la función con un argumento\n```\n\n### 3. FUNCIONES CON PARAMETROS Y CON RETORNO\n\n```python\ndef sumar(a, b):\r\n    \"\"\"\r\n    Retorna la suma de dos números.\r\n    \"\"\"\r\n    return a + b\r\n\r\nresultado = sumar(5, 3)\r\nprint(resultado)  # Imprime 8\n```\n\n### 4. FUNCIONES CON PARAMETROS POR DEFECTO\n\n```python\ndef saludar_con_saludo(nombre, saludo=\"Hola\"):\r\n    print(f\"{saludo}, {nombre}!\")\r\n\r\nsaludar_con_saludo(\"María\")  # Imprime \"Hola, María!\"\r\nsaludar_con_saludo(\"Carlos\", \"Buenos días\")  # Imprime \"Buenos días, Carlos!\"\n```\n\n## ARGUMENTOS DE UNA FUNCION\n\nCuando se llama a una función, se le pueden pasar argumentos. Hay diferentes tipos de argumentos:\n\n### 1. ARGUMENTOS POSICIONALES\n\nLos argumentos se pasan en el mismo orden en que se definen los parámetros en la función.\n\n```python\ndef restar(a, b):\r\n    return a - b\r\n\r\nresultado = restar(10, 3)  # a = 10, b = 3\r\nprint(resultado)  # Imprime 7\n```\n\n### 2. ARGUMENTOS DE PALABRA CLAVE\n\nLos argumentos se pasan especificando el nombre del parámetro y su valor.\n\n```python\ndef restar(a, b):\r\n    return a - b\r\n\r\nresultado = restar(b=3, a=10)  # a = 10, b = 3\r\nprint(resultado)  # Imprime 7\n```\n\n### 3. ARGUMENTOS VARIABLES (\\*args)\n\nPermiten pasar un número variable de argumentos posicionales. Se reciben como una tupla.\n\n```python\ndef sumar_todos(*args):\r\n    total = 0\r\n    for num in args:\r\n        total += num\r\n    return total\r\n\r\nresultado = sumar_todos(1, 2, 3, 4, 5)\r\nprint(resultado)  # Imprime 15\n```\n\n### 4. ARGUMENTOS DE PALABRAS CLAVE VARIABLES (\\*\\*kwargs)\n\nPermiten pasar un número variable de argumentos de palabra clave. Se reciben como un diccionario.\n\n```python\ndef imprimir_info(**kwargs):\r\n    for key, value in kwargs.items():\r\n        print(f\"{key}: {value}\")\r\n\r\nimprimir_info(nombre=\"Juan\", edad=30, ciudad=\"Madrid\")\n```\n\n## ALCANCE DE LAS VARIABLES\n\nEl alcance de una variable se refiere a la parte del programa donde la variable es accesible. En Python, hay dos tipos principales de alcance:\n\n### 1. ALCANCE LOCAL\n\nUna variable definida dentro de una función tiene un alcance local. Solo es accesible dentro de esa función.\n\n```python\ndef mi_funcion():\r\n    x = 10  # x es una variable local\r\n    print(x)\r\n\r\nmi_funcion()  # Imprime 10\r\n# print(x)  # Esto daría un error porque x no está definida fuera de la función\n```\n\n### 2. ALCANCE GLOBAL\n\nUna variable definida fuera de cualquier función tiene un alcance global. Es accesible desde cualquier parte del programa, incluyendo dentro de las funciones.\n\n```python\nx = 10  # x es una variable global\r\n\r\ndef mi_funcion():\r\n    print(x)  # Accede a la variable global x\r\n\r\nmi_funcion()  # Imprime 10\r\nprint(x)  # Imprime 10\n```\n\nSi quieres modificar una variable global dentro de una función, debes usar la palabra clave global\n\n```python\nx = 10\r\n\r\ndef modificar_x():\r\n    global x\r\n    x = 20  # Modifica la variable global x\r\n\r\nmodificar_x()\r\nprint(x)  # Imprime 20\n```\n\n## FUNCIONES ANONIMAS (LAMBDA)\n\nLas funciones lambda son pequeñas funciones anónimas que se definen en una sola línea. Se utilizan principalmente para operaciones simples y cortas.\n\n```python\nsumar = lambda a, b: a + b\r\nresultado = sumar(5, 3)\r\nprint(resultado)  # Imprime 8\n```\n\nLas funciones lambda son especialmente útiles cuando se utilizan con funciones como `map()`, `filter()` y `sorted()`.\n\n```python\nnumeros = [1, 2, 3, 4, 5]\r\ncuadrados = list(map(lambda x: x**2, numeros))\r\nprint(cuadrados)  # Imprime [1, 4, 9, 16, 25]\r\n\r\npares = list(filter(lambda x: x % 2 == 0, numeros))\r\nprint(pares)  # Imprime [2, 4]\n```\n\n## DOCUMENTACION DE FUNCIONES (Docstrings)\n\nEs fundamental documentar las funciones para que otros (o tú mismo en el futuro) puedan entender fácilmente qué hacen. La documentación se incluye como una cadena de texto (docstring) dentro de la función, justo después de la definición.\n\n```python\ndef dividir(a, b):\r\n    \"\"\"\r\n    Divide dos números y retorna el resultado.\r\n\r\n    Args:\r\n        a (int o float): El dividendo.\r\n        b (int o float): El divisor.\r\n\r\n    Returns:\r\n        float: El resultado de la división.\r\n\r\n    Raises:\r\n        ZeroDivisionError: Si el divisor es cero.\r\n    \"\"\"\r\n    if b == 0:\r\n        raise ZeroDivisionError(\"No se puede dividir por cero.\")\r\n    return a / b\n```\n\nPuedes acceder a la documentación de una función utilizando la función `help()` o el atributo `__doc__`.\n\n```python\nhelp(dividir)\r\nprint(dividir.__doc__)\n```\n\n## EJEMPLOS DE FUNCIONES\n\n### 1. FUNCION PARA CALCULAR EL FACTORIAL DE UN NUMERO\n\n```python\ndef factorial(n):\r\n    \"\"\"\r\n    Calcula el factorial de un número entero no negativo.\r\n    \"\"\"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * factorial(n-1)\r\n\r\nprint(factorial(5))  # Imprime 120\n```\n\n2. FUNCION PARA VERIFICAR SI UN NUMERO ES PRIMO\n\n```python\ndef es_primo(n):\r\n    \"\"\"\r\n    Verifica si un número es primo.\r\n    \"\"\"\r\n    if n <= 1:\r\n        return False\r\n    for i in range(2, int(n**0.5) + 1):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\nprint(es_primo(7))  # Imprime True\r\nprint(es_primo(10)) # Imprime False\n```\n\n## SUBTEMAS SUGERIDOS\n\n* **Decoradores**: Funciones que modifican el comportamiento de otras funciones.\n\n* **Generadores**: Funciones que producen una secuencia de valores utilizando la palabra clave yield.\n\n* **Recursión**: Funciones que se llaman a sí mismas para resolver un problema.\n\n* **Programación Funcional**: Uso de funciones como ciudadanos de primera clase, funciones puras y funciones de orden superior.\n\nLas funciones son una herramienta poderosa en Python que permite escribir código modular, reutilizable y fácil de mantener. Dominar su uso es esencial para cualquier programador de Python.\n"
  },
  {
    "slug": "/programming/languages/python",
    "title": "Python",
    "description": "Python es un lenguaje de programación de alto nivel, interpretado y de propósito general, conocido por su sintaxis clara y legible.",
    "content": "Python es un lenguaje de programación ampliamente utilizado en diversas áreas, desde el desarrollo web hasta la ciencia de datos y el aprendizaje automático. Su diseño enfatiza la legibilidad del código, utilizando una sintaxis que es fácil de entender y aprender. Esto lo convierte en una excelente opción tanto para principiantes como para desarrolladores experimentados.\n\n### Historia de Python\n\nPython fue creado por Guido van Rossum y lanzado por primera vez en 1991. Van Rossum trabajaba en el Centrum Wiskunde & Informatica (CWI) en los Países Bajos cuando comenzó a desarrollar Python como un sucesor del lenguaje ABC. El nombre \"Python\" proviene de la afición de Van Rossum por el grupo de comedia británico Monty Python.\n\nEl diseño de Python se centró en la legibilidad del código y la facilidad de uso. Van Rossum creía que el código debería ser fácil de entender y mantener, y que los desarrolladores deberían poder escribir programas de manera rápida y eficiente.\n\nA lo largo de los años, Python ha evolucionado y ha ganado una gran comunidad de desarrolladores que contribuyen con bibliotecas y herramientas que amplían sus capacidades. Python 2.0 fue lanzado en 2000, introduciendo nuevas características como la recolección de basura y el soporte Unicode. Python 3.0, una versión importante que no es retrocompatible con Python 2.0, fue lanzado en 2008 y trajo consigo mejoras significativas en el lenguaje.\n\n### Objetivos Clave de Python\n\n1. **Legibilidad del Código:** Python está diseñado para ser fácil de leer y entender. Su sintaxis clara y legible facilita la escritura y el mantenimiento del código.\n2. **Versatilidad:** Python es un lenguaje de propósito general que se puede utilizar en una amplia variedad de aplicaciones, desde el desarrollo web hasta la ciencia de datos y el aprendizaje automático.\n3. **Gran Comunidad y Ecosistema:** Python cuenta con una gran comunidad de desarrolladores que contribuyen con bibliotecas y herramientas que amplían sus capacidades. Esto facilita la búsqueda de soluciones a problemas comunes y la colaboración en proyectos.\n4. **Multiplataforma:** Python es compatible con una amplia variedad de sistemas operativos, incluyendo Windows, macOS y Linux. Esto permite a los desarrolladores escribir código que se puede ejecutar en diferentes plataformas sin necesidad de realizar modificaciones significativas.\n5. **Fácil de Aprender:** Python es un lenguaje fácil de aprender, lo que lo convierte en una excelente opción para principiantes. Su sintaxis clara y legible facilita la comprensión de los conceptos básicos de la programación.\n\n### Instalación de Python\n\nLa instalación de Python es un proceso sencillo que varía ligeramente dependiendo del sistema operativo.\n\n#### En Windows:\n\n1. **Descargar:** Visita el sitio web oficial de Python ([https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)) y descarga la última versión de Python para Windows.\n2. **Ejecutar:** Ejecuta el archivo descargado. Asegúrate de marcar la casilla \"Add Python to PATH\" durante la instalación para que Python sea accesible desde la línea de comandos.\n3. **Verificar:** Abre la línea de comandos y escribe `python --version`. Deberías ver la versión de Python instalada.\n\n#### En macOS:\n\n1. **Descargar:** Visita el sitio web oficial de Python ([https://www.python.org/downloads/macos/](https://www.python.org/downloads/macos/)) y descarga la última versión de Python para macOS.\n2. **Ejecutar:** Ejecuta el archivo descargado y sigue las instrucciones del instalador.\n3. **Verificar:** Abre la terminal y escribe `python3 --version`. Deberías ver la versión de Python instalada.\n\n#### En Linux:\n\nEn la mayoría de las distribuciones de Linux, Python ya está instalado por defecto. Sin embargo, es posible que necesites instalar la última versión.\n\n1. **Actualizar el Gestor de Paquetes:** Abre la terminal y ejecuta el comando `sudo apt update` (para Debian/Ubuntu) o `sudo yum update` (para Fedora/CentOS).\n2. **Instalar Python:** Ejecuta el comando `sudo apt install python3` (para Debian/Ubuntu) o `sudo yum install python3` (para Fedora/CentOS).\n3. **Verificar la Instalación:** Escribe `python3 --version` en la terminal. Deberías ver la versión de Python instalada.\n\n### Información Adicional Interesante\n\n* **Tipado Dinámico:** Python es un lenguaje de tipado dinámico, lo que significa que no es necesario declarar el tipo de una variable antes de usarla. El tipo de una variable se determina en tiempo de ejecución.\n* **Tipado Fuerte:** Python es un lenguaje de tipado fuerte, lo que significa que no se permiten operaciones entre tipos de datos incompatibles. Por ejemplo, no se puede sumar una cadena de texto a un número entero.\n* **Orientado a Objetos:** Python es un lenguaje orientado a objetos, lo que significa que se basa en el concepto de objetos, que son instancias de clases. Los objetos tienen atributos (datos) y métodos (funciones) que operan sobre esos datos.\n* **Interpretado:** Python es un lenguaje interpretado, lo que significa que el código se ejecuta línea por línea por un intérprete, en lugar de ser compilado en código máquina. Esto facilita la depuración y el desarrollo rápido de aplicaciones.\n\n### Ejemplos de Implementación\n\n#### Ejemplo 1: Hola Mundo\n\n```python\nprint(\"Hola, mundo!\")\n```\n\nEste es el programa más simple en Python. La función print() muestra el texto \"Hola, mundo!\" en la consola.\n\n#### Ejemplo 2: Suma de Dos Números\n\n```python\na = 10\r\nb = 20\r\nsuma = a + b\r\nprint(\"La suma de\", a, \"y\", b, \"es\", suma)\n```\n\nEste programa define dos variables, a y b, y calcula su suma. Luego, muestra el resultado en la consola.\n\n#### Ejemplo 3: Bucle For\n\n```python\nfor i in range(5):\r\n    print(\"El valor de i es:\", i)\n```\n\nEste programa utiliza un bucle for para iterar sobre los números del 0 al 4 y muestra el valor de i en cada iteración.\n\n#### Ejemplo 4: Función\n\n```python\ndef saludar(nombre):\r\n    print(\"Hola, \" + nombre + \"!\")\r\n\r\nsaludar(\"Juan\")\n```\n"
  },
  {
    "slug": "/programming/languages/python/libraries",
    "title": "Bibliotecas de programación para Python",
    "description": "Exploración de las bibliotecas esenciales de Python para diversas tareas de programación.",
    "content": "Las bibliotecas de Python son colecciones de módulos y funciones que extienden las capacidades del lenguaje base. Facilitan la realización de tareas complejas sin necesidad de escribir código desde cero. Python, gracias a su vasta comunidad y versatilidad, cuenta con un ecosistema de bibliotecas muy rico y diverso, que abarca desde el desarrollo web hasta la ciencia de datos y el aprendizaje automático.\n\n## OBJETIVOS CLAVE\n\n1. **Facilitar la reutilización de código:** Las bibliotecas permiten a los desarrolladores utilizar código probado y optimizado, ahorrando tiempo y esfuerzo.\n2. **Acelerar el desarrollo:** Al proporcionar herramientas y funciones predefinidas, las bibliotecas agilizan el proceso de desarrollo de software.\n3. **Resolver problemas específicos:** Existen bibliotecas especializadas para abordar problemas en áreas como el análisis de datos, la visualización, el desarrollo web, y más.\n4. **Promover la estandarización:** Las bibliotecas populares establecen estándares de facto para ciertas tareas, lo que facilita la colaboración y el intercambio de código entre desarrolladores.\n\n## BIBLIOTECAS ESENCIALES DE PYTHON\n\n* **NumPy:** Fundamental para la computación numérica. Proporciona soporte para arrays multidimensionales y funciones matemáticas de alto rendimiento. Es la base de muchas otras bibliotecas de ciencia de datos.\n* **Pandas:** Ofrece estructuras de datos y herramientas para el análisis y manipulación de datos tabulares. Facilita la limpieza, transformación y análisis de datos.\n* **Matplotlib:** Biblioteca para la creación de gráficos y visualizaciones de datos. Permite generar una amplia variedad de gráficos, desde histogramas hasta gráficos de dispersión y mapas de calor.\n* **Seaborn:** Construida sobre Matplotlib, proporciona una interfaz de alto nivel para crear gráficos estadísticos atractivos e informativos.\n* **Scikit-learn:** Biblioteca para el aprendizaje automático. Ofrece herramientas para clasificación, regresión, clustering, reducción de dimensionalidad, selección de modelos y preprocesamiento de datos.\n* **TensorFlow y Keras:** Bibliotecas para el aprendizaje profundo. TensorFlow es un framework de bajo nivel, mientras que Keras proporciona una interfaz de alto nivel para construir y entrenar modelos de redes neuronales.\n* **PyTorch:** Otra biblioteca popular para el aprendizaje profundo, conocida por su flexibilidad y facilidad de uso.\n* **Flask y Django:** Frameworks para el desarrollo web. Flask es un microframework ligero, mientras que Django es un framework más completo que ofrece una amplia gama de características.\n* **Requests:** Biblioteca para realizar solicitudes HTTP. Facilita la interacción con APIs web y la obtención de datos de la web.\n* **Beautiful Soup:** Biblioteca para el análisis sintáctico de HTML y XML. Permite extraer información de páginas web de forma sencilla.\n* **SQLAlchemy:** Biblioteca para la interacción con bases de datos relacionales. Proporciona una interfaz de alto nivel para realizar consultas y manipular datos.\n\n## EJEMPLOS DE IMPLEMENTACIÓN\n\n* **Análisis de datos con Pandas:**\n\n```python\nimport pandas as pd\r\n\r\n# Cargar datos desde un archivo CSV\r\ndata = pd.read_csv('data.csv')\r\n\r\n# Mostrar las primeras filas del DataFrame\r\nprint(data.head())\r\n\r\n# Calcular estadísticas descriptivas\r\nprint(data.describe())\n```\n\n### VISUALIZACION DE DATOS CON Matplotlib:\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\n# Crear un gráfico de líneas\r\nplt.plot([1, 2, 3, 4], [5, 6, 7, 8])\r\n\r\n# Añadir etiquetas y título\r\nplt.xlabel('Eje X')\r\nplt.ylabel('Eje Y')\r\nplt.title('Gráfico de líneas')\r\n\r\n# Mostrar el gráfico\r\nplt.show()\n```\n\n### DESARROLLO WEB CON Flask:\n\n```python\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/')\r\ndef hello_world():\r\n    return '¡Hola, mundo!'\r\n\r\nif __name__ == '__main__':\r\n    app.run()\n```\n\n## MAS INFORMACION INTERESANTE\n\n* **Gestión de dependencias**: Es importante utilizar un gestor de dependencias como pip o conda para instalar y gestionar las bibliotecas de Python.\n\n* **Entornos virtuales**: Se recomienda utilizar entornos virtuales para aislar las dependencias de cada proyecto y evitar conflictos entre bibliotecas.\n\n* **Documentación**: La documentación oficial de cada biblioteca es la mejor fuente de información para aprender a utilizarla correctamente.\n\n## SUBTEMAS SUGERIDOS\n\n* Bibliotecas para el procesamiento del lenguaje natural (NLTK, SpaCy).\n\n* Bibliotecas para el desarrollo de juegos (Pygame, Pyglet).\n\n* Bibliotecas para la creación de interfaces gráficas de usuario (Tkinter, PyQt).\n\n* Bibliotecas para el desarrollo de aplicaciones móviles (Kivy, BeeWare).\n"
  },
  {
    "slug": "/programming/languages/python/modules-packages",
    "title": "Módulos y Paquetes en Python",
    "description": "Explicación detallada sobre cómo organizar y reutilizar código en Python mediante módulos y paquetes.",
    "content": "Los módulos y paquetes son mecanismos fundamentales en Python para organizar y reutilizar código. Permiten estructurar proyectos grandes en componentes más manejables, facilitando el mantenimiento, la legibilidad y la colaboración.\n\n## ¿QUE ES UN MODULO EN PYTHON?\n\nUn módulo en Python es simplemente un archivo que contiene código Python, como definiciones de funciones, clases o variables. El nombre del archivo es el nombre del módulo con la extensión `.py`. Los módulos permiten dividir un programa grande en archivos más pequeños y manejables.\n\n### OBJETIVOS CLAVE DE LOS MODULOS\n\n* **Reutilización de código:** Permiten usar funciones y clases definidas en un archivo en otros archivos.\n* **Organización:** Facilitan la estructuración de proyectos grandes en componentes lógicos.\n* **Namespace:** Crean espacios de nombres separados, evitando conflictos entre nombres de variables y funciones.\n\n### ¿COMO IMPORTAR UN MODULO?\n\nPara utilizar un módulo en Python, se utiliza la declaración `import`. Existen varias formas de importar módulos:\n\n#### 1. IMPORTAR EL MODULO COMPLETO\n\n```python\nimport nombre_del_modulo\n```\n\nEsto importa el módulo completo y se accede a sus elementos utilizando la notación de punto: `nombre_del_modulo.elemento`.\n\nEjemplo:\n\n```python\nimport math\r\nprint(math.sqrt(16))  # Output: 4.0\n```\n\n#### 2. IMPORTAR ELEMENTOS ESPECIFICOS DEL MODULO\n\n```python\nfrom nombre_del_modulo import elemento1, elemento2, ...\n```\n\nEsto importa solo los elementos especificados del módulo, y se pueden utilizar directamente sin la notación de punto.\n\nEjemplo:\n\n```python\nfrom math import sqrt, pi\r\nprint(sqrt(16))  # Output: 4.0\r\nprint(pi)       # Output: 3.141592653589793\n```\n\n#### 3. IMPORTAR TODOS LOS ELEMENTOS DEL MODULO (NO RECOMENDADO)\n\n```python\nfrom nombre_del_modulo import *\n```\n\nEsto importa todos los elementos del módulo al espacio de nombres actual. No se recomienda porque puede llevar a conflictos de nombres y dificulta la legibilidad del código.\n\n#### 4. ASIGNAR UN ALIAS AL MODULO O A SUS ELEMENTOS\n\n```python\nimport nombre_del_modulo as alias\r\nfrom nombre_del_modulo import elemento as otro_alias\n```\n\nEsto permite utilizar un nombre diferente para referirse al módulo o a sus elementos.\n\nEjemplo:\n\n```python\nimport math as m\r\nprint(m.sqrt(25))  # Output: 5.0\r\n\r\nfrom datetime import datetime as dt\r\nnow = dt.now()\r\nprint(now)\n```\n\n## ¿QUE ES UN PAQUETE EN PYTHON?\n\nUn paquete en Python es una forma de organizar módulos relacionados en un directorio. Un directorio se considera un paquete si contiene un archivo especial llamado `__init__.py`. Este archivo puede estar vacío o contener código de inicialización para el paquete.\n\n### OBJETIVOS CLAVE DE LOS PAQUETES\n\n* **Jerarquía:** Permiten crear una jerarquía de módulos, organizando el código en subpaquetes y submódulos.\n* **Organización a gran escala:** Facilitan la gestión de proyectos grandes y complejos.\n* **Namespace:** Proporcionan un espacio de nombres jerárquico, evitando conflictos entre nombres de módulos.\n\n### ESTRUCTURA DE UN PAQUETE\n\nLa estructura típica de un paquete es la siguiente\n\n<FileTree>\n  <Folder name=\"mi_paquete\" label=\"Mi Paquete\">\n    <File name=\"init.py\" label=\"Init File\" />\n\n    <File name=\"modulo1.py\" label=\"Módulo 1 File\" />\n\n    <File name=\"modulo2.py\" label=\"Módulo 2 File\" />\n\n    <Folder name=\"subpaquete\" label=\"Subpaquete\">\n      <File name=\"init.py\" label=\"Init File\" />\n\n      <File name=\"submodulo1.py\" label=\"Submódulo 1 File\" />\n\n      <File name=\"submodulo2.py\" label=\"Submódulo 2 File\" />\n    </Folder>\n  </Folder>\n</FileTree>\n\n* `mi_paquete`: Es el directorio raíz del paquete.\n* `__init__.py`: Es el archivo que indica que el directorio es un paquete.\n* `modulo1.py`, `modulo2.py`: Son módulos dentro del paquete.\n* `subpaquete`: Es un subpaquete dentro del paquete principal.\n* `submodulo1.py`, `submodulo2.py`: Son módulos dentro del subpaquete.\n\n### ¿COMO IMPORTAR DESDE UN PAQUETE?\n\nExisten varias formas de importar módulos y elementos desde un paquete:\n\n#### 1.  IMPORTAR EL PAQUETE COMPLETO\n\n```python\nimport mi_paquete\n```\n\nEsto importa el paquete, pero no sus módulos directamente. Para acceder a los módulos, se utiliza la notación de punto: `mi_paquete.modulo1`.\n\n#### 2.  IMPORTAR UN MODULO ESPECIFICO DEL PAQUETE\n\n```python\nimport mi_paquete.modulo1\n```\n\nEsto importa el módulo `modulo1` del paquete `mi_paquete`. Se accede a sus elementos utilizando la notación de punto: `mi_paquete.modulo1.funcion`.\n\n#### 3.  IMPORTAR ELEMENTOS ESPECIFICOS DE UN MODULO DENTRO DEL PAQUETE\n\n```python\nfrom mi_paquete.modulo1 import funcion1, funcion2\n```\n\nEsto importa las funciones `funcion1` y `funcion2` del módulo `modulo1` dentro del paquete `mi_paquete`. Se pueden utilizar directamente sin la notación de punto.\n\n#### 4.  IMPORTAR UN SUBPAQUETE\n\n```python\nimport mi_paquete.subpaquete\n```\n\nEsto importa el subpaquete `subpaquete` del paquete `mi_paquete`.\n\n#### 5.  IMPORTAR UN MODULO DESDE UN SUBPAQUETE\n\n```python\nfrom mi_paquete.subpaquete import submodulo1\n```\n\nEsto importa el módulo `submodulo1` del subpaquete `subpaquete` dentro del paquete `mi_paquete`.\n\n### EL ARCHIVO **init**.py\n\nEl archivo `__init__.py` es un archivo especial que se ejecuta cuando se importa un paquete. Puede contener código para inicializar el paquete, como la importación de módulos y la definición de variables.\n\n#### USOS COMUNES DE **init**.py\n\n* **Inicialización del paquete:** Puede contener código para configurar el entorno del paquete.\n* **Importación de submódulos:** Puede importar submódulos para que estén disponibles directamente desde el paquete.\n* **Definición de la API del paquete:** Puede definir qué módulos y funciones son parte de la API pública del paquete.\n\n#### EJEMPLO\n\n```python\n# mi_paquete/__init__.py\r\nfrom .modulo1 import funcion1\r\nfrom .modulo2 import funcion2\r\n\r\n__all__ = ['funcion1', 'funcion2']\n```\n\nEn este ejemplo, `__init__.py` importa `funcion1` de `modulo1.py` y `funcion2` de `modulo2.py`, y los hace disponibles directamente desde el paquete `mi_paquete`. La variable `__all__` define la lista de nombres que se importan cuando se utiliza `from mi_paquete import *`.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO DE MODULO\n\nSupongamos que tenemos un archivo llamado `calculadora.py` con el siguiente contenido\n\n```python\n# calculadora.py\r\n\r\ndef sumar(a, b):\r\n    \"\"\"Suma dos números.\"\"\"\r\n    return a + b\r\n\r\ndef restar(a, b):\r\n    \"\"\"Resta dos números.\"\"\"\r\n    return a - b\n```\n\nPara usar este módulo en otro archivo\n\n```python\n# main.py\r\nimport calculadora\r\n\r\nresultado_suma = calculadora.sumar(5, 3)\r\nresultado_resta = calculadora.restar(10, 4)\r\n\r\nprint(f\"Suma: {resultado_suma}\")   # Output: Suma: 8\r\nprint(f\"Resta: {resultado_resta}\")  # Output: Resta: 6\n```\n\n### EJEMPLO DE PAQUETE\n\nConsideremos la siguiente estructura de paquete\n\n<FileTree>\n  <Folder name=\"mi_paquete\" label=\"Mi paquete\">\n    <File name=\"__init__.py\" label=\"Init File\" />\n\n    <Folder name=\"operaciones\" label=\"Operaciones\">\n      <File name=\"__init__.py\" label=\"Init File\" />\n\n      <File name=\"aritmetica.py\" label=\"Aritmética File\" />\n\n      <File name=\"trigonometria.py\" label=\"Trigonometría File\" />\n    </Folder>\n  </Folder>\n</FileTree>\n\n`mi_paquete/__init__.py`\n\n```python\n# mi_paquete/__init__.py\r\nprint(\"Inicializando mi_paquete\")\n```\n\n`mi_paquete/operaciones/__init__.py`\n\n```python\n# mi_paquete/operaciones/__init__.py\r\nprint(\"Inicializando el subpaquete operaciones\")\n```\n\n`mi_paquete/operaciones/aritmetica.py`\n\n```python\n# mi_paquete/operaciones/aritmetica.py\r\ndef multiplicar(a, b):\r\n    \"\"\"Multiplica dos números.\"\"\"\r\n    return a * b\r\n\r\ndef dividir(a, b):\r\n    \"\"\"Divide dos números.\"\"\"\r\n    if b == 0:\r\n        return \"Error: No se puede dividir por cero.\"\r\n    return a / b\n```\n\n`mi_paquete/operaciones/trigonometria.py`\n\n```python\n# mi_paquete/operaciones/trigonometria.py\r\nimport math\r\n\r\ndef seno(angulo):\r\n    \"\"\"Calcula el seno de un ángulo en radianes.\"\"\"\r\n    return math.sin(angulo)\r\n\r\ndef coseno(angulo):\r\n    \"\"\"Calcula el coseno de un ángulo en radianes.\"\"\"\r\n    return math.cos(angulo)\n```\n\nPara usar este paquete\n\n```python\n# main.py\r\nfrom mi_paquete.operaciones import aritmetica, trigonometria\r\n\r\nresultado_multiplicacion = aritmetica.multiplicar(4, 6)\r\nresultado_seno = trigonometria.seno(math.pi / 2)\r\n\r\nprint(f\"Multiplicación: {resultado_multiplicacion}\")  # Output: Multiplicación: 24\r\nprint(f\"Seno: {resultado_seno}\")                    # Output: Seno: 1.0\n```\n\n## SUBTEMAS SUGERIDOS\n\n* **Namespaces en Python**: Profundizar en cómo Python gestiona los espacios de nombres y cómo los módulos y paquetes influyen en ellos.\n\n* ****all** variable**: Explicar en detalle cómo se utiliza la variable **all** para controlar qué nombres se exportan de un módulo o paquete.\n\n* **Importación relativa vs. absoluta**: Diferencias y usos de las importaciones relativas (ej. from . import modulo) y absolutas (ej. from mi\\_paquete import modulo).\n\n* **Manejo de errores en la importación**: Cómo manejar excepciones que pueden ocurrir durante la importación de módulos y paquetes.\n\n* **Creación de paquetes distribuibles**: Cómo crear paquetes que se pueden instalar y distribuir utilizando herramientas como pip.\n"
  },
  {
    "slug": "/programming/languages/python/oop",
    "title": "Programación Orientada a Objetos en Python",
    "description": "Explicación detallada de los conceptos de la programación orientada a objetos (POO) en Python, incluyendo clases, objetos, herencia, polimorfismo, encapsulamiento y abstracción.",
    "content": "La Programación Orientada a Objetos (POO) es un paradigma de programación que utiliza \"objetos\" para diseñar aplicaciones y programas de computadora. Un objeto combina datos (atributos) y código (métodos) que operan sobre esos datos. La POO se basa en varios principios clave que facilitan la creación de software modular, reutilizable y fácil de mantener. Python es un lenguaje que soporta completamente la POO, permitiendo a los desarrolladores aprovechar sus beneficios.\n\n## CONCEPTOS CLAVE DE LA POO\n\n### 1.  CLASE\n\n* Una clase es una plantilla o un plano para crear objetos. Define los atributos (datos) y los métodos (comportamiento) que tendrán los objetos de esa clase.\n* En Python, las clases se definen utilizando la palabra clave `class`.\n\n```python\nclass Perro:\r\n    # Atributos de la clase\r\n    especie = \"Canino\"\r\n\r\n    # Método constructor\r\n    def __init__(self, nombre, edad):\r\n        self.nombre = nombre\r\n        self.edad = edad\r\n\r\n    # Métodos de la clase\r\n    def ladrar(self):\r\n        return \"¡Guau!\"\r\n\r\n    def descripcion(self):\r\n        return f\"{self.nombre} tiene {self.edad} años.\"\n```\n\n### 2.  OBJETO\n\n* Un objeto es una instancia de una clase. Es una entidad concreta que tiene atributos con valores específicos y puede realizar acciones definidas por los métodos de su clase.\n* Para crear un objeto, se llama al constructor de la clase.\n\n```python\n# Crear objetos de la clase Perro\r\nmi_perro = Perro(\"Buddy\", 3)\r\notro_perro = Perro(\"Max\", 5)\r\n\r\n# Acceder a los atributos del objeto\r\nprint(mi_perro.nombre)  # Imprime \"Buddy\"\r\nprint(otro_perro.edad)  # Imprime 5\r\n\r\n# Llamar a los métodos del objeto\r\nprint(mi_perro.ladrar())  # Imprime \"¡Guau!\"\r\nprint(otro_perro.descripcion())  # Imprime \"Max tiene 5 años.\"\n```\n\n### 3.  ATRIBUTOS\n\n* Los atributos son las características o propiedades de un objeto. Representan los datos que el objeto contiene.\n* En Python, los atributos se definen dentro de la clase y se acceden utilizando la notación de punto (`objeto.atributo`).\n* Hay atributos de clase (compartidos por todas las instancias) y atributos de instancia (únicos para cada objeto).\n\n```python\nclass Perro:\r\n    # Atributo de clase\r\n    especie = \"Canino\"\r\n\r\n    def __init__(self, nombre, edad):\r\n        # Atributos de instancia\r\n        self.nombre = nombre\r\n        self.edad = edad\n```\n\n### 4.  METODOS\n\n* Los métodos son las acciones o funciones que un objeto puede realizar. Definen el comportamiento del objeto.\n* En Python, los métodos se definen dentro de la clase y siempre tienen al menos un parámetro, que es `self` (una referencia al objeto mismo).\n\n```python\nclass Perro:\r\n    def __init__(self, nombre, edad):\r\n        self.nombre = nombre\r\n        self.edad = edad\r\n\r\n    def ladrar(self):\r\n        return \"¡Guau!\"\n```\n\n### 5.  HERENCIA\n\n* La herencia es un mecanismo que permite crear nuevas clases (clases hijas o subclases) basadas en clases existentes (clases padre o superclases). La subclase hereda los atributos y métodos de la superclase, y puede añadir nuevos atributos y métodos o modificar los existentes.\n* La herencia promueve la reutilización del código y facilita la creación de jerarquías de clases.\n\n```python\nclass Animal:\r\n    def __init__(self, nombre):\r\n        self.nombre = nombre\r\n\r\n    def hablar(self):\r\n        return \"Sonido genérico de animal\"\r\n\r\nclass Perro(Animal):\r\n    def __init__(self, nombre, raza):\r\n        super().__init__(nombre)  # Llama al constructor de la superclase\r\n        self.raza = raza\r\n\r\n    def hablar(self):\r\n        return \"¡Guau!\"  # Sobreescribe el método de la superclase\r\n\r\nmi_perro = Perro(\"Buddy\", \"Labrador\")\r\nprint(mi_perro.nombre)  # Imprime \"Buddy\"\r\nprint(mi_perro.raza)  # Imprime \"Labrador\"\r\nprint(mi_perro.hablar())  # Imprime \"¡Guau!\"\r\n\r\nmi_animal = Animal(\"Genérico\")\r\nprint(mi_animal.hablar()) # Imprime \"Sonido genérico de animal\"\n```\n\n### 6.  POLIMORFISMO\n\n* El polimorfismo es la capacidad de un objeto de tomar muchas formas. Permite que objetos de diferentes clases respondan al mismo método de manera diferente.\n* En Python, el polimorfismo se implementa a través de la herencia y la sobreescritura de métodos.\n\n```python\nclass Animal:\r\n    def hablar(self):\r\n        return \"Sonido genérico de animal\"\r\n\r\nclass Perro(Animal):\r\n    def hablar(self):\r\n        return \"¡Guau!\"\r\n\r\nclass Gato(Animal):\r\n    def hablar(self):\r\n        return \"¡Miau!\"\r\n\r\ndef hacer_hablar(animal):\r\n    print(animal.hablar())\r\n\r\nmi_perro = Perro()\r\nmi_gato = Gato()\r\n\r\nhacer_hablar(mi_perro)  # Imprime \"¡Guau!\"\r\nhacer_hablar(mi_gato)  # Imprime \"¡Miau!\"\n```\n\n### 7.  ENCAPSULAMIENTO\n\n* El encapsulamiento es el principio de ocultar los detalles internos de un objeto y exponer solo una interfaz pública para interactuar con él. Protege los datos del objeto de accesos no autorizados y facilita el mantenimiento del código.\n* En Python, el encapsulamiento se implementa utilizando convenciones de nomenclatura (atributos y métodos precedidos por uno o dos guiones bajos).\n\n```python\nclass Coche:\r\n    def __init__(self, marca, modelo):\r\n        self.marca = marca\r\n        self.modelo = modelo\r\n        self.__velocidad = 0  # Atributo privado\r\n\r\n    def acelerar(self, incremento):\r\n        if incremento > 0:\r\n            self.__velocidad += incremento\r\n\r\n    def obtener_velocidad(self):\r\n        return self.__velocidad\r\n\r\nmi_coche = Coche(\"Toyota\", \"Corolla\")\r\nmi_coche.acelerar(30)\r\nprint(mi_coche.obtener_velocidad())  # Imprime 30\r\n# print(mi_coche.__velocidad)  # Esto daría un error (AttributeError)\n```\n\n### 8.  ABSTRACCION\n\n* La abstracción es el proceso de simplificar la representación de un objeto, mostrando solo los detalles esenciales y ocultando la complejidad innecesaria. Permite a los desarrolladores concentrarse en lo que hace un objeto en lugar de cómo lo hace.\n* En Python, la abstracción se puede lograr mediante clases abstractas y métodos abstractos.\n\n```python\nfrom abc import ABC, abstractmethod\r\n\r\nclass Figura(ABC):\r\n    @abstractmethod\r\n    def area(self):\r\n        pass\r\n\r\n    @abstractmethod\r\n    def perimetro(self):\r\n        pass\r\n\r\nclass Rectangulo(Figura):\r\n    def __init__(self, base, altura):\r\n        self.base = base\r\n        self.altura = altura\r\n\r\n    def area(self):\r\n        return self.base * self.altura\r\n\r\n    def perimetro(self):\r\n        return 2 * (self.base + self.altura)\r\n\r\n# mi_figura = Figura()  # Esto daría un error (TypeError)\r\nmi_rectangulo = Rectangulo(5, 3)\r\nprint(mi_rectangulo.area())  # Imprime 15\r\nprint(mi_rectangulo.perimetro())  # Imprime 16\n```\n\n## BENEFICIOS DE LA POO\n\n* **Modularidad:** La POO permite dividir un programa en módulos (clases y objetos) independientes, lo que facilita la comprensión y el mantenimiento del código.\n* **Reutilización:** La herencia permite reutilizar el código existente, evitando la duplicación y reduciendo el tiempo de desarrollo.\n* **Extensibilidad:** La POO facilita la adición de nuevas funcionalidades al programa sin modificar el código existente.\n* **Mantenibilidad:** La encapsulación y la abstracción hacen que el código sea más fácil de mantener y modificar, ya que los cambios en una parte del programa no afectan a otras partes.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### 1.  SISTEMA DE GESTION DE EMPLEADOS\n\n```python\nclass Empleado:\r\n    def __init__(self, nombre, salario):\r\n        self.nombre = nombre\r\n        self.salario = salario\r\n\r\n    def aumentar_salario(self, porcentaje):\r\n        self.salario *= (1 + porcentaje / 100)\r\n\r\n    def __str__(self):\r\n        return f\"Nombre: {self.nombre}, Salario: {self.salario}\"\r\n\r\nclass Gerente(Empleado):\r\n    def __init__(self, nombre, salario, departamento):\r\n        super().__init__(nombre, salario)\r\n        self.departamento = departamento\r\n\r\n    def __str__(self):\r\n        return f\"{super().__str__()}, Departamento: {self.departamento}\"\r\n\r\nempleado1 = Empleado(\"Juan Pérez\", 50000)\r\ngerente1 = Gerente(\"Ana Gómez\", 80000, \"Ventas\")\r\n\r\nprint(empleado1)\r\nprint(gerente1)\r\n\r\nempleado1.aumentar_salario(10)\r\ngerente1.aumentar_salario(15)\r\n\r\nprint(empleado1)\r\nprint(gerente1)\n```\n\n### 2.  SISTEMA DE GESTION DE FIGURAS GEOMETRICAS\n\n```python\nimport math\r\nfrom abc import ABC, abstractmethod\r\n\r\nclass Figura(ABC):\r\n    @abstractmethod\r\n    def area(self):\r\n        pass\r\n\r\n    @abstractmethod\r\n    def perimetro(self):\r\n        pass\r\n\r\nclass Circulo(Figura):\r\n    def __init__(self, radio):\r\n        self.radio = radio\r\n\r\n    def area(self):\r\n        return math.pi * self.radio ** 2\r\n\r\n    def perimetro(self):\r\n        return 2 * math.pi * self.radio\r\n\r\nclass Rectangulo(Figura):\r\n    def __init__(self, base, altura):\r\n        self.base = base\r\n        self.altura = altura\r\n\r\n    def area(self):\r\n        return self.base * self.altura\r\n\r\n    def perimetro(self):\r\n        return 2 * (self.base + self.altura)\r\n\r\nmi_circulo = Circulo(5)\r\nmi_rectangulo = Rectangulo(4, 6)\r\n\r\nprint(f\"Área del círculo: {mi_circulo.area()}\")\r\nprint(f\"Perímetro del círculo: {mi_circulo.perimetro()}\")\r\nprint(f\"Área del rectángulo: {mi_rectangulo.area()}\")\r\nprint(f\"Perímetro del rectángulo: {mi_rectangulo.perimetro()}\")\n```\n\n## SUBSISTEMAS SUGERIDOS\n\n1. **Diseño de Clases:** Principios para diseñar clases efectivas y bien estructuradas.\n2. **Patrones de Diseño:** Soluciones reutilizables para problemas comunes de diseño en la POO.\n3. **Metaclases:** Clases que crean clases, permitiendo un control avanzado sobre la creación de clases.\n4. **Herencia Múltiple:** Herencia de múltiples superclases, con sus ventajas y desventajas.\n5. **Duck Typing:** Un concepto en Python donde la validez de un objeto se determina por la presencia de ciertos métodos y atributos, en lugar de su tipo específico.\n\nLa Programación Orientada a Objetos es una herramienta poderosa para desarrollar software complejo y mantenible. Dominar los conceptos de clases, objetos, herencia, polimorfismo, encapsulamiento y abstracción es fundamental para cualquier programador de Python.\n"
  },
  {
    "slug": "/programming/languages/rikmed",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages/typescript",
    "title": "Typescript",
    "description": "Typescript es un superconjunto de Javascript que añade tipado estático opcional.",
    "content": "Typescript es un lenguaje de programación de código abierto desarrollado por Microsoft. Se define como un superconjunto de Javascript, lo que significa que cualquier código Javascript válido también es código Typescript válido. La principal diferencia es que Typescript añade tipado estático opcional. Esto permite a los desarrolladores definir los tipos de datos que se utilizan en su código, lo que puede ayudar a prevenir errores y mejorar la legibilidad del código.\n\n## HISTORIA\n\nTypescript fue anunciado por primera vez en octubre de 2012 por Anders Hejlsberg, un arquitecto de software en Microsoft que también fue el arquitecto principal de C#. El objetivo principal de Typescript era proporcionar una forma de desarrollar aplicaciones Javascript a gran escala de manera más eficiente y con menos errores.\n\nAntes de Typescript, Javascript era un lenguaje dinámico y no tipado. Esto significaba que los errores de tipo solo se detectaban en tiempo de ejecución, lo que podía ser problemático para aplicaciones grandes y complejas. Typescript abordó este problema al introducir un sistema de tipos estático opcional que permite a los desarrolladores especificar los tipos de datos que se utilizan en su código.\n\nLa primera versión de Typescript (0.8) fue lanzada en abril de 2014. Desde entonces, Typescript ha evolucionado significativamente, con nuevas características y mejoras que se añaden regularmente. Algunas de las características clave que se han añadido a Typescript a lo largo del tiempo incluyen:\n\n* **Tipos de unión e intersección:** Permiten a los desarrolladores especificar que una variable puede ser de uno de varios tipos, o de todos los tipos especificados.\n* **Tipos genéricos:** Permiten a los desarrolladores escribir código que puede funcionar con una variedad de tipos de datos diferentes.\n* **Decoradores:** Permiten a los desarrolladores añadir metadatos a clases y métodos.\n* **Tipos condicionales:** Permiten a los desarrolladores definir tipos que dependen de otros tipos.\n\n## OBJETIVOS CLAVE DE TYPESCRIPT\n\nLos objetivos principales de Typescript son:\n\n1. **Mejorar la productividad del desarrollador:** Al proporcionar tipado estático opcional, Typescript ayuda a los desarrolladores a detectar errores en tiempo de compilación en lugar de tiempo de ejecución. Esto puede ahorrar tiempo y esfuerzo al depurar el código.\n2. **Facilitar el desarrollo de aplicaciones a gran escala:** Typescript proporciona características como módulos, clases e interfaces que facilitan la organización y el mantenimiento del código en proyectos grandes.\n3. **Mejorar la legibilidad del código:** Al especificar los tipos de datos que se utilizan en el código, Typescript puede hacer que el código sea más fácil de entender y mantener.\n4. **Proporcionar una mejor experiencia de desarrollo:** Typescript proporciona características como autocompletado, refactorización y navegación de código que pueden mejorar la experiencia de desarrollo.\n\n## INFORMACION RELEVANTE SOBRE TYPESCRIPT\n\n* **Compatibilidad con Javascript:** Typescript es compatible con Javascript, lo que significa que cualquier código Javascript válido también es código Typescript válido. Esto facilita la transición de Javascript a Typescript.\n* **Tipado estático opcional:** Typescript permite a los desarrolladores especificar los tipos de datos que se utilizan en su código, pero esto es opcional. Los desarrolladores pueden optar por utilizar tipado dinámico si lo prefieren.\n* **Compilación a Javascript:** El código Typescript se compila a Javascript, lo que significa que se puede ejecutar en cualquier navegador o entorno que soporte Javascript.\n* **Soporte para bibliotecas Javascript:** Typescript proporciona soporte para bibliotecas Javascript existentes a través de archivos de definición de tipos. Estos archivos describen la forma de las bibliotecas Javascript, lo que permite a Typescript proporcionar verificación de tipos y autocompletado para estas bibliotecas.\n* **Amplia adopción:** Typescript ha sido ampliamente adoptado por la comunidad de desarrollo web y es utilizado por muchas empresas grandes, incluyendo Microsoft, Google y Facebook.\n\n## INSTALACION DE TYPESCRIPT\n\nPara instalar Typescript, necesitarás Node.js y npm (Node Package Manager) instalados en tu sistema. Una vez que tengas Node.js y npm instalados, puedes instalar Typescript globalmente utilizando el siguiente comando:\n\n```bash\nnpm install -g typescript\n```\n\nEsto instalará el compilador de Typescript (tsc) globalmente, lo que te permitirá compilar archivos Typescript desde la línea de comandos.\n\nTambién puedes instalar Typescript localmente en un proyecto utilizando el siguiente comando:\n\n```bash\nnpm install --save-dev typescript\n```\n\nEsto instalará Typescript como una dependencia de desarrollo en tu proyecto.\n\n## EJEMPLO DE CODIGO TYPESCRIPT\n\nAquí hay un ejemplo sencillo de código Typescript:\n\n```typescript\nfunction saludar(nombre: string) {\r\n  return \"Hola, \" + nombre;\r\n}\r\n\r\nlet usuario = \"Juan\";\r\n\r\nconsole.log(saludar(usuario));\n```\n\nEn este ejemplo, la función `saludar` toma un argumento de tipo `string` y devuelve un saludo. La variable `usuario` también se declara como de tipo `string`.\n\nSi intentas pasar un valor que no sea una cadena a la función `saludar`, Typescript mostrará un error en tiempo de compilación. Por ejemplo:\n\n```typescript\nfunction saludar(nombre: string) {\r\n  return \"Hola, \" + nombre;\r\n}\r\n\r\nlet usuario = 123; // Error: Type 'number' is not assignable to type 'string'.\r\n\r\nconsole.log(saludar(usuario));\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [Sitio web oficial de Typescript](https://www.typescriptlang.org/)\n* [Documentación de Typescript](https://www.typescriptlang.org/docs/)\n* [Typescript en Wikipedia](https://es.wikipedia.org/wiki/TypeScript)\n* [Libro \"Pro Typescript\" de Steve Fenton](https://www.apress.com/gp/book/9781484244703)\n"
  },
  {
    "slug": "/programming/languages/typescript/typescript-introduction/advantages-of-using-typescript",
    "title": "Ventajas de Usar TypeScript",
    "description": "Exploración detallada de las ventajas clave de TypeScript sobre JavaScript, incluyendo tipado estático, detección temprana de errores, y mejor mantenibilidad del código.",
    "content": "TypeScript, un superconjunto de JavaScript desarrollado por Microsoft, ha ganado una inmensa popularidad en la comunidad de desarrollo web debido a sus numerosas ventajas sobre JavaScript puro. Aunque JavaScript es un lenguaje flexible y ampliamente utilizado, carece de algunas características que son cruciales para el desarrollo de aplicaciones a gran escala y el mantenimiento a largo plazo. TypeScript aborda estas deficiencias al introducir un sistema de tipado estático, características de programación orientada a objetos, y herramientas de desarrollo mejoradas.\n\n## OBJETIVOS CLAVE\n\n* **Tipado Estático:** Explicar cómo el tipado estático de TypeScript ayuda a detectar errores en tiempo de compilación, reduciendo los errores en tiempo de ejecución.\n* **Mejor Mantenibilidad:** Detallar cómo TypeScript facilita la refactorización y el mantenimiento del código a largo plazo.\n* **Escalabilidad:** Mostrar cómo TypeScript mejora la escalabilidad de los proyectos, especialmente en aplicaciones grandes y complejas.\n* **Productividad:** Describir cómo las herramientas de desarrollo mejoradas y la autocompletación inteligente aumentan la productividad de los desarrolladores.\n* **Compatibilidad:** Asegurar que TypeScript es compatible con JavaScript y puede ser adoptado gradualmente en proyectos existentes.\n\n## TIPADO ESTATICO\n\nUna de las mayores ventajas de TypeScript es su sistema de tipado estático. En JavaScript, los tipos de variables se determinan en tiempo de ejecución, lo que puede llevar a errores inesperados. TypeScript, en cambio, permite declarar los tipos de variables, parámetros de funciones y valores de retorno. Esto significa que el compilador de TypeScript puede verificar la corrección del tipo durante la compilación, detectando errores antes de que lleguen a la fase de ejecución.\n\n**Ejemplo:**\n\n```typescript\nfunction saludar(nombre: string): string {\r\n  return \"Hola, \" + nombre;\r\n}\r\n\r\nconsole.log(saludar(\"Juan\")); // Output: Hola, Juan\r\n// console.log(saludar(123)); // Error de compilación: Argument of type 'number' is not assignable to parameter of type 'string'.\n```\n\nEn este ejemplo, TypeScript asegura que la función `saludar` solo se llame con un argumento de tipo `string`. Si intentamos llamar a la función con un número, el compilador mostrará un error.\n\n## DETECCION TEMPRANA DE ERRORES\n\nEl tipado estático de TypeScript permite detectar errores en tiempo de compilación en lugar de en tiempo de ejecución. Esto significa que los desarrolladores pueden identificar y corregir errores mucho antes de que el código se implemente en producción. La detección temprana de errores reduce significativamente el tiempo y el costo de la depuración, y mejora la calidad general del software.\n\n**Ejemplo:**\n\n```typescript\ninterface Persona {\r\n  nombre: string;\r\n  edad: number;\r\n}\r\n\r\nfunction imprimirPersona(persona: Persona) {\r\n  console.log(\"Nombre: \" + persona.nombre);\r\n  console.log(\"Edad: \" + persona.edad);\r\n  // console.log(\"Dirección: \" + persona.direccion); // Error de compilación: Property 'direccion' does not exist on type 'Persona'.\r\n}\r\n\r\nconst persona1: Persona = { nombre: \"Ana\", edad: 30 };\r\nimprimirPersona(persona1);\n```\n\nEn este ejemplo, TypeScript detecta que la propiedad `direccion` no existe en la interfaz `Persona`, lo que ayuda a prevenir errores en tiempo de ejecución.\n\n## MEJOR MANTENIBILIDAD\n\nTypeScript facilita la refactorización y el mantenimiento del código a largo plazo. El tipado estático y las características de programación orientada a objetos hacen que el código sea más legible y comprensible. Además, las herramientas de desarrollo de TypeScript, como la autocompletación y la navegación de código, facilitan la búsqueda y modificación del código.\n\n**Ejemplo:**\n\n```typescript\nclass Animal {\r\n  nombre: string;\r\n\r\n  constructor(nombre: string) {\r\n    this.nombre = nombre;\r\n  }\r\n\r\n  hacerSonido() {\r\n    console.log(\"Sonido genérico\");\r\n  }\r\n}\r\n\r\nclass Perro extends Animal {\r\n  constructor(nombre: string) {\r\n    super(nombre);\r\n  }\r\n\r\n  hacerSonido() {\r\n    console.log(\"Guau guau!\");\r\n  }\r\n}\r\n\r\nconst miPerro = new Perro(\"Buddy\");\r\nmiPerro.hacerSonido(); // Output: Guau guau!\n```\n\nEn este ejemplo, la herencia y el polimorfismo de TypeScript permiten crear una jerarquía de clases que es fácil de entender y mantener.\n\n## ESCALABILIDAD\n\nTypeScript mejora la escalabilidad de los proyectos, especialmente en aplicaciones grandes y complejas. El tipado estático y las características de programación orientada a objetos facilitan la organización y la gestión del código. Además, las herramientas de desarrollo de TypeScript, como la refactorización y la navegación de código, facilitan la modificación y la ampliación del código.\n\n**Ejemplo:**\n\nEn un proyecto grande, TypeScript permite dividir el código en módulos y utilizar interfaces para definir las interacciones entre los módulos. Esto facilita la gestión del código y la colaboración entre los desarrolladores.\n\n## PRODUCTIVIDAD\n\nTypeScript aumenta la productividad de los desarrolladores al proporcionar herramientas de desarrollo mejoradas y autocompletación inteligente. El editor de código de TypeScript, como Visual Studio Code, proporciona información en tiempo real sobre los tipos de variables, los parámetros de funciones y los valores de retorno. Además, el editor proporciona autocompletación inteligente, lo que facilita la escritura de código y reduce los errores.\n\n**Ejemplo:**\n\nAl escribir código en Visual Studio Code con TypeScript, el editor muestra automáticamente los métodos y propiedades disponibles para un objeto, lo que facilita la escritura de código y reduce los errores.\n\n## COMPATIBILIDAD\n\nTypeScript es compatible con JavaScript y puede ser adoptado gradualmente en proyectos existentes. El código de TypeScript se compila en código JavaScript estándar, lo que significa que puede ejecutarse en cualquier navegador o entorno de ejecución de JavaScript. Además, TypeScript permite utilizar bibliotecas y marcos de trabajo de JavaScript existentes.\n\n**Ejemplo:**\n\nSe puede agregar TypeScript a un proyecto de JavaScript existente compilando gradualmente los archivos de JavaScript en archivos de TypeScript. Esto permite aprovechar las ventajas de TypeScript sin tener que reescribir todo el código.\n\n## CONCLUSION\n\nTypeScript ofrece numerosas ventajas sobre JavaScript, incluyendo tipado estático, detección temprana de errores, mejor mantenibilidad, escalabilidad y productividad. Aunque TypeScript requiere un poco más de configuración y aprendizaje inicial, los beneficios a largo plazo superan con creces los costos. TypeScript es una excelente opción para el desarrollo de aplicaciones web modernas y complejas.\n\n## FUENTES DEL DOCUMENTO\n\n* [TypeScript Official Documentation](https://www.typescriptlang.org/docs/)\n* [Microsoft TypeScript](https://github.com/microsoft/TypeScript)\n* [Stack Overflow - TypeScript](https://stackoverflow.com/questions/tagged/typescript)\n* [Medium - TypeScript Articles](https://medium.com/tag/typescript)\n"
  },
  {
    "slug": "/programming/languages/typescript/typescript-introduction/development-environment-setup",
    "title": "Configuracion del Entorno de Desarrollo Typescript",
    "description": "Guia detallada para configurar un entorno de desarrollo Typescript eficiente, incluyendo la instalacion de Node.js, el compilador de Typescript, un editor de codigo adecuado y herramientas de depuracion.",
    "content": "Configurar un entorno de desarrollo adecuado es crucial para trabajar eficientemente con Typescript. Un entorno bien configurado no solo facilita la escritura de codigo, sino que tambien ayuda a detectar errores tempranamente, mejorar la productividad y mantener la calidad del codigo. Este documento detalla los pasos necesarios para configurar un entorno de desarrollo Typescript completo y funcional.\n\n## OBJETIVOS CLAVE\n\n1. **Instalacion de Node.js y NPM:** Asegurar que Node.js y NPM (Node Package Manager) esten instalados correctamente, ya que son fundamentales para gestionar dependencias y ejecutar herramientas de desarrollo.\n2. **Instalacion del Compilador de Typescript (TSC):** Instalar el compilador de Typescript globalmente o localmente en un proyecto para poder transformar el codigo Typescript en Javascript.\n3. **Configuracion de un Editor de Codigo:** Seleccionar y configurar un editor de codigo como Visual Studio Code (VSCode) con las extensiones necesarias para Typescript.\n4. **Inicializacion de un Proyecto Typescript:** Crear y configurar un archivo `tsconfig.json` para definir las opciones de compilacion del proyecto.\n5. **Instalacion de Dependencias:** Utilizar NPM para instalar las dependencias necesarias del proyecto, incluyendo definiciones de tipos (@types).\n6. **Configuracion de Tareas de Compilacion:** Configurar tareas en el editor de codigo o mediante scripts de NPM para automatizar el proceso de compilacion.\n7. **Depuracion:** Configurar herramientas de depuracion para facilitar la identificacion y correccion de errores en el codigo Typescript.\n\n## 1. INSTALACION DE NODE.JS Y NPM\n\nNode.js es un entorno de ejecucion para Javascript que permite ejecutar codigo Javascript fuera del navegador. NPM es el gestor de paquetes de Node.js, utilizado para instalar y gestionar dependencias del proyecto.\n\n**Pasos:**\n\n1. **Descarga:** Visita el sitio web oficial de [Node.js](https://nodejs.org/) y descarga la version LTS (Long Term Support) recomendada para la mayoria de los usuarios.\n2. **Instalacion:** Ejecuta el instalador descargado y sigue las instrucciones. Asegurate de que la opcion \"Add to PATH\" este seleccionada para que Node.js y NPM sean accesibles desde la linea de comandos.\n3. **Verificacion:** Abre una terminal o linea de comandos y ejecuta los siguientes comandos para verificar la instalacion:\n\n   ```bash\n   node -v\r\n   npm -v\n   ```\n\n   Estos comandos deberian mostrar las versiones instaladas de Node.js y NPM.\n\n## 2. INSTALACION DEL COMPILADOR DE TYPESCRIPT (TSC)\n\nEl compilador de Typescript (TSC) es la herramienta que transforma el codigo Typescript (`.ts` files) en codigo Javascript (`.js` files) que puede ser ejecutado por navegadores o Node.js.\n\n**Pasos:**\n\n1. **Instalacion Global:** Para instalar el compilador globalmente, ejecuta el siguiente comando en la terminal:\n\n   ```bash\n   npm install -g typescript\n   ```\n\n   La opcion `-g` instala el paquete globalmente, lo que permite acceder al comando `tsc` desde cualquier directorio en la terminal.\n2. **Instalacion Local (Por Proyecto):** Alternativamente, puedes instalar Typescript localmente en un proyecto:\n\n   ```bash\n   npm install --save-dev typescript\n   ```\n\n   La opcion `--save-dev` guarda Typescript como una dependencia de desarrollo en el archivo `package.json` del proyecto. Para ejecutar el compilador localmente, necesitaras configurar scripts de NPM o utilizar un gestor de tareas como `npx`.\n3. **Verificacion:** Para verificar la instalacion del compilador, ejecuta el siguiente comando:\n\n   ```bash\n   tsc -v\n   ```\n\n   Este comando deberia mostrar la version instalada del compilador de Typescript.\n\n## 3. CONFIGURACION DE UN EDITOR DE CODIGO\n\nUn editor de codigo adecuado es esencial para una experiencia de desarrollo eficiente. Visual Studio Code (VSCode) es una opcion popular debido a su soporte integrado para Typescript y su amplia gama de extensiones.\n\n**Pasos:**\n\n1. **Instalacion de VSCode:** Descarga e instala [Visual Studio Code](https://code.visualstudio.com/) desde su sitio web oficial.\n2. **Extensiones Recomendadas:**\n   * **Typescript Language Basics:** VSCode incluye soporte basico para Typescript, pero puedes mejorar la experiencia instalando la extension \"Typescript Language Basics\" de Microsoft.\n   * **ESLint:** Para el linting de codigo, instala la extension \"ESLint\" y configurala para trabajar con Typescript.\n   * **Prettier:** Para el formateo automatico de codigo, instala la extension \"Prettier - Code formatter\".\n3. **Configuracion de VSCode:**\n   * Abre la paleta de comandos de VSCode (Ctrl+Shift+P o Cmd+Shift+P) y busca \"Settings\".\n   * Abre la configuracion JSON (Settings (JSON)) y añade las siguientes configuraciones para habilitar el formateo automatico y el linting al guardar:\n\n     ```json\n     {\r\n         \"editor.formatOnSave\": true,\r\n         \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\r\n         \"eslint.validate\": [\r\n             \"javascript\",\r\n             \"javascriptreact\",\r\n             \"typescript\",\r\n             \"typescriptreact\"\r\n         ]\r\n     }\n     ```\n\n## 4. INICIALIZACION DE UN PROYECTO TYPESCRIPT\n\nUn archivo `tsconfig.json` es necesario para configurar las opciones de compilacion del proyecto Typescript. Este archivo define como el compilador debe transformar el codigo Typescript en Javascript.\n\n**Pasos:**\n\n1. **Creacion del Archivo:** Crea un nuevo archivo llamado `tsconfig.json` en la raiz del proyecto.\n2. **Configuracion Basica:** Añade la siguiente configuracion basica al archivo `tsconfig.json`:\n\n   ```json\n   {\r\n       \"compilerOptions\": {\r\n           \"target\": \"es5\",\r\n           \"module\": \"commonjs\",\r\n           \"strict\": true,\r\n           \"esModuleInterop\": true,\r\n           \"skipLibCheck\": true,\r\n           \"forceConsistentCasingInFileNames\": true\r\n       }\r\n   }\n   ```\n\n   * `target`: Especifica la version de Javascript a la que se compilara el codigo (ej. `es5`, `es6`, `esnext`).\n   * `module`: Define el sistema de modulos a utilizar (ej. `commonjs`, `es6`, `umd`).\n   * `strict`: Habilita todas las opciones de verificacion de tipo estrictas.\n   * `esModuleInterop`: Permite la interoperabilidad entre modulos CommonJS y ES.\n   * `skipLibCheck`: Omite la verificacion de tipo de los archivos de definicion (`.d.ts`).\n   * `forceConsistentCasingInFileNames`: Asegura que las referencias a archivos tengan el mismo casing.\n3. **Configuracion Avanzada:** Puedes personalizar aun mas el archivo `tsconfig.json` segun las necesidades de tu proyecto. Algunas opciones adicionales incluyen:\n\n   * `outDir`: Especifica el directorio de salida para los archivos Javascript compilados.\n   * `rootDir`: Define el directorio raiz del codigo fuente Typescript.\n   * `include`: Especifica los patrones de archivo a incluir en la compilacion.\n   * `exclude`: Especifica los patrones de archivo a excluir de la compilacion.\n\n## 5. INSTALACION DE DEPENDENCIAS\n\nUtiliza NPM para instalar las dependencias necesarias del proyecto. Esto incluye tanto las bibliotecas que utilizara tu codigo como las definiciones de tipos para esas bibliotecas.\n\n**Pasos:**\n\n1. **Instalacion de Bibliotecas:** Ejecuta el siguiente comando para instalar una biblioteca (ej. `lodash`):\n\n   ```bash\n   npm install lodash\n   ```\n2. **Instalacion de Definiciones de Tipos:** Para muchas bibliotecas Javascript, necesitaras instalar las definiciones de tipos correspondientes para que Typescript pueda verificar el tipo de codigo. Estas definiciones suelen estar disponibles en el repositorio `@types`. Ejecuta el siguiente comando para instalar las definiciones de tipos para `lodash`:\n\n   ```bash\n   npm install --save-dev @types/lodash\n   ```\n\n   La opcion `--save-dev` guarda las definiciones de tipos como una dependencia de desarrollo.\n\n## 6. CONFIGURACION DE TAREAS DE COMPILACION\n\nPara automatizar el proceso de compilacion, puedes configurar tareas en el editor de codigo o mediante scripts de NPM.\n\n**Opcion 1: Tareas de VSCode:**\n\n1. **Creacion del Archivo `tasks.json`:** Crea un nuevo directorio llamado `.vscode` en la raiz del proyecto y dentro de este directorio crea un archivo llamado `tasks.json`.\n2. **Configuracion de la Tarea:** Añade la siguiente configuracion al archivo `tasks.json` para definir una tarea que ejecuta el compilador de Typescript:\n\n   ```json\n   {\r\n       \"version\": \"2.0.0\",\r\n       \"tasks\": [\r\n           {\r\n               \"label\": \"tsc: build\",\r\n               \"type\": \"typescript\",\r\n               \"tsconfig\": \"tsconfig.json\",\r\n               \"group\": \"build\",\r\n               \"problemMatcher\": \"$tsc\"\r\n           }\r\n       ]\r\n   }\n   ```\n\n   Esta configuracion define una tarea llamada \"tsc: build\" que utiliza el compilador de Typescript y el archivo `tsconfig.json` para compilar el proyecto.\n3. **Ejecucion de la Tarea:** Abre la paleta de comandos de VSCode (Ctrl+Shift+P o Cmd+Shift+P) y busca \"Run Task\". Selecciona la tarea \"tsc: build\" para compilar el proyecto.\n\n**Opcion 2: Scripts de NPM:**\n\n1. **Edicion del Archivo `package.json`:** Abre el archivo `package.json` en la raiz del proyecto y añade un script para ejecutar el compilador de Typescript:\n\n   ```json\n   {\r\n       \"scripts\": {\r\n           \"build\": \"tsc\"\r\n       }\r\n   }\n   ```\n\n   Este script define un comando llamado \"build\" que ejecuta el compilador de Typescript.\n2. **Ejecucion del Script:** Ejecuta el siguiente comando en la terminal para compilar el proyecto:\n\n   ```bash\n   npm run build\n   ```\n\n## 7. DEPURACION\n\nLa depuracion es una parte esencial del desarrollo de software. Typescript ofrece varias opciones para depurar el codigo, incluyendo la depuracion directa en VSCode y la utilizacion de herramientas de depuracion de Node.js.\n\n**Depuracion en VSCode:**\n\n1. **Configuracion de la Depuracion:** Abre la vista de depuracion en VSCode (Ctrl+Shift+D o Cmd+Shift+D) y crea una nueva configuracion de depuracion.\n2. **Configuracion para Node.js:** Para depurar codigo Typescript que se ejecuta en Node.js, utiliza la siguiente configuracion:\n\n   ```json\n   {\r\n       \"version\": \"0.2.0\",\r\n       \"configurations\": [\r\n           {\r\n               \"type\": \"node\",\r\n               \"request\": \"launch\",\r\n               \"name\": \"Launch Program\",\r\n               \"program\": \"${workspaceFolder}/dist/index.js\",\r\n               \"preLaunchTask\": \"tsc: build\",\r\n               \"outFiles\": [\r\n                   \"${workspaceFolder}/dist/**/*.js\"\r\n               ]\r\n           }\r\n       ]\r\n   }\n   ```\n\n   * `program`: Especifica el archivo Javascript de entrada para la aplicacion.\n   * `preLaunchTask`: Define una tarea que se ejecutara antes de iniciar la depuracion (en este caso, la tarea de compilacion de Typescript).\n   * `outFiles`: Especifica los patrones de archivo para los archivos Javascript generados.\n3. **Puntos de Interrupcion:** Añade puntos de interrupcion en el codigo Typescript haciendo clic en el margen izquierdo del editor.\n4. **Inicio de la Depuracion:** Inicia la depuracion presionando F5 o haciendo clic en el boton \"Start Debugging\" en la vista de depuracion.\n\n## FUENTES DEL DOCUMENTO\n\n* [Typescript Official Documentation](https://www.typescriptlang.org/docs/)\n* [Visual Studio Code Documentation](https://code.visualstudio.com/docs)\n* [Node.js Official Website](https://nodejs.org/)\n* [NPM Official Website](https://www.npmjs.com/)\n"
  },
  {
    "slug": "/programming/languages/typescript/typescript-introduction",
    "title": "Introduccion a TypeScript",
    "description": "Introduccion a TypeScript Un superconjunto de JavaScript que añade tipado estático opcional.",
    "content": "TypeScript es un lenguaje de programación de código abierto desarrollado por Microsoft. Se describe como un superconjunto de JavaScript, lo que significa que cualquier código JavaScript válido también es código TypeScript válido. La principal diferencia es que TypeScript añade tipado estático opcional, lo que permite detectar errores en tiempo de compilación en lugar de en tiempo de ejecución. Esto facilita la escritura de código más robusto y mantenible, especialmente en proyectos grandes y complejos.\n\n## OBJETIVOS CLAVE SOBRE EL TEMA\n\n1. **Entender el Propósito de TypeScript:** Comprender por qué se creó TypeScript y qué problemas busca resolver.\n2. **Conocer las Características Principales:** Familiarizarse con las características clave como el tipado estático, las interfaces, las clases y los módulos.\n3. **Configurar un Entorno de Desarrollo:** Aprender a configurar un entorno de desarrollo para escribir y compilar código TypeScript.\n4. **Escribir Código TypeScript Básico:** Ser capaz de escribir programas sencillos en TypeScript y entender cómo el tipado estático ayuda a prevenir errores.\n5. **Comprender la Transpilación:** Entender cómo TypeScript se convierte en JavaScript compatible con los navegadores y Node.js.\n\n## ¿POR QUE TYPESCRIPT?\n\nJavaScript es un lenguaje dinámico y flexible, lo que lo hace ideal para el desarrollo web rápido. Sin embargo, esta flexibilidad puede llevar a errores difíciles de detectar en proyectos grandes. TypeScript aborda este problema añadiendo un sistema de tipos estático.\n\n* **Tipado Estático:** Permite definir los tipos de variables, parámetros de funciones y valores de retorno. El compilador de TypeScript verifica estos tipos durante la compilación y señala cualquier inconsistencia.\n* **Mejor Refactorización:** El tipado estático facilita la refactorización del código, ya que el compilador puede identificar todas las ubicaciones donde un cambio podría causar un error.\n* **Autocompletado y Navegación:** Los IDEs (Entornos de Desarrollo Integrados) pueden usar la información de tipo para proporcionar autocompletado más preciso y facilitar la navegación por el código.\n\n## CARACTERISTICAS PRINCIPALES DE TYPESCRIPT\n\n1. **Tipos Estáticos:**\n\n   * TypeScript permite especificar tipos para variables, parámetros de funciones y valores de retorno.\n\n   ```typescript\n   function saludar(nombre: string): string {\r\n       return \"Hola, \" + nombre;\r\n   }\r\n\r\n   let usuario: string = \"Juan\";\r\n   console.log(saludar(usuario)); // Hola, Juan\n   ```\n\n   En este ejemplo, `nombre` está tipado como `string`, y la función `saludar` también devuelve un `string`. Si intentamos pasar un número a la función, el compilador de TypeScript mostrará un error.\n\n2. **Interfaces:**\n\n   * Las interfaces definen contratos que las clases deben cumplir.\n\n   ```typescript\n   interface Persona {\r\n       nombre: string;\r\n       edad: number;\r\n       saludar(): string;\r\n   }\r\n\r\n   class Empleado implements Persona {\r\n       nombre: string;\r\n       edad: number;\r\n\r\n       constructor(nombre: string, edad: number) {\r\n           this.nombre = nombre;\r\n           this.edad = edad;\r\n       }\r\n\r\n       saludar(): string {\r\n           return \"Hola, soy \" + this.nombre + \" y tengo \" + this.edad + \" años.\";\r\n       }\r\n   }\r\n\r\n   let empleado: Persona = new Empleado(\"Carlos\", 30);\r\n   console.log(empleado.saludar()); // Hola, soy Carlos y tengo 30 años.\n   ```\n\n   Aquí, la interfaz `Persona` define que cualquier objeto que la implemente debe tener las propiedades `nombre` y `edad`, y un método `saludar`.\n\n3. **Clases:**\n\n   * TypeScript soporta clases, lo que facilita la programación orientada a objetos.\n\n   ```typescript\n   class Animal {\r\n       nombre: string;\r\n\r\n       constructor(nombre: string) {\r\n           this.nombre = nombre;\r\n       }\r\n\r\n       mover(distanciaEnMetros: number = 0) {\r\n           console.log(`${this.nombre} se movió ${distanciaEnMetros}m.`);\r\n       }\r\n   }\r\n\r\n   class Perro extends Animal {\r\n       ladrar() {\r\n           console.log(\"¡Guau! ¡Guau!\");\r\n       }\r\n   }\r\n\r\n   const perro = new Perro(\"Max\");\r\n   perro.ladrar(); // ¡Guau! ¡Guau!\r\n   perro.mover(10); // Max se movió 10m.\n   ```\n\n   Este ejemplo muestra cómo se pueden definir clases y cómo se puede usar la herencia.\n\n4. **Módulos:**\n\n   * Los módulos permiten organizar el código en archivos separados y reutilizables.\n\n   ```typescript\n   // archivo: moduloSaludar.ts\r\n   export function saludar(nombre: string): string {\r\n       return \"Hola, \" + nombre;\r\n   }\r\n\r\n   // archivo: app.ts\r\n   import { saludar } from './moduloSaludar';\r\n\r\n   let usuario: string = \"Ana\";\r\n   console.log(saludar(usuario)); // Hola, Ana\n   ```\n\n   Aquí, la función `saludar` se exporta desde el módulo `moduloSaludar.ts` y se importa en `app.ts`.\n\n5. **Generics:**\n\n   * Los generics permiten escribir código que puede trabajar con diferentes tipos sin perder la seguridad de tipos.\n\n   ```typescript\n   function identidad<T>(arg: T): T {\r\n       return arg;\r\n   }\r\n\r\n   let miIdentidad: <U>(arg: U) => U = identidad;\r\n\r\n   console.log(miIdentidad<string>(\"Hola\")); // Hola\r\n   console.log(miIdentidad<number>(123)); // 123\n   ```\n\n   En este ejemplo, la función `identidad` utiliza un tipo genérico `T`, lo que permite que funcione con cualquier tipo de dato.\n\n## CONFIGURACION DE UN ENTORNO DE DESARROLLO\n\n1. **Instalar Node.js y npm:**\n\n   * TypeScript requiere Node.js y npm (Node Package Manager) para su instalación y gestión de dependencias. Puedes descargarlos desde [nodejs.org](https://nodejs.org/).\n\n2. **Instalar TypeScript:**\n\n   * Abre una terminal o línea de comandos y ejecuta el siguiente comando para instalar TypeScript globalmente:\n\n   ```bash\n   npm install -g typescript\n   ```\n\n3. **Crear un Proyecto TypeScript:**\n\n   * Crea una carpeta para tu proyecto y navega a ella en la terminal.\n   * Inicializa un proyecto Node.js:\n\n   ```bash\n   npm init -y\n   ```\n\n4. **Configurar el Compilador de TypeScript:**\n\n   * Crea un archivo `tsconfig.json` en la raíz de tu proyecto para configurar las opciones del compilador de TypeScript.\n\n   ```json\n   {\r\n       \"compilerOptions\": {\r\n           \"target\": \"es5\",\r\n           \"module\": \"commonjs\",\r\n           \"strict\": true,\r\n           \"esModuleInterop\": true,\r\n           \"outDir\": \"dist\"\r\n       },\r\n       \"include\": [\r\n           \"src/**/*\"\r\n       ]\r\n   }\n   ```\n\n   * `target`: Especifica la versión de JavaScript a la que se transpilara el código (ej: `es5`, `es6`, `esnext`).\n   * `module`: Especifica el sistema de módulos a utilizar (ej: `commonjs`, `es6`).\n   * `strict`: Habilita todas las comprobaciones de tipo estrictas.\n   * `esModuleInterop`: Permite la interoperabilidad entre módulos CommonJS y ES.\n   * `outDir`: Especifica el directorio de salida para los archivos JavaScript transpilados.\n   * `include`: Especifica los archivos TypeScript que se incluirán en la compilación.\n\n5. **Escribir y Compilar Código TypeScript:**\n\n   * Crea una carpeta `src` y añade un archivo TypeScript (ej: `src/index.ts`).\n   * Escribe tu código TypeScript.\n   * Compila el código TypeScript ejecutando el siguiente comando en la terminal:\n\n   ```bash\n   tsc\n   ```\n\n   Esto generará los archivos JavaScript correspondientes en el directorio `dist`.\n\n## TRANSPILACION\n\nTypeScript no es directamente ejecutable por los navegadores web o Node.js. En su lugar, el código TypeScript se *transpila* a JavaScript. La transpilación es el proceso de convertir el código TypeScript en código JavaScript compatible con el entorno de destino.\n\nEl compilador de TypeScript (`tsc`) se encarga de este proceso. Lee los archivos TypeScript, realiza comprobaciones de tipo y genera archivos JavaScript equivalentes.\n\n```typescript\n// src/index.ts\r\nfunction saludar(nombre: string): string {\r\n    return \"Hola, \" + nombre;\r\n}\r\n\r\nlet usuario: string = \"Juan\";\r\nconsole.log(saludar(usuario));\n```\n\nDespués de ejecutar `tsc`, se generará el siguiente archivo JavaScript en el directorio `dist`:\n\n```javascript\n// dist/index.js\r\nfunction saludar(nombre) {\r\n    return \"Hola, \" + nombre;\r\n}\r\nvar usuario = \"Juan\";\r\nconsole.log(saludar(usuario));\n```\n\nEste código JavaScript puede ser ejecutado en cualquier navegador o en Node.js.\n\n## HISTORIA SOBRE EL TEMA, QUIEN LO DESARROLLO\n\nTypeScript fue creado por Anders Hejlsberg en Microsoft. Hejlsberg es también conocido por ser el arquitecto principal de C# y Turbo Pascal. El desarrollo de TypeScript comenzó en 2010, y la primera versión pública (0.8) fue lanzada en octubre de 2012.\n\nLa motivación detrás de TypeScript era proporcionar una forma de escribir código JavaScript más escalable y mantenible, especialmente para proyectos grandes. Microsoft tenía la necesidad de un lenguaje que pudiera manejar la complejidad de sus aplicaciones web internas, y JavaScript, aunque flexible, carecía de las características necesarias para un desarrollo a gran escala.\n\nDesde su lanzamiento, TypeScript ha ganado una gran popularidad en la comunidad de desarrollo web. Ha sido adoptado por muchos proyectos de código abierto y empresas, y es el lenguaje preferido para el desarrollo de aplicaciones Angular.\n\n## INFORMACION RELEVANTE SOBRE EL TEMA EN CUESTION\n\n* **Compatibilidad con JavaScript:** TypeScript es compatible con JavaScript, lo que significa que puedes usar código JavaScript existente en proyectos TypeScript y viceversa.\n* **Comunidad Activa:** TypeScript tiene una comunidad activa y un ecosistema de herramientas y bibliotecas en constante crecimiento.\n* **Adopción en la Industria:** TypeScript es ampliamente utilizado en la industria del desarrollo web, especialmente en proyectos que requieren escalabilidad y mantenibilidad.\n* **Integración con IDEs:** TypeScript tiene una excelente integración con IDEs populares como Visual Studio Code, lo que facilita la escritura y depuración de código.\n\n## FUENTES DEL DOCUMENTO\n\n* [TypeScript Official Website](https://www.typescriptlang.org/)\n* [TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/intro.html)\n* [Node.js Official Website](https://nodejs.org/)\n"
  },
  {
    "slug": "/programming/languages/typescript/typescript-introduction/what-is-typescript",
    "title": "¿Qué es typescript?",
    "description": "TypeScript es un superconjunto de JavaScript que añade tipado estático opcional.",
    "content": "TypeScript es un lenguaje de programación de código abierto desarrollado por Microsoft. Se define como un superconjunto de JavaScript, lo que significa que cualquier código JavaScript válido también es código TypeScript válido. La principal diferencia es que TypeScript añade tipado estático opcional al lenguaje, lo que permite detectar errores en tiempo de compilación en lugar de en tiempo de ejecución.\n\n## OBJETIVOS CLAVE\n\n* **Tipado Estático:** Permite definir tipos de datos para las variables, parámetros de funciones y valores de retorno. Esto ayuda a prevenir errores comunes que ocurren en JavaScript debido a su naturaleza de tipado dinámico.\n* **Compatibilidad con JavaScript:** TypeScript se compila a JavaScript, lo que significa que puede ejecutarse en cualquier entorno que soporte JavaScript, como navegadores web, Node.js, y otros.\n* **Características Avanzadas:** Introduce características como clases, interfaces, módulos y genéricos, que facilitan la creación de código más estructurado y mantenible.\n* **Herramientas de Desarrollo:** Ofrece herramientas de desarrollo mejoradas, como autocompletado, refactorización y detección de errores en tiempo real en editores de código como Visual Studio Code.\n\n## TIPADO ESTATICO\n\nEl tipado estático es una de las características más importantes de TypeScript. Permite especificar el tipo de dato que una variable debe contener.\n\n**Ejemplo:**\n\n```typescript\nlet nombre: string = \"Juan\";\r\nlet edad: number = 30;\r\nlet esEstudiante: boolean = true;\r\n\r\nfunction saludar(nombre: string): string {\r\n  return `Hola, ${nombre}`;\r\n}\n```\n\nEn este ejemplo, `nombre` es una variable de tipo `string`, `edad` es de tipo `number`, y `esEstudiante` es de tipo `boolean`. La función `saludar` acepta un argumento de tipo `string` y retorna un valor de tipo `string`.\n\n## CLASES E INTERFACES\n\nTypeScript introduce clases e interfaces, que son conceptos fundamentales en la programación orientada a objetos.\n\n**Ejemplo de Clase:**\n\n```typescript\nclass Persona {\r\n  nombre: string;\r\n  edad: number;\r\n\r\n  constructor(nombre: string, edad: number) {\r\n    this.nombre = nombre;\r\n    this.edad = edad;\r\n  }\r\n\r\n  saludar(): void {\r\n    console.log(`Hola, mi nombre es ${this.nombre} y tengo ${this.edad} años.`);\r\n  }\r\n}\r\n\r\nlet persona = new Persona(\"Maria\", 25);\r\npersona.saludar(); // Output: Hola, mi nombre es Maria y tengo 25 años.\n```\n\n**Ejemplo de Interfaz:**\n\n```typescript\ninterface Figura {\r\n  area(): number;\r\n}\r\n\r\nclass Rectangulo implements Figura {\r\n  ancho: number;\r\n  alto: number;\r\n\r\n  constructor(ancho: number, alto: number) {\r\n    this.ancho = ancho;\r\n    this.alto = alto;\r\n  }\r\n\r\n  area(): number {\r\n    return this.ancho * this.alto;\r\n  }\r\n}\r\n\r\nlet rectangulo = new Rectangulo(10, 5);\r\nconsole.log(`El area del rectangulo es: ${rectangulo.area()}`); // Output: El area del rectangulo es: 50\n```\n\n## GENERICS\n\nLos genéricos permiten escribir código que puede trabajar con una variedad de tipos sin perder la seguridad del tipado.\n\n**Ejemplo:**\n\n```typescript\nfunction identidad<T>(arg: T): T {\r\n  return arg;\r\n}\r\n\r\nlet valorString: string = identidad<string>(\"Hola\");\r\nlet valorNumero: number = identidad<number>(123);\r\n\r\nconsole.log(valorString); // Output: Hola\r\nconsole.log(valorNumero); // Output: 123\n```\n\n## MODULOS\n\nLos módulos permiten organizar el código en unidades lógicas y reutilizables.\n\n**Ejemplo:**\n\n```typescript\n// modulo.ts\r\nexport function saludar(nombre: string): string {\r\n  return `Hola, ${nombre}`;\r\n}\r\n\r\n// app.ts\r\nimport { saludar } from './modulo';\r\n\r\nconsole.log(saludar(\"Carlos\")); // Output: Hola, Carlos\n```\n\n## COMPILACION\n\nTypeScript necesita ser compilado a JavaScript para poder ejecutarse en un navegador o en Node.js. El compilador de TypeScript (`tsc`) se encarga de esta tarea.\n\n**Ejemplo de Compilación:**\n\n1. Crear un archivo `tsconfig.json` para configurar las opciones del compilador.\n\n   ```json\n   {\r\n     \"compilerOptions\": {\r\n       \"target\": \"es5\",\r\n       \"module\": \"commonjs\",\r\n       \"outDir\": \"./dist\",\r\n       \"strict\": true\r\n     },\r\n     \"include\": [\r\n       \"./src/**/*\"\r\n     ]\r\n   }\n   ```\n2. Ejecutar el comando `tsc` en la terminal para compilar los archivos TypeScript.\n\n   ```bash\n   tsc\n   ```\n\n   Esto generará los archivos JavaScript correspondientes en el directorio `dist`.\n\n## FUENTES DEL DOCUMENTO\n\n* [TypeScript Official Documentation](https://www.typescriptlang.org/docs/)\n* [Microsoft TypeScript](https://github.com/microsoft/typescript)\n* [TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/intro.html)\n"
  },
  {
    "slug": "/programming/web/css",
    "title": "CSS",
    "description": "desc",
    "content": ""
  },
  {
    "slug": "/programming/web/html/basic-structure-of-an-html-document/body-tag",
    "title": "La etiqueta <body>",
    "description": "Documentación detallada sobre la etiqueta <body> en HTML, su propósito, atributos y mejores prácticas.",
    "content": "La etiqueta `<body>` en HTML es un elemento fundamental que define el cuerpo del documento HTML. Contiene todo el contenido visible de una página web, como texto, imágenes, enlaces, tablas y otros elementos multimedia. Esencialmente, todo lo que se muestra en el navegador está contenido dentro de la etiqueta `<body>`.\n\n## OBJETIVOS CLAVE SOBRE LA ETIQUETA `<BODY>`\n\n* **Contenedor Principal:** Actúa como el principal contenedor para todo el contenido visible de la página.\n* **Estructura:** Define la estructura básica del contenido de la página.\n* **Presentación:** Influye en la presentación visual del contenido a través de atributos y estilos CSS.\n* **Accesibilidad:** Permite la organización lógica del contenido para mejorar la accesibilidad.\n\n## DESARROLLO DE LA ETIQUETA `<BODY>`\n\n### ESTRUCTURA BASICA\n\nLa etiqueta `<body>` se utiliza dentro de la etiqueta `<html>` después de la etiqueta `<head>`. La estructura básica de un documento HTML con la etiqueta `<body>` es la siguiente:\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Título de la página</title>\r\n</head>\r\n<body>\r\n    <!-- Aquí va todo el contenido visible de la página -->\r\n    <h1>Encabezado principal</h1>\r\n    <p>Este es un párrafo de texto.</p>\r\n</body>\r\n</html>\n```\n\n### ATRIBUTOS DE LA ETIQUETA `<BODY>`\n\nAunque la etiqueta `<body>` soporta atributos, muchos de los atributos de presentación que solían ser comunes en HTML 4 (como `bgcolor`, `text`, `link`, `vlink`, `alink`) están obsoletos en HTML5. Se recomienda utilizar CSS para controlar la presentación visual de la página.\n\n#### ATRIBUTOS COMUNES\n\n* **`onload`:** Especifica un script para ser ejecutado cuando la página ha terminado de cargar.\n* **`onunload`:** Especifica un script para ser ejecutado cuando el usuario abandona la página.\n* **`onbeforeunload`:** Especifica un script para ser ejecutado antes de que la página se descargue.\n\n#### EJEMPLOS DE USO DE ATRIBUTOS\n\n```html\n<body onload=\"alert('La página ha cargado completamente.')\">\r\n    <h1>Bienvenido a mi página</h1>\r\n    <p>Este es el contenido de la página.</p>\r\n</body>\n```\n\nEn este ejemplo, se muestra una alerta cuando la página termina de cargar.\n\n### MEJORES PRACTICAS\n\n1. **Usar CSS para la Presentación:** Evitar el uso de atributos de presentación obsoletos y utilizar CSS para controlar el estilo y la apariencia del contenido.\n2. **Estructura Semántica:** Organizar el contenido de manera lógica utilizando elementos semánticos como `<header>`, `<nav>`, `<article>`, `<aside>`, y `<footer>` dentro del `<body>`.\n3. **Accesibilidad:** Asegurarse de que el contenido sea accesible para todos los usuarios, incluyendo aquellos con discapacidades, utilizando atributos ARIA y siguiendo las pautas de accesibilidad web (WCAG).\n4. **Optimización:** Optimizar el contenido para mejorar el rendimiento de la página, como comprimir imágenes y minimizar el uso de scripts pesados.\n\n### EJEMPLOS DE IMPLEMENTACION\n\n#### EJEMPLO 1: ESTRUCTURA BASICA CON ELEMENTOS SEMANTICOS\n\n```html\n<body>\r\n    <header>\r\n        <h1>Título del Sitio</h1>\r\n        <nav>\r\n            <ul>\r\n                <li><a href=\"#\">Inicio</a></li>\r\n                <li><a href=\"#\">Acerca de</a></li>\r\n                <li><a href=\"#\">Servicios</a></li>\r\n                <li><a href=\"#\">Contacto</a></li>\r\n            </ul>\r\n        </nav>\r\n    </header>\r\n    <main>\r\n        <article>\r\n            <h2>Título del Artículo</h2>\r\n            <p>Contenido del artículo...</p>\r\n        </article>\r\n        <aside>\r\n            <h3>Información Adicional</h3>\r\n            <p>Información relacionada...</p>\r\n        </aside>\r\n    </main>\r\n    <footer>\r\n        <p>© 2023 Mi Sitio Web</p>\r\n    </footer>\r\n</body>\n```\n\n#### EJEMPLO 2: USO DE CSS PARA ESTILOS\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Ejemplo con CSS</title>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            background-color: #f0f0f0;\r\n            margin: 0;\r\n            padding: 0;\r\n        }\r\n        header {\r\n            background-color: #333;\r\n            color: white;\r\n            padding: 1em;\r\n            text-align: center;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <header>\r\n        <h1>Bienvenido</h1>\r\n    </header>\r\n    <main>\r\n        <p>Este es el contenido principal de la página.</p>\r\n    </main>\r\n</body>\r\n</html>\n```\n\nEn este ejemplo, se utiliza CSS para definir la fuente, el color de fondo y otros estilos visuales del `<body>` y sus elementos hijos.\n\n### CONCLUSION\n\nLa etiqueta `<body>` es un componente esencial de cualquier documento HTML. Su correcta utilización, combinada con CSS para la presentación y elementos semánticos para la estructura, asegura que el contenido de la página sea accesible, bien organizado y visualmente atractivo.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<body>](https://developer.mozilla.org/es/docs/Web/HTML/Element/body)\n* [W3Schools: HTML body Tag](https://www.w3schools.com/tags/tag_body.asp)\n* [HTML5 Specification](https://html.spec.whatwg.org/multipage/semantics.html#the-body-element)\n"
  },
  {
    "slug": "/programming/web/html/basic-structure-of-an-html-document/doctype-html-tag",
    "title": "LA ETIQUETA <!DOCTYPE html>",
    "description": "Explicación detallada de la etiqueta <!DOCTYPE html>, su propósito, historia y uso correcto en el desarrollo web moderno.",
    "content": "La etiqueta `<!DOCTYPE html>` es una declaración que se coloca al principio de un documento HTML para indicar al navegador la versión de HTML que se está utilizando para renderizar la página. Aunque no es una etiqueta HTML en sí misma, sino una instrucción para el navegador, es esencial para asegurar que la página se interprete correctamente y se muestre de manera consistente en diferentes navegadores.\n\n## OBJETIVOS CLAVE\n\n1. **Indicar la versión de HTML:** Informar al navegador sobre la versión de HTML utilizada en el documento.\n2. **Activar el modo estándar:** Forzar al navegador a utilizar el modo de renderizado estándar, evitando el modo quirks.\n3. **Asegurar la compatibilidad:** Mejorar la compatibilidad y consistencia en la visualización de la página en diferentes navegadores.\n\n## HISTORIA Y EVOLUCION\n\nEn las primeras versiones de HTML, la declaración `<!DOCTYPE>` era mucho más larga y compleja, ya que incluía una referencia a una Definición de Tipo de Documento (DTD). Esta DTD especificaba las reglas y la estructura del HTML, y el navegador la utilizaba para validar el documento.\n\nCon la llegada de HTML5, la declaración `<!DOCTYPE>` se simplificó enormemente a `<!DOCTYPE html>`. Esta versión simplificada indica al navegador que el documento sigue las reglas de HTML5 y debe ser renderizado en modo estándar.\n\n## IMPORTANCIA DEL MODO ESTANDAR\n\nEl modo estándar es un modo de renderizado en el que el navegador interpreta el HTML, CSS y JavaScript de acuerdo con las especificaciones web modernas. Esto asegura que la página se vea de manera consistente en diferentes navegadores y dispositivos.\n\nSin una declaración `<!DOCTYPE>` o con una declaración incorrecta, el navegador puede entrar en el modo quirks. En este modo, el navegador intenta imitar el comportamiento de versiones antiguas de navegadores, lo que puede llevar a inconsistencias y errores en la visualización de la página.\n\n## USO CORRECTO DE !DOCTYPE html\n\nLa declaración `<!DOCTYPE html>` debe ser la primera línea en cualquier documento HTML5. No es sensible a mayúsculas y minúsculas, pero por convención se escribe en mayúsculas para distinguirla de las etiquetas HTML.\n\n**Ejemplo:**\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Mi Página Web</title>\r\n</head>\r\n<body>\r\n    <h1>Hola, Mundo!</h1>\r\n    <p>Este es un ejemplo de una página HTML5.</p>\r\n</body>\r\n</html>\n```\n\n## DETALLES TECNICOS\n\n* **Sintaxis:** La sintaxis de la declaración `<!DOCTYPE html>` es simple y directa. No requiere atributos ni referencias a DTDs.\n* **Posición:** Debe colocarse al principio del documento, antes de la etiqueta `<html>`.\n* **Impacto en el navegador:** Indica al navegador que utilice el modo de renderizado estándar.\n* **Compatibilidad:** Asegura que la página se vea de manera consistente en diferentes navegadores modernos.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n**Ejemplo 1: Estructura básica de un documento HTML5**\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n</head>\r\n<body>\r\n    <h1>Hello World</h1>\r\n</body>\r\n</html>\n```\n\n**Ejemplo 2: Uso de !DOCTYPE html en un documento con CSS y JavaScript**\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Página con CSS y JavaScript</title>\r\n    <link rel=\"stylesheet\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div id=\"container\">\r\n        <h1>Bienvenido</h1>\r\n        <p>Esta página utiliza CSS para el estilo y JavaScript para la interactividad.</p>\r\n        <button id=\"miBoton\">Haz clic aquí</button>\r\n    </div>\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\n```\n\n**Ejemplo 3: Uso de !DOCTYPE html en un documento con etiquetas semánticas**\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"fr\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Página Semántica</title>\r\n</head>\r\n<body>\r\n    <header>\r\n        <h1>Mi Blog</h1>\r\n        <nav>\r\n            <ul>\r\n                <li><a href=\"#\">Inicio</a></li>\r\n                <li><a href=\"#\">Artículos</a></li>\r\n                <li><a href=\"#\">Acerca de</a></li>\r\n            </ul>\r\n        </nav>\r\n    </header>\r\n    <main>\r\n        <article>\r\n            <h2>Título del Artículo</h2>\r\n            <p>Contenido del artículo...</p>\r\n        </article>\r\n    </main>\r\n    <footer>\r\n        <p>© 2024 Mi Blog</p>\r\n    </footer>\r\n</body>\r\n</html>\n```\n\n## CONSEJOS Y BUENAS PRACTICAS\n\n* **Siempre incluir:** No omitir la declaración `<!DOCTYPE html>` en ningún documento HTML5.\n* **Colocar al principio:** Asegurarse de que sea la primera línea del documento.\n* **Validar el HTML:** Utilizar herramientas de validación HTML para asegurar que el documento cumple con los estándares.\n\n## CONCLUSION\n\nLa etiqueta `<!DOCTYPE html>` es una parte fundamental de cualquier documento HTML5. Aunque es simple, su presencia asegura que el navegador interprete el documento correctamente y lo renderice en modo estándar, lo que mejora la compatibilidad y la consistencia en la visualización de la página. No incluirla puede llevar a problemas de renderizado y comportamiento inesperado en diferentes navegadores.\n\n## FUENTES DEL DOCUMENTO\n\n* [W3C - The DOCTYPE](https://www.w3.org/QA/Tips/Doctype)\n* [Mozilla Developer Network (MDN) - !DOCTYPE](https://developer.mozilla.org/en-US/docs/Glossary/Doctype)\n* [HTML5 Doctor - The HTML5 DOCTYPE](http://html5doctor.com/html5-doctype/)\n"
  },
  {
    "slug": "/programming/web/html/basic-structure-of-an-html-document/head-tag",
    "title": "LA ETIQUETA <HEAD>",
    "description": "Exploración detallada de la etiqueta <head> en HTML, su importancia y los elementos que contiene.",
    "content": "La etiqueta `<head>` en HTML es un contenedor para metadatos (datos sobre datos) y enlaces a recursos externos. No es visible directamente en el contenido de la página web, pero es crucial para la configuración y el comportamiento del documento.  Actúa como la sección de \"configuración\" de tu página web, donde defines el título, enlaces a hojas de estilo, scripts, metadatos y otras instrucciones importantes para el navegador y los motores de búsqueda.\n\n## OBJETIVOS CLAVE SOBRE LA ETIQUETA `<HEAD>`\n\n* **Definir el título de la página:**  El título que se muestra en la pestaña del navegador y en los resultados de búsqueda.\n* **Incluir metadatos:**  Proporcionar información sobre la página, como la descripción, palabras clave, autor, etc.\n* **Enlazar hojas de estilo:**  Conectar archivos CSS para dar estilo a la página.\n* **Incluir scripts:**  Añadir archivos JavaScript para añadir interactividad y funcionalidad.\n* **Definir la codificación de caracteres:**  Especificar el conjunto de caracteres utilizado en la página (generalmente UTF-8).\n* **Configurar la ventana gráfica (viewport):**  Controlar cómo se muestra la página en diferentes dispositivos.\n\n## DESARROLLO DE LA ETIQUETA `<HEAD>`\n\nLa etiqueta `<head>` se coloca siempre al principio del documento HTML, justo después de la etiqueta `<html>` de apertura. Dentro de la etiqueta `<head>`, se pueden incluir varios elementos, cada uno con una función específica.\n\n### ELEMENTOS COMUNES DENTRO DE LA ETIQUETA `<HEAD>`\n\n1. **`<title>`:** Define el título de la página que se muestra en la pestaña del navegador, en la barra de título de la ventana y en los resultados de búsqueda. Es un elemento obligatorio.\n\n   ```html\n   <head>\r\n     <title>Mi Página Web</title>\r\n   </head>\n   ```\n\n2. **`<meta>`:** Proporciona metadatos sobre el documento HTML, como la descripción, palabras clave, autor, codificación de caracteres, etc.  Se utiliza para proporcionar información que no se puede incluir en otros elementos HTML.\n\n   * **`charset`:**  Especifica la codificación de caracteres del documento.  UTF-8 es la codificación recomendada para la mayoría de los idiomas.\n\n     ```html\n     <meta charset=\"UTF-8\">\n     ```\n\n   * **`name=\"description\"`:**  Proporciona una breve descripción de la página.  Esta descripción se utiliza a menudo en los resultados de búsqueda.\n\n     ```html\n     <meta name=\"description\" content=\"Descripción de mi página web.\">\n     ```\n\n   * **`name=\"keywords\"`:**  Define palabras clave relevantes para la página.  Aunque su importancia ha disminuido, todavía pueden ser útiles para algunos motores de búsqueda.\n\n     ```html\n     <meta name=\"keywords\" content=\"palabras clave, ejemplo, html\">\n     ```\n\n   * **`name=\"author\"`:**  Especifica el autor de la página.\n\n     ```html\n     <meta name=\"author\" content=\"Tu Nombre\">\n     ```\n\n   * **`name=\"viewport\"`:**  Configura la ventana gráfica para controlar cómo se muestra la página en diferentes dispositivos, especialmente en dispositivos móviles.\n\n     ```html\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n     ```\n\n3. **`<link>`:**  Define la relación entre el documento actual y un recurso externo.  Se utiliza comúnmente para enlazar hojas de estilo CSS.\n\n   * **`rel=\"stylesheet\"`:**  Indica que el recurso enlazado es una hoja de estilo.\n   * **`href`:**  Especifica la URL del archivo CSS.\n\n     ```html\n     <link rel=\"stylesheet\" href=\"estilos.css\">\n     ```\n\n4. **`<style>`:**  Permite incluir estilos CSS directamente dentro del documento HTML.  Se recomienda utilizar archivos CSS externos para una mejor organización y mantenimiento.\n\n   ```html\n   <style>\r\n     body {\r\n       background-color: #f0f0f0;\r\n     }\r\n   </style>\n   ```\n\n5. **`<script>`:**  Se utiliza para incluir scripts JavaScript en el documento HTML.  Puede enlazar a archivos JavaScript externos o incluir el código directamente dentro de la etiqueta.\n\n   * **`src`:**  Especifica la URL del archivo JavaScript.\n\n     ```html\n     <script src=\"script.js\"></script>\n     ```\n\n   * También se puede incluir el código JavaScript directamente:\n\n     ```html\n     <script>\r\n       console.log(\"Hola Mundo!\");\r\n     </script>\n     ```\n\n6. **`<base>`:**  Especifica la URL base para todas las URLs relativas en el documento.\n\n   ```html\n   <base href=\"https://www.ejemplo.com/\">\n   ```\n\n7. **Otros elementos:**  También se pueden incluir otros elementos como `<noscript>`, `<rdf>`, `<meta http-equiv>`, etc., dependiendo de las necesidades específicas del proyecto.\n\n### EJEMPLO COMPLETO DE UNA ETIQUETA `<HEAD>`\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <meta name=\"description\" content=\"Ejemplo de la etiqueta head en HTML.\">\r\n  <meta name=\"keywords\" content=\"html, head, metadata, ejemplo\">\r\n  <meta name=\"author\" content=\"Tu Nombre\">\r\n  <title>Ejemplo de Head</title>\r\n  <link rel=\"stylesheet\" href=\"estilos.css\">\r\n  <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\r\n  <script src=\"script.js\"></script>\r\n</head>\r\n<body>\r\n  <h1>Contenido de la página</h1>\r\n</body>\r\n</html>\n```\n\n### IMPORTANCIA DE LA ETIQUETA `<HEAD>`\n\nLa etiqueta `<head>` es fundamental para:\n\n* **SEO (Optimización para Motores de Búsqueda):**  Los metadatos proporcionan información importante a los motores de búsqueda para indexar y clasificar la página correctamente.\n* **Usabilidad:**  El título de la página mejora la experiencia del usuario al identificar fácilmente la página en las pestañas del navegador.\n* **Accesibilidad:**  La configuración de la ventana gráfica y la codificación de caracteres aseguran que la página se muestre correctamente en diferentes dispositivos y navegadores.\n* **Rendimiento:**  La inclusión correcta de hojas de estilo y scripts puede afectar el tiempo de carga y el rendimiento de la página.\n\n### CONSEJOS Y BUENAS PRÁCTICAS\n\n* **Utiliza UTF-8 como codificación de caracteres:**  Asegura la compatibilidad con la mayoría de los idiomas y caracteres especiales.\n* **Proporciona una descripción clara y concisa:**  Ayuda a los usuarios a entender el contenido de la página en los resultados de búsqueda.\n* **Optimiza la ventana gráfica para dispositivos móviles:**  Asegura una experiencia de usuario óptima en dispositivos móviles.\n* **Enlaza hojas de estilo y scripts externos:**  Mejora la organización y el mantenimiento del código.\n* **Considera el orden de los elementos:**  En general, es recomendable colocar las hojas de estilo antes de los scripts para evitar problemas de renderizado.\n\nEn resumen, la etiqueta `<head>` es una parte esencial de cualquier documento HTML.  Aunque no es visible directamente en la página, juega un papel crucial en la configuración, el comportamiento y la optimización de la página web.  Comprender y utilizar correctamente los elementos dentro de la etiqueta `<head>` es fundamental para crear páginas web modernas y accesibles.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: The Document Head element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head)\n* [W3Schools: HTML `<head>` Tag](https://www.w3schools.com/tags/tag_head.asp)\n* [HTML.com: The `<head>` tag](https://html.com/tags/head/)\n"
  },
  {
    "slug": "/programming/web/html/basic-structure-of-an-html-document/head-tag/link-tag",
    "title": "LA ETIQUETA <LINK>",
    "description": "Exploración detallada de la etiqueta <link> en HTML, su uso para enlazar recursos externos como hojas de estilo, favicons y más, y cómo optimizar su implementación para mejorar el rendimiento y la accesibilidad de un sitio web.",
    "content": "La etiqueta `<link>` en HTML es un elemento fundamental que permite a los desarrolladores web conectar sus documentos HTML con recursos externos. Estos recursos pueden incluir hojas de estilo CSS, favicons, fuentes, scripts y otros documentos HTML. La etiqueta `<link>` se coloca dentro de la sección `<head>` del documento HTML y no tiene contenido interno (es una etiqueta vacía). Su principal función es establecer relaciones entre el documento actual y otros recursos, lo que es esencial para la presentación, funcionalidad y optimización de un sitio web.\n\n## OBJETIVOS CLAVE SOBRE LA ETIQUETA `<LINK>`\n\n1. **Enlazar Hojas de Estilo CSS:** La función más común de la etiqueta `<link>` es enlazar hojas de estilo CSS externas. Esto permite separar la presentación del contenido, lo que facilita el mantenimiento y la reutilización del código.\n2. **Definir Favicons:** Los favicons son pequeños iconos que representan un sitio web en las pestañas del navegador, marcadores y otros lugares. La etiqueta `<link>` se utiliza para especificar la ubicación del archivo del favicon.\n3. **Mejorar el SEO:** La etiqueta `<link>` puede utilizarse para especificar relaciones importantes para los motores de búsqueda, como la canonicalización de URLs y la indicación de versiones alternativas de una página para diferentes idiomas o dispositivos.\n4. **Optimizar el Rendimiento:** La forma en que se utilizan las etiquetas `<link>` puede afectar significativamente el rendimiento de un sitio web. Cargar hojas de estilo de manera eficiente y utilizar atributos como `preload` puede mejorar la velocidad de carga y la experiencia del usuario.\n5. **Accesibilidad:** La etiqueta `<link>` también juega un papel en la accesibilidad web. Por ejemplo, se puede utilizar para enlazar hojas de estilo específicas para la impresión o para dispositivos con capacidades limitadas.\n\n### ENLAZAR HOJAS DE ESTILO CSS\n\nLa forma más común de utilizar la etiqueta `<link>` es para enlazar hojas de estilo CSS. Esto se hace especificando el atributo `rel` con el valor \"stylesheet\" y el atributo `href` con la URL de la hoja de estilo.\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Ejemplo de Enlace a Hoja de Estilo</title>\r\n    <link rel=\"stylesheet\" href=\"styles.css\">\r\n</head>\r\n<body>\r\n    <h1>Hola, Mundo!</h1>\r\n    <p>Este es un ejemplo de cómo enlazar una hoja de estilo CSS.</p>\r\n</body>\r\n</html>\n```\n\nEn este ejemplo, la etiqueta `<link>` enlaza el archivo `styles.css` al documento HTML. El navegador cargará y aplicará los estilos definidos en `styles.css` al contenido del documento.\n\n### DEFINIR FAVICONS\n\nPara definir un favicon, se utiliza la etiqueta `<link>` con el atributo `rel` establecido en \"icon\" y el atributo `href` apuntando a la ubicación del archivo del favicon.\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Ejemplo de Favicon</title>\r\n    <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\r\n</head>\r\n<body>\r\n    <h1>Hola, Mundo!</h1>\r\n    <p>Este es un ejemplo de cómo definir un favicon.</p>\r\n</body>\r\n</html>\n```\n\nEn este caso, el navegador mostrará el archivo `favicon.ico` como el icono del sitio web. El atributo `type` especifica el tipo de archivo del favicon, lo que ayuda al navegador a interpretarlo correctamente.\n\n### MEJORAR EL SEO\n\nLa etiqueta `<link>` puede utilizarse para mejorar el SEO de un sitio web mediante la especificación de relaciones importantes para los motores de búsqueda. Por ejemplo, el atributo `rel=\"canonical\"` se utiliza para indicar la URL preferida de una página, lo que ayuda a evitar problemas de contenido duplicado.\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Ejemplo de URL Canónica</title>\r\n    <link rel=\"canonical\" href=\"https://www.ejemplo.com/pagina\">\r\n</head>\r\n<body>\r\n    <h1>Hola, Mundo!</h1>\r\n    <p>Este es un ejemplo de cómo definir una URL canónica.</p>\r\n</body>\r\n</html>\n```\n\nEn este ejemplo, la etiqueta `<link>` indica que la URL `https://www.ejemplo.com/pagina` es la versión preferida de la página, lo que ayuda a los motores de búsqueda a indexarla correctamente.\n\n### OPTIMIZAR EL RENDIMIENTO\n\nPara optimizar el rendimiento, se puede utilizar el atributo `preload` en la etiqueta `<link>` para indicar al navegador que debe cargar un recurso lo antes posible. Esto es especialmente útil para hojas de estilo y fuentes que son esenciales para la presentación inicial de la página.\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Ejemplo de Preload</title>\r\n    <link rel=\"preload\" href=\"styles.css\" as=\"style\">\r\n    <link rel=\"stylesheet\" href=\"styles.css\">\r\n</head>\r\n<body>\r\n    <h1>Hola, Mundo!</h1>\r\n    <p>Este es un ejemplo de cómo utilizar preload para mejorar el rendimiento.</p>\r\n</body>\r\n</html>\n```\n\nEn este ejemplo, el atributo `preload` indica al navegador que debe cargar el archivo `styles.css` lo antes posible. El atributo `as=\"style\"` especifica que el recurso es una hoja de estilo.\n\n### ACCESIBILIDAD\n\nLa etiqueta `<link>` también puede utilizarse para mejorar la accesibilidad de un sitio web. Por ejemplo, se puede utilizar para enlazar hojas de estilo específicas para la impresión.\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Ejemplo de Estilos de Impresión</title>\r\n    <link rel=\"stylesheet\" href=\"print.css\" media=\"print\">\r\n</head>\r\n<body>\r\n    <h1>Hola, Mundo!</h1>\r\n    <p>Este es un ejemplo de cómo definir estilos de impresión.</p>\r\n</body>\r\n</html>\n```\n\nEn este ejemplo, la etiqueta `<link>` enlaza el archivo `print.css` al documento HTML. El atributo `media=\"print\"` especifica que esta hoja de estilo solo se aplicará cuando se imprima la página.\n\n## ATRIBUTOS IMPORTANTES DE LA ETIQUETA `<LINK>`\n\n* **`rel`**: Especifica la relación entre el documento actual y el recurso enlazado. Los valores comunes incluyen \"stylesheet\", \"icon\", \"canonical\", \"preload\", entre otros.\n* **`href`**: Especifica la URL del recurso enlazado.\n* **`type`**: Especifica el tipo de archivo del recurso enlazado.\n* **`media`**: Especifica para qué tipo de medio se aplica el recurso enlazado.\n* **`sizes`**: Especifica el tamaño del icono para favicons.\n* **`crossorigin`**: Especifica cómo se deben manejar las solicitudes CORS para el recurso enlazado.\n* **`integrity`**: Permite a los navegadores verificar que los archivos que obtienen no han sido manipulados.\n\n## CONCLUSION\n\nLa etiqueta `<link>` es una herramienta poderosa y versátil que permite a los desarrolladores web conectar sus documentos HTML con una variedad de recursos externos. Su uso adecuado es esencial para la presentación, funcionalidad, optimización y accesibilidad de un sitio web. Al comprender y utilizar correctamente los atributos de la etiqueta `<link>`, los desarrolladores pueden mejorar significativamente la experiencia del usuario y el rendimiento de sus sitios web.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<link>: The External Link Element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link)\n* [W3Schools: HTML \\<link> Tag](https://www.w3schools.com/tags/tag_link.asp)\n* [HTML Standard: The link element](https://html.spec.whatwg.org/multipage/semantics.html#the-link-element)\n"
  },
  {
    "slug": "/programming/web/html/basic-structure-of-an-html-document/head-tag/meta-tag",
    "title": "LA ETIQUETA <META>",
    "description": "Exploración detallada de la etiqueta <meta> en HTML, su sintaxis, atributos y cómo optimiza el SEO y la experiencia del usuario en la web.",
    "content": "La etiqueta `<meta>` en HTML es un elemento fundamental que proporciona metadatos sobre un documento HTML. Estos metadatos son utilizados por los navegadores, motores de búsqueda y otros servicios web para entender y procesar el contenido de la página. Aunque la etiqueta `<meta>` no muestra contenido directamente en la página, juega un papel crucial en la optimización del SEO, la accesibilidad y la experiencia del usuario.\n\n## OBJETIVOS CLAVE SOBRE LA ETIQUETA `<META>`\n\n1. **SEO (Optimización para Motores de Búsqueda):** Mejorar el ranking de una página web en los resultados de búsqueda.\n2. **Compatibilidad y Accesibilidad:** Asegurar que la página se visualice correctamente en diferentes dispositivos y navegadores, y que sea accesible para todos los usuarios.\n3. **Control del Navegador:** Indicar al navegador cómo debe interpretar y mostrar el contenido de la página.\n4. **Estándares Web:** Cumplir con los estándares web para garantizar la interoperabilidad y la validez del código HTML.\n\n## DESARROLLO DE LA ETIQUETA `<META>`\n\nLa etiqueta `<meta>` se utiliza dentro de la sección `<head>` de un documento HTML. No tiene una etiqueta de cierre y se define mediante atributos que especifican el tipo de metadato que se está proporcionando.\n\n### ATRIBUTOS PRINCIPALES\n\n1. **`charset`:**\n\n   * Define la codificación de caracteres para el documento HTML.\n   * El valor más común es `UTF-8`, que incluye caracteres de casi todos los idiomas.\n   * **Ejemplo:**\n\n     ```html\n     <meta charset=\"UTF-8\">\n     ```\n2. **`name`:**\n\n   * Especifica el nombre del metadato.\n   * Se utiliza junto con el atributo `content` para proporcionar información específica.\n   * **Ejemplo:**\n\n     ```html\n     <meta name=\"description\" content=\"Descripción de la página\">\n     ```\n3. **`content`:**\n\n   * Define el valor asociado con el atributo `name` o `http-equiv`.\n   * Contiene la información que se quiere proporcionar.\n   * **Ejemplo:**\n\n     ```html\n     <meta name=\"keywords\" content=\"HTML, meta tags, SEO\">\n     ```\n4. **`http-equiv`:**\n\n   * Simula una cabecera HTTP.\n   * Puede ser utilizado para controlar el comportamiento del navegador.\n   * **Ejemplo:**\n\n     ```html\n     <meta http-equiv=\"refresh\" content=\"30\">\n     ```\n\n### TIPOS COMUNES DE METADATOS\n\n1. **Descripción (`description`):**\n\n   * Proporciona una breve descripción del contenido de la página.\n   * Utilizada por los motores de búsqueda para mostrar un resumen en los resultados de búsqueda.\n   * **Ejemplo:**\n\n     ```html\n     <meta name=\"description\" content=\"Aprende sobre la etiqueta meta en HTML y cómo optimizar tu sitio web para SEO.\">\n     ```\n2. **Palabras Clave (`keywords`):**\n\n   * Lista de palabras clave relevantes para el contenido de la página.\n   * Aunque su importancia ha disminuido, sigue siendo útil para algunos motores de búsqueda.\n   * **Ejemplo:**\n\n     ```html\n     <meta name=\"keywords\" content=\"HTML, meta tags, SEO, optimización web\">\n     ```\n3. **Autor (`author`):**\n\n   * Especifica el autor de la página.\n   * **Ejemplo:**\n\n     ```html\n     <meta name=\"author\" content=\"John Doe\">\n     ```\n4. **Viewport:**\n\n   * Controla cómo se escala la página en diferentes dispositivos, especialmente en dispositivos móviles.\n   * Esencial para el diseño responsivo.\n   * **Ejemplo:**\n\n     ```html\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n     ```\n\n     * `width=device-width`: Establece el ancho de la página al ancho del dispositivo.\n     * `initial-scale=1.0`: Establece el nivel de zoom inicial cuando la página se carga por primera vez.\n5. **Robots:**\n\n   * Indica a los robots de los motores de búsqueda cómo deben indexar y seguir la página.\n   * **Ejemplo:**\n\n     ```html\n     <meta name=\"robots\" content=\"index, follow\">\n     ```\n\n     * `index`: Permite que la página sea indexada.\n     * `follow`: Permite que los enlaces en la página sean seguidos.\n     * Otros valores incluyen `noindex`, `nofollow`, `noarchive`, etc.\n6. **Refresh:**\n\n   * Redirige la página a una nueva URL después de un cierto período de tiempo.\n   * **Ejemplo:**\n\n     ```html\n     <meta http-equiv=\"refresh\" content=\"5;url=https://www.ejemplo.com\">\n     ```\n\n     * Redirige a `https://www.ejemplo.com` después de 5 segundos.\n7. **Content Security Policy (CSP):**\n\n   * Define una política de seguridad para controlar los recursos que el navegador puede cargar.\n   * Ayuda a prevenir ataques XSS (Cross-Site Scripting).\n   * **Ejemplo:**\n\n     ```html\n     <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'\">\n     ```\n\n### EJEMPLOS DE IMPLEMENTACIÓN\n\n1. **Configuración Básica:**\n\n   ```html\n   <!DOCTYPE html>\r\n   <html lang=\"es\">\r\n   <head>\r\n       <meta charset=\"UTF-8\">\r\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n       <meta name=\"description\" content=\"Página de ejemplo sobre la etiqueta meta en HTML.\">\r\n       <meta name=\"keywords\" content=\"HTML, meta tags, SEO\">\r\n       <meta name=\"author\" content=\"John Doe\">\r\n       <title>Etiqueta Meta en HTML</title>\r\n   </head>\r\n   <body>\r\n       <h1>Ejemplo de Etiqueta Meta</h1>\r\n       <p>Este es un ejemplo básico de cómo usar la etiqueta meta en HTML.</p>\r\n   </body>\r\n   </html>\n   ```\n2. **Control de Caché:**\n\n   ```html\n   <meta http-equiv=\"cache-control\" content=\"no-cache, no-store, must-revalidate\">\r\n   <meta http-equiv=\"pragma\" content=\"no-cache\">\r\n   <meta http-equiv=\"expires\" content=\"0\">\n   ```\n\n   * Controla cómo el navegador almacena en caché la página.\n   * Útil para contenido dinámico que debe ser actualizado con frecuencia.\n3. **Especificar el Idioma:**\n\n   ```html\n   <meta http-equiv=\"content-language\" content=\"es\">\n   ```\n\n   * Indica el idioma principal del contenido de la página.\n\n## IMPORTANCIA PARA EL SEO\n\nLa etiqueta `<meta>` es crucial para el SEO porque proporciona información valiosa a los motores de búsqueda sobre el contenido y el propósito de la página. Una descripción bien escrita y palabras clave relevantes pueden mejorar el ranking de la página en los resultados de búsqueda.\n\n1. **Descripción Precisa:**\n\n   * Una descripción bien redactada puede aumentar la tasa de clics (CTR) desde los resultados de búsqueda.\n   * Debe ser concisa y relevante para el contenido de la página.\n2. **Palabras Clave Relevantes:**\n\n   * Aunque su impacto directo ha disminuido, sigue siendo útil para algunos motores de búsqueda y para ayudar a los motores de búsqueda a entender el tema de la página.\n   * Deben ser relevantes y específicas para el contenido de la página.\n3. **Viewport para Dispositivos Móviles:**\n\n   * Asegura que la página se vea bien en dispositivos móviles, lo cual es un factor importante para el SEO.\n   * Google favorece los sitios web que son compatibles con dispositivos móviles.\n\n## MEJORES PRÁCTICAS\n\n1. **Utilizar `charset=\"UTF-8\"`:**\n\n   * Asegura la compatibilidad con una amplia gama de caracteres.\n2. **Proporcionar una Descripción Única:**\n\n   * Cada página debe tener una descripción única y relevante.\n3. **Usar Palabras Clave con Moderación:**\n\n   * Evitar el relleno de palabras clave, ya que puede ser penalizado por los motores de búsqueda.\n4. **Configurar el Viewport Correctamente:**\n\n   * Asegurar que la página se vea bien en dispositivos móviles.\n5. **Validar el Código HTML:**\n\n   * Asegurar que el código HTML sea válido para evitar problemas de compatibilidad y accesibilidad.\n\n## CONCLUSION\n\nLa etiqueta `<meta>` es una herramienta poderosa para proporcionar metadatos sobre un documento HTML. Su correcta utilización puede mejorar significativamente el SEO, la accesibilidad y la experiencia del usuario. Al seguir las mejores prácticas y comprender los diferentes atributos y tipos de metadatos, los desarrolladores pueden optimizar sus sitios web para obtener mejores resultados en los motores de búsqueda y proporcionar una experiencia de usuario más agradable.\n\n## FUENTES DEL DOCUMENTO\n\n* [HTML Meta Tags - W3Schools](https://www.w3schools.com/tags/tag_meta.asp)\n* [Meta Tags - MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta)\n* [Use meta tags to control mobile display - Google Developers](https://developers.google.com/search/docs/crawling-indexing/mobile/viewport-meta)\n"
  },
  {
    "slug": "/programming/web/html/basic-structure-of-an-html-document/head-tag/style-tag",
    "title": "LA ETIQUETA <STYLE>",
    "description": "Exploración detallada de la etiqueta <style> en HTML, su uso para la inserción de CSS, atributos, y mejores prácticas.",
    "content": "La etiqueta `<style>` es un elemento fundamental en HTML que permite a los desarrolladores insertar reglas de estilo CSS (Cascading Style Sheets) directamente dentro de un documento HTML. Esta etiqueta es crucial para definir la apariencia visual de los elementos HTML, controlando aspectos como colores, fuentes, márgenes, y más.\n\n## OBJETIVOS CLAVE SOBRE LA ETIQUETA `<STYLE>`\n\n1. **Integración de Estilos:** Facilitar la inclusión de estilos CSS dentro de un documento HTML, ya sea para estilos específicos de una página o para prototipos rápidos.\n2. **Control de la Presentación:** Permitir a los desarrolladores controlar la presentación visual de los elementos HTML, mejorando la experiencia del usuario y la estética del sitio web.\n3. **Flexibilidad en el Diseño:** Ofrecer flexibilidad en el diseño web, permitiendo la modificación de estilos en función de las necesidades específicas de cada página o componente.\n\n## ¿QUE ES LA ETIQUETA `<STYLE>`?\n\nLa etiqueta `<style>` se utiliza para definir estilos CSS que se aplicarán a los elementos HTML en un documento. Puede colocarse dentro de la sección `<head>` del documento, donde se definen los estilos globales para toda la página, o dentro del `<body>` para aplicar estilos a secciones específicas.\n\n## SINTAXIS BASICA\n\nLa sintaxis básica de la etiqueta `<style>` es la siguiente:\n\n```html\n<style>\r\n  /* Reglas de estilo CSS */\r\n  selector {\r\n    propiedad: valor;\r\n  }\r\n</style>\n```\n\nDonde:\n\n* `<style>`: Es la etiqueta que indica el inicio de la sección de estilos.\n* `/* Reglas de estilo CSS */`: Es un comentario que indica dónde se deben escribir las reglas de estilo CSS.\n* `selector`: Es el elemento HTML al que se aplicarán los estilos (por ejemplo, `p`, `h1`, `div`, etc.).\n* `propiedad`: Es la característica del elemento que se va a modificar (por ejemplo, `color`, `font-size`, `margin`, etc.).\n* `valor`: Es el valor que se le asignará a la propiedad (por ejemplo, `red`, `16px`, `10px`, etc.).\n\n## ATRIBUTOS DE LA ETIQUETA `<STYLE>`\n\nLa etiqueta `<style>` admite varios atributos, aunque los más comunes son:\n\n* **`type`**: Especifica el tipo de contenido que se encuentra dentro de la etiqueta. El valor predeterminado y recomendado es `\"text/css\"`.\n\n  ```html\n  <style type=\"text/css\">\r\n    /* Reglas de estilo CSS */\r\n  </style>\n  ```\n\n* **`media`**: Define para qué tipo de medio se aplicarán los estilos. Esto permite adaptar los estilos a diferentes dispositivos, como pantallas, impresoras, etc.\n\n  ```html\n  <style type=\"text/css\" media=\"screen\">\r\n    /* Estilos para pantallas */\r\n  </style>\r\n\r\n  <style type=\"text/css\" media=\"print\">\r\n    /* Estilos para impresión */\r\n  </style>\n  ```\n\n* **`scoped`**: (En desuso en HTML5) Se utilizaba para aplicar estilos solo al elemento padre y sus descendientes. Ya no se recomienda su uso.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: ESTILOS GLOBALES EN EL `<HEAD>`\n\nEn este ejemplo, se definen estilos globales para todos los elementos `<h1>` y `<p>` en la página.\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Ejemplo de Estilos Globales</title>\r\n  <style type=\"text/css\">\r\n    h1 {\r\n      color: blue;\r\n      text-align: center;\r\n    }\r\n    p {\r\n      font-size: 16px;\r\n      line-height: 1.5;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <h1>Este es un título</h1>\r\n  <p>Este es un párrafo con estilos definidos en la etiqueta &lt;style&gt; dentro del &lt;head&gt;.</p>\r\n</body>\r\n</html>\n```\n\n### EJEMPLO 2: ESTILOS ESPECIFICOS EN EL `<BODY>`\n\nEn este ejemplo, se definen estilos específicos para un `<div>` dentro del `<body>`.\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Ejemplo de Estilos Específicos</title>\r\n</head>\r\n<body>\r\n  <div style=\"border: 1px solid black; padding: 10px;\">\r\n    <style type=\"text/css\">\r\n      p {\r\n        color: green;\r\n      }\r\n    </style>\r\n    <p>Este párrafo tiene estilos definidos dentro de un &lt;div&gt; en el &lt;body&gt;.</p>\r\n  </div>\r\n  <p>Este párrafo no se ve afectado por los estilos anteriores.</p>\r\n</body>\r\n</html>\n```\n\n### EJEMPLO 3: USO DEL ATRIBUTO MEDIA\n\nEn este ejemplo, se utilizan diferentes estilos para la pantalla y la impresión.\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Ejemplo del Atributo Media</title>\r\n  <style type=\"text/css\" media=\"screen\">\r\n    body {\r\n      font-family: Arial, sans-serif;\r\n    }\r\n  </style>\r\n  <style type=\"text/css\" media=\"print\">\r\n    body {\r\n      font-size: 12pt;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <h1>Este es un título</h1>\r\n  <p>Este párrafo se mostrará con la fuente Arial en la pantalla y con un tamaño de fuente de 12 puntos al imprimir.</p>\r\n</body>\r\n</html>\n```\n\n## MEJORES PRACTICAS\n\n1. **Ubicación:** Generalmente, es mejor colocar la etiqueta `<style>` dentro de la sección `<head>` del documento para asegurar que los estilos se carguen antes de que se renderice el contenido.\n2. **Organización:** Para proyectos grandes, es recomendable utilizar hojas de estilo externas en lugar de incluir estilos directamente en el HTML. Esto facilita el mantenimiento y la reutilización de los estilos.\n3. **Especificidad:** Evitar el uso excesivo de estilos en línea (atributo `style`) ya que dificulta la gestión y el mantenimiento del código. Es preferible utilizar clases y selectores CSS para aplicar estilos de manera más organizada.\n4. **Media Queries:** Utilizar el atributo `media` para adaptar los estilos a diferentes dispositivos y medios, mejorando la experiencia del usuario en diferentes contextos.\n5. **Validación:** Asegurarse de que el código CSS dentro de la etiqueta `<style>` sea válido para evitar problemas de renderizado y compatibilidad.\n\n## ALTERNATIVAS A LA ETIQUETA `<STYLE>`\n\nAunque la etiqueta `<style>` es útil para insertar estilos CSS en un documento HTML, existen alternativas que pueden ser más adecuadas en ciertos casos:\n\n* **Hojas de Estilo Externas:** Son archivos `.css` que contienen reglas de estilo y se vinculan al documento HTML mediante la etiqueta `<link>`. Esta es la opción más recomendada para proyectos grandes y complejos, ya que facilita la gestión y el mantenimiento de los estilos.\n\n  ```html\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n  ```\n* **Estilos en Línea:** Se aplican directamente a los elementos HTML mediante el atributo `style`. Aunque son útiles para aplicar estilos específicos a un solo elemento, su uso excesivo puede dificultar el mantenimiento del código.\n\n  ```html\n  <p style=\"color: red;\">Este párrafo tiene estilos en línea.</p>\n  ```\n\n## CONCLUSION\n\nLa etiqueta `<style>` es una herramienta poderosa para insertar estilos CSS directamente en un documento HTML. Permite a los desarrolladores controlar la apariencia visual de los elementos HTML y adaptar los estilos a diferentes dispositivos y medios. Sin embargo, es importante utilizarla de manera organizada y considerar alternativas como las hojas de estilo externas para proyectos grandes y complejos.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<style>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style)\n* [W3Schools: HTML Style Tag](https://www.w3schools.com/tags/tag_style.asp)\n* [CSS - Cascading Style Sheets](https://www.w3.org/Style/CSS/)\n"
  },
  {
    "slug": "/programming/web/html/basic-structure-of-an-html-document/html-tag",
    "title": "LA ETIQUETA <html>",
    "description": "Documentación sobre la etiqueta HTML, su propósito, estructura y uso en la creación de páginas web.",
    "content": "La etiqueta `<html>` es el elemento raíz de todo documento HTML.  Actúa como el contenedor principal para todo el código HTML que conforma una página web.  Define el inicio y el final del documento, indicando al navegador que interprete el contenido como código HTML.  Sin esta etiqueta, el navegador no podría identificar el documento como HTML y, por lo tanto, no lo renderizaría correctamente.\n\n## OBJETIVOS CLAVE SOBRE LA ETIQUETA `<html>`\n\n* **Definir la raíz del documento:**  La etiqueta `<html>` encapsula todo el contenido HTML, estableciendo el punto de partida para la interpretación del navegador.\n* **Indicar la versión de HTML:**  Aunque no es obligatorio, se recomienda incluir el atributo `lang` dentro de la etiqueta `<html>` para especificar el idioma principal del documento.  Esto ayuda a los navegadores y motores de búsqueda a procesar el contenido correctamente.\n* **Contener las secciones principales:**  Dentro de la etiqueta `<html>` se encuentran las dos secciones principales de un documento HTML: `<head>` y `<body>`.\n\n## ESTRUCTURA BASICA\n\nLa estructura básica de un documento HTML con la etiqueta `<html>` se presenta de la siguiente manera:\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Título de la página</title>\r\n</head>\r\n<body>\r\n    <h1>Encabezado principal</h1>\r\n    <p>Este es un párrafo de texto.</p>\r\n</body>\r\n</html>\n```\n\nEn este ejemplo:\n\n* `<!DOCTYPE html>`:  Declara el tipo de documento como HTML5.  Debe ser la primera línea del documento.\n* `<html lang=\"es\">`:  Define el elemento raíz del documento HTML y especifica el idioma español.\n* `<head>`:  Contiene metadatos sobre el documento, como el título, la codificación de caracteres y la configuración de la ventana gráfica.\n* `<body>`:  Contiene el contenido visible de la página web, como encabezados, párrafos, imágenes y enlaces.\n\n## ATRIBUTOS\n\nLa etiqueta `<html>` puede aceptar varios atributos, aunque el más común es el atributo `lang`.\n\n* **`lang`**:  Especifica el idioma principal del documento.  Por ejemplo, `lang=\"en\"` para inglés, `lang=\"es\"` para español, `lang=\"fr\"` para francés, etc.  Este atributo es importante para la accesibilidad y la optimización para motores de búsqueda (SEO).\n* **`xmlns`**:  Define el espacio de nombres XML para el documento.  Este atributo es menos común en HTML5, pero puede ser necesario en algunos casos.\n* **`manifest`**: Especifica la URL de la lista de recursos de caché del navegador.\n\n## IMPORTANCIA DE LA ETIQUETA `<html>`\n\nLa etiqueta `<html>` es fundamental para la correcta interpretación y visualización de una página web.  Sin ella, el navegador no sabría cómo procesar el contenido, lo que resultaría en una visualización incorrecta o en la imposibilidad de mostrar la página.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: DOCUMENTO HTML BASICO\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First Webpage</title>\r\n</head>\r\n<body>\r\n    <h1>Hello, World!</h1>\r\n    <p>This is a simple HTML document.</p>\r\n</body>\r\n</html>\n```\n\n### EJEMPLO 2: USO DEL ATRIBUTO `LANG`\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Mi Primera Página Web</title>\r\n</head>\r\n<body>\r\n    <h1>¡Hola, Mundo!</h1>\r\n    <p>Este es un documento HTML sencillo.</p>\r\n</body>\r\n</html>\n```\n\n### EJEMPLO 3:  INCORPORANDO METADATOS ADICIONALES\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"fr\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"description\" content=\"Une page web simple en HTML.\">\r\n    <meta name=\"keywords\" content=\"HTML, page web, exemple\">\r\n    <title>Ma Première Page Web</title>\r\n</head>\r\n<body>\r\n    <h1>Bonjour, le monde!</h1>\r\n    <p>Ceci est un document HTML simple.</p>\r\n</body>\r\n</html>\n```\n\n## CONSEJOS ADICIONALES\n\n* Siempre incluye la etiqueta `<!DOCTYPE html>` al principio del documento para asegurar que el navegador interprete el código como HTML5.\n* Utiliza el atributo `lang` para especificar el idioma principal del documento.\n* Asegúrate de que todas las demás etiquetas HTML estén correctamente anidadas dentro de la etiqueta `<html>`.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<html> element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html)\n* [W3Schools: HTML `<html>` Tag](https://www.w3schools.com/tags/tag_html.asp)\n"
  },
  {
    "slug": "/programming/web/html/basic-structure-of-an-html-document",
    "title": "Estructura Basica de un Documento HTML",
    "description": "Exploración de la estructura fundamental de un documento HTML, incluyendo la declaración doctype, las etiquetas html, head y body, y su importancia en la creación de páginas web.",
    "content": "Un documento HTML es la base de cualquier página web. Define la estructura y el contenido de la página, permitiendo que los navegadores interpreten y muestren la información de manera adecuada. Comprender la estructura básica de un documento HTML es fundamental para cualquier desarrollador web, ya que proporciona el marco sobre el cual se construye la interfaz de usuario y se organiza el contenido.\n\n## OBJETIVOS CLAVE\n\n* Entender la función de cada elemento esencial en la estructura de un documento HTML.\n* Aprender a crear un documento HTML válido y bien estructurado.\n* Comprender la importancia de la declaración `<!DOCTYPE html>`.\n* Conocer las etiquetas `<head>` y `<body>` y sus respectivos contenidos.\n\n## 1.  DECLARACION `<!DOCTYPE html>`\n\nLa declaración `<!DOCTYPE html>` es la primera línea en un documento HTML5. No es una etiqueta HTML, sino una instrucción para el navegador web sobre la versión de HTML que se está utilizando en el documento. En HTML5, la declaración es simple y concisa:\n\n```html\n<!DOCTYPE html>\n```\n\nEsta declaración asegura que el navegador interprete el documento en modo estándar, lo cual es crucial para evitar comportamientos inesperados y garantizar la compatibilidad entre diferentes navegadores.\n\n## 2.  ETIQUETA `<HTML>`\n\nLa etiqueta `<html>` es el elemento raíz de cada página HTML. Envuelve todo el contenido del documento y le indica al navegador que está tratando con un documento HTML. Debe incluir un atributo `lang` que especifique el idioma principal del documento, lo cual es importante para la accesibilidad y la optimización para motores de búsqueda (SEO).\n\n```html\n<html lang=\"es\">\r\n  <!-- Contenido del documento -->\r\n</html>\n```\n\n## 3.  ETIQUETA `<HEAD>`\n\nLa etiqueta `<head>` contiene metadatos sobre el documento HTML, como el título de la página, enlaces a hojas de estilo (CSS), scripts (JavaScript) y otras informaciones que no se muestran directamente en el contenido de la página.\n\n### ELEMENTOS COMUNES DENTRO DE `<HEAD>`:\n\n* **`<title>`:** Define el título de la página que se muestra en la barra de título del navegador o en la pestaña.\n\n  ```html\n  <title>Mi Página Web</title>\n  ```\n\n* **`<meta>`:** Proporciona metadatos sobre el documento, como la codificación de caracteres, la descripción de la página y las palabras clave para los motores de búsqueda.\n\n  ```html\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"description\" content=\"Descripción de mi página web.\">\r\n  <meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  ```\n\n  * `charset`: Especifica la codificación de caracteres del documento. `UTF-8` es la codificación recomendada para admitir una amplia gama de caracteres.\n  * `name=\"description\"`: Proporciona una breve descripción de la página, utilizada por los motores de búsqueda.\n  * `name=\"keywords\"`: Define palabras clave relevantes para la página, útiles para el SEO.\n  * `name=\"viewport\"`: Configura el viewport para dispositivos móviles, asegurando que la página se ajuste correctamente a diferentes tamaños de pantalla.\n\n* **`<link>`:** Enlaza hojas de estilo externas (CSS) al documento HTML.\n\n  ```html\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  ```\n\n* **`<style>`:** Permite incluir estilos CSS directamente en el documento HTML (aunque no es la práctica recomendada para proyectos grandes).\n\n  ```html\n  <style>\r\n    body {\r\n      background-color: #f0f0f0;\r\n    }\r\n  </style>\n  ```\n\n* **`<script>`:** Enlaza o incluye scripts de JavaScript en el documento HTML.\n\n  ```html\n  <script src=\"script.js\"></script>\n  ```\n\n## 4.  ETIQUETA `<BODY>`\n\nLa etiqueta `<body>` contiene todo el contenido visible de la página web, como texto, imágenes, enlaces, formularios y otros elementos interactivos. Es el cuerpo principal del documento HTML donde se construye la interfaz de usuario.\n\n### EJEMPLO DE CONTENIDO DENTRO DE `<BODY>`:\n\n```html\n<body>\r\n  <header>\r\n    <h1>Bienvenido a mi página web</h1>\r\n    <nav>\r\n      <a href=\"#\">Inicio</a>\r\n      <a href=\"#\">Acerca de</a>\r\n      <a href=\"#\">Servicios</a>\r\n      <a href=\"#\">Contacto</a>\r\n    </nav>\r\n  </header>\r\n\r\n  <main>\r\n    <section>\r\n      <h2>Sección principal</h2>\r\n      <p>Este es el contenido principal de la página.</p>\r\n    </section>\r\n  </main>\r\n\r\n  <footer>\r\n    <p>© 2023 Mi Página Web</p>\r\n  </footer>\r\n</body>\n```\n\n## ESTRUCTURA COMPLETA DE UN DOCUMENTO HTML\n\nA continuación, se muestra un ejemplo completo de la estructura básica de un documento HTML:\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"description\" content=\"Ejemplo de estructura básica de un documento HTML.\">\r\n  <meta name=\"keywords\" content=\"HTML, estructura, head, body\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Estructura Básica HTML</title>\r\n  <link rel=\"stylesheet\" href=\"styles.css\">\r\n</head>\r\n<body>\r\n  <header>\r\n    <h1>Mi Página Web</h1>\r\n    <nav>\r\n      <a href=\"#\">Inicio</a>\r\n      <a href=\"#\">Acerca de</a>\r\n      <a href=\"#\">Servicios</a>\r\n      <a href=\"#\">Contacto</a>\r\n    </nav>\r\n  </header>\r\n\r\n  <main>\r\n    <section>\r\n      <h2>Bienvenido</h2>\r\n      <p>Este es un ejemplo de la estructura básica de un documento HTML.</p>\r\n    </section>\r\n  </main>\r\n\r\n  <footer>\r\n    <p>© 2023 Mi Página Web</p>\r\n  </footer>\r\n  <script src=\"script.js\"></script>\r\n</body>\r\n</html>\n```\n\n## IMPORTANCIA DE UNA ESTRUCTURA HTML ADECUADA\n\n* **Compatibilidad:** Asegura que la página se visualice correctamente en diferentes navegadores y dispositivos.\n* **Accesibilidad:** Facilita la navegación para usuarios con discapacidades, especialmente cuando se utilizan lectores de pantalla.\n* **SEO:** Mejora el posicionamiento en los motores de búsqueda al proporcionar una estructura clara y semántica.\n* **Mantenibilidad:** Facilita la actualización y el mantenimiento del código, ya que la estructura es clara y organizada.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: HTML](https://developer.mozilla.org/es/docs/Web/HTML)\n* [W3Schools: HTML Tutorial](https://www.w3schools.com/html/)\n* [HTML5 Doctor](https://html5doctor.com/)\n"
  },
  {
    "slug": "/programming/web/html/forms-in-html/buttons",
    "title": "Botones (<button>)",
    "description": "Documentación detallada sobre el elemento HTML <button>, sus atributos, usos y mejores prácticas.",
    "content": "El elemento `<button>` en HTML es fundamental para la creación de interfaces interactivas en la web. Permite a los usuarios realizar acciones específicas, como enviar un formulario, abrir un diálogo o ejecutar una función JavaScript. Este documento proporciona una guía completa sobre el uso, atributos y mejores prácticas del elemento `<button>`.\n\n## OBJETIVOS CLAVE\n\n* Comprender la estructura y sintaxis del elemento `<button>`.\n* Aprender sobre los diferentes tipos de botones y sus usos.\n* Conocer los atributos importantes que modifican el comportamiento y la apariencia de los botones.\n* Implementar botones accesibles y compatibles con diferentes dispositivos y navegadores.\n* Integrar botones con JavaScript para crear interacciones dinámicas.\n\n## ESTRUCTURA BASICA\n\nLa estructura básica de un botón en HTML es la siguiente:\n\n```html\n<button>Texto del Botón</button>\n```\n\nEl texto entre las etiquetas `<button>` y `</button>` es lo que se mostrará al usuario.\n\n## TIPOS DE BOTONES\n\nEl atributo `type` especifica el tipo de botón. Los tipos más comunes son:\n\n* **`submit`**: Envía el formulario al que pertenece. Este es el tipo predeterminado si no se especifica el atributo `type`.\n* **`reset`**: Restablece los campos del formulario a sus valores predeterminados.\n* **`button`**: No tiene un comportamiento predeterminado. Se utiliza generalmente con JavaScript para ejecutar una función.\n\nEjemplo:\n\n```html\n<button type=\"submit\">Enviar</button>\r\n<button type=\"reset\">Restablecer</button>\r\n<button type=\"button\" onclick=\"miFuncion()\">Haz clic aquí</button>\n```\n\n## ATRIBUTOS IMPORTANTES\n\n* **`type`**: Especifica el tipo de botón (submit, reset, button).\n* **`name`**: Define un nombre para el botón, útil para procesar formularios en el servidor.\n* **`value`**: Define el valor asociado con el botón, que se envía al servidor cuando se envía el formulario.\n* **`disabled`**: Desactiva el botón, impidiendo que el usuario interactúe con él.\n* **`form`**: Especifica el formulario al que pertenece el botón. Esto permite asociar un botón con un formulario que está fuera de la estructura normal del formulario.\n* **`formaction`**: Especifica la URL a la que se enviará el formulario cuando se haga clic en el botón. Anula el atributo `action` del formulario.\n* **`formenctype`**: Especifica cómo se deben codificar los datos del formulario antes de enviarlos al servidor. Anula el atributo `enctype` del formulario.\n* **`formmethod`**: Especifica el método HTTP (GET o POST) que se utilizará para enviar los datos del formulario. Anula el atributo `method` del formulario.\n* **`formnovalidate`**: Especifica que el formulario no debe validarse cuando se envíe. Anula el atributo `novalidate` del formulario.\n* **`formtarget`**: Especifica dónde se mostrará la respuesta después de enviar el formulario. Anula el atributo `target` del formulario.\n\nEjemplo:\n\n```html\n<form action=\"/procesar-formulario\" method=\"post\" id=\"miFormulario\">\r\n  <label for=\"nombre\">Nombre:</label>\r\n  <input type=\"text\" id=\"nombre\" name=\"nombre\"><br><br>\r\n  <button type=\"submit\" name=\"enviar\" value=\"enviar\">Enviar</button>\r\n  <button type=\"button\" onclick=\"alert('¡Hola!')\" disabled>Botón Desactivado</button>\r\n  <button type=\"submit\" form=\"miFormulario\" formaction=\"/procesar-otro-formulario\">Enviar a otro formulario</button>\r\n</form>\n```\n\n## ACCESIBILIDAD\n\nEs crucial asegurar que los botones sean accesibles para todos los usuarios, incluyendo aquellos que utilizan tecnologías de asistencia.\n\n* **Texto descriptivo**: Asegúrate de que el texto del botón sea claro y descriptivo.\n* **Atributo `aria-label`**: Utiliza el atributo `aria-label` para proporcionar una descripción más detallada del botón para los usuarios de lectores de pantalla.\n* **Atributo `aria-describedby`**: Utiliza el atributo `aria-describedby` para asociar el botón con un elemento que contiene una descripción adicional.\n* **Contraste de color**: Asegúrate de que haya suficiente contraste entre el color del texto y el color de fondo del botón.\n\nEjemplo:\n\n```html\n<button type=\"button\" onclick=\"abrirDialogo()\" aria-label=\"Abrir el diálogo de confirmación\">Abrir Diálogo</button>\n```\n\n## ESTILOS CON CSS\n\nLos botones pueden ser estilizados con CSS para que coincidan con el diseño de tu sitio web. Puedes modificar el color, la fuente, el tamaño, el borde y otros aspectos visuales.\n\nEjemplo:\n\n```html\n<style>\r\n  .miBoton {\r\n    background-color: #4CAF50; /* Verde */\r\n    border: none;\r\n    color: white;\r\n    padding: 15px 32px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n  }\r\n  .miBoton:hover {\r\n    background-color: #3e8e41;\r\n  }\r\n</style>\r\n\r\n<button class=\"miBoton\">Haz clic aquí</button>\n```\n\n## INTEGRACION CON JAVASCRIPT\n\nLos botones son frecuentemente utilizados con JavaScript para crear interacciones dinámicas en la página web. Puedes adjuntar eventos a los botones, como `onclick`, `onmouseover`, `onmouseout`, etc., para ejecutar funciones JavaScript.\n\nEjemplo:\n\n```html\n<button type=\"button\" onclick=\"mostrarMensaje()\">Mostrar Mensaje</button>\r\n\r\n<script>\r\n  function mostrarMensaje() {\r\n    alert(\"¡Botón clickeado!\");\r\n  }\r\n</script>\n```\n\n## MEJORES PRACTICAS\n\n* **Usar el tipo correcto**: Utiliza el atributo `type` para especificar el tipo de botón correcto (submit, reset, button).\n* **Accesibilidad**: Asegúrate de que los botones sean accesibles para todos los usuarios.\n* **Estilos consistentes**: Mantén un estilo consistente para todos los botones en tu sitio web.\n* **Evitar el uso excesivo de JavaScript**: Utiliza JavaScript solo cuando sea necesario para mejorar la interactividad.\n* **Probar en diferentes navegadores**: Asegúrate de que los botones funcionen correctamente en diferentes navegadores y dispositivos.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<button>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button)\n* [W3Schools: HTML Button Tag](https://www.w3schools.com/tags/tag_button.asp)\n* [Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/)\n"
  },
  {
    "slug": "/programming/web/html/forms-in-html/form-attributes",
    "title": "Atributos de Formulario (action, method)",
    "description": "Explicación detallada de los atributos 'action' y 'method' en formularios HTML, su función, uso y mejores prácticas.",
    "content": "Los formularios HTML son componentes esenciales para la interacción del usuario en la web. Permiten recopilar datos del usuario y enviarlos al servidor para su procesamiento. Dos de los atributos más importantes que definen el comportamiento de un formulario son `action` y `method`. Este documento explora en detalle estos atributos, su función, uso y las mejores prácticas asociadas.\n\n## OBJETIVOS CLAVE\n\n* Entender la función del atributo `action`.\n* Comprender la diferencia entre los métodos `GET` y `POST`.\n* Aprender a utilizar correctamente los atributos `action` y `method` en formularios HTML.\n* Conocer las implicaciones de seguridad al elegir entre `GET` y `POST`.\n\n## ATRIBUTO ACTION\n\nEl atributo `action` especifica la URL a la que se enviarán los datos del formulario cuando el usuario lo envíe. Esta URL generalmente apunta a un script del lado del servidor (por ejemplo, PHP, Python, Node.js) que procesará los datos recibidos.\n\n**Sintaxis:**\n\n```html\n<form action=\"URL_DEL_SCRIPT\" method=\"método\">\r\n  <!-- Elementos del formulario -->\r\n</form>\n```\n\n**Ejemplo:**\n\n```html\n<form action=\"/procesar_formulario.php\" method=\"post\">\r\n  <label for=\"nombre\">Nombre:</label><br>\r\n  <input type=\"text\" id=\"nombre\" name=\"nombre\"><br><br>\r\n  <label for=\"email\">Email:</label><br>\r\n  <input type=\"email\" id=\"email\" name=\"email\"><br><br>\r\n  <input type=\"submit\" value=\"Enviar\">\r\n</form>\n```\n\nEn este ejemplo, cuando el usuario envíe el formulario, los datos se enviarán a `/procesar_formulario.php`.\n\n## ATRIBUTO METHOD\n\nEl atributo `method` especifica el método HTTP que se utilizará para enviar los datos del formulario al servidor. Los dos métodos más comunes son `GET` y `POST`.\n\n### METODO GET\n\nEl método `GET` envía los datos del formulario como parte de la URL. Los datos se adjuntan a la URL como una cadena de consulta, donde cada par nombre-valor está separado por un signo igual (=) y los pares están separados por un signo ampersand (&).\n\n**Ejemplo:**\n\n```html\n<form action=\"/buscar.php\" method=\"get\">\r\n  <label for=\"termino\">Buscar:</label>\r\n  <input type=\"text\" id=\"termino\" name=\"termino\">\r\n  <input type=\"submit\" value=\"Buscar\">\r\n</form>\n```\n\nSi el usuario ingresa \"ejemplo\" en el campo de búsqueda, la URL resultante podría ser: `/buscar.php?termino=ejemplo`.\n\n**Características del método GET:**\n\n* Los datos se muestran en la URL, lo que facilita marcarlos como favoritos o compartirlos.\n* Tiene una longitud máxima de URL limitada (generalmente 2048 caracteres), lo que restringe la cantidad de datos que se pueden enviar.\n* No es adecuado para enviar información sensible, ya que los datos son visibles en la URL y pueden quedar almacenados en el historial del navegador o en los registros del servidor.\n* Es idempotente, lo que significa que realizar la misma solicitud varias veces tiene el mismo efecto que realizarla una sola vez.\n\n### METODO POST\n\nEl método `POST` envía los datos del formulario como parte del cuerpo de la solicitud HTTP. Los datos no son visibles en la URL.\n\n**Ejemplo:**\n\n```html\n<form action=\"/procesar_login.php\" method=\"post\">\r\n  <label for=\"usuario\">Usuario:</label><br>\r\n  <input type=\"text\" id=\"usuario\" name=\"usuario\"><br><br>\r\n  <label for=\"clave\">Contraseña:</label><br>\r\n  <input type=\"password\" id=\"clave\" name=\"clave\"><br><br>\r\n  <input type=\"submit\" value=\"Iniciar Sesión\">\r\n</form>\n```\n\nEn este ejemplo, los datos del usuario y la contraseña se envían al servidor de forma segura, sin aparecer en la URL.\n\n**Características del método POST:**\n\n* Los datos no se muestran en la URL, lo que lo hace más seguro para enviar información sensible.\n* No tiene una longitud máxima de datos tan estricta como `GET`, lo que permite enviar cantidades mayores de información.\n* No es idempotente, lo que significa que realizar la misma solicitud varias veces puede tener efectos diferentes (por ejemplo, crear múltiples entradas en una base de datos).\n\n## CUANDO USAR GET VS. POST\n\nLa elección entre `GET` y `POST` depende del tipo de operación que se va a realizar y de la naturaleza de los datos que se van a enviar.\n\n* **GET:** Se utiliza principalmente para recuperar datos del servidor. Es adecuado para operaciones que no modifican el estado del servidor, como búsquedas, consultas o visualización de información.\n* **POST:** Se utiliza principalmente para enviar datos al servidor para crear, actualizar o eliminar recursos. Es adecuado para operaciones que modifican el estado del servidor, como el registro de usuarios, el envío de comentarios o la carga de archivos.\n\n## IMPLICACIONES DE SEGURIDAD\n\nEs crucial considerar las implicaciones de seguridad al elegir entre `GET` y `POST`.\n\n* Nunca envíes información sensible (como contraseñas, números de tarjetas de crédito o información personal) utilizando el método `GET`, ya que los datos son visibles en la URL y pueden ser interceptados o almacenados en el historial del navegador.\n* Utiliza siempre el método `POST` para enviar información sensible.\n* Implementa medidas de seguridad adicionales, como el cifrado HTTPS, para proteger los datos en tránsito entre el navegador y el servidor.\n* Valida y sanitiza los datos recibidos del formulario en el lado del servidor para prevenir ataques de inyección (como SQL injection o Cross-Site Scripting - XSS).\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: FORMULARIO DE CONTACTO (POST)\n\n```html\n<form action=\"/enviar_correo.php\" method=\"post\">\r\n  <label for=\"nombre\">Nombre:</label><br>\r\n  <input type=\"text\" id=\"nombre\" name=\"nombre\" required><br><br>\r\n\r\n  <label for=\"email\">Email:</label><br>\r\n  <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\r\n\r\n  <label for=\"mensaje\">Mensaje:</label><br>\r\n  <textarea id=\"mensaje\" name=\"mensaje\" rows=\"4\" cols=\"50\" required></textarea><br><br>\r\n\r\n  <input type=\"submit\" value=\"Enviar Mensaje\">\r\n</form>\n```\n\nEn este ejemplo, se utiliza el método `POST` para enviar los datos del formulario de contacto al script `/enviar_correo.php`, que se encargará de enviar el correo electrónico.\n\n### EJEMPLO 2: FORMULARIO DE BUSQUEDA (GET)\n\n```html\n<form action=\"/resultados_busqueda.php\" method=\"get\">\r\n  <label for=\"busqueda\">Buscar:</label>\r\n  <input type=\"text\" id=\"busqueda\" name=\"busqueda\">\r\n  <input type=\"submit\" value=\"Buscar\">\r\n</form>\n```\n\nEn este ejemplo, se utiliza el método `GET` para enviar el término de búsqueda al script `/resultados_busqueda.php`, que mostrará los resultados de la búsqueda.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<form>: The Form element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form)\n* [W3Schools: HTML Forms](https://www.w3schools.com/html/html_forms.asp)\n* [OWASP: Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n* [OWASP: SQL Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n"
  },
  {
    "slug": "/programming/web/html/forms-in-html/form-tag",
    "title": "La etiqueta <form>",
    "description": "Documentación sobre la etiqueta HTML <form>, sus atributos, usos y mejores prácticas.",
    "content": "La etiqueta `<form>` en HTML es un elemento fundamental para la creación de formularios web. Los formularios permiten a los usuarios interactuar con un sitio web, ingresando datos que luego pueden ser procesados por el servidor. Esta etiqueta actúa como un contenedor para diferentes elementos de formulario, como campos de texto, botones, casillas de verificación, etc.\n\n## OBJETIVOS CLAVE SOBRE LA ETIQUETA `<FORM>`\n\n1. **Recopilación de Datos:** Facilitar la recopilación de información del usuario, como datos personales, comentarios, o preferencias.\n2. **Interacción Usuario-Servidor:** Permitir la interacción entre el usuario y el servidor, enviando los datos ingresados para su procesamiento.\n3. **Estructura y Organización:** Proporcionar una estructura clara y organizada para los elementos del formulario, mejorando la usabilidad y accesibilidad.\n4. **Validación de Datos:** Integrar mecanismos de validación para asegurar que los datos ingresados cumplan con los requisitos necesarios antes de ser enviados al servidor.\n\n## DESARROLLO DE LA ETIQUETA EN CUESTION\n\nLa etiqueta `<form>` es un contenedor que define un formulario HTML para la entrada de datos del usuario. Dentro de esta etiqueta, se pueden incluir varios elementos de formulario como `<input>`, `<textarea>`, `<select>`, `<button>`, entre otros.\n\n### ATRIBUTOS PRINCIPALES\n\n* **action:** Especifica la URL a la que se enviarán los datos del formulario cuando se envíe.\n* **method:** Define el método HTTP que se utilizará para enviar los datos del formulario. Los valores comunes son `GET` y `POST`.\n  * `GET`: Los datos del formulario se añaden a la URL en forma de parámetros. Es adecuado para cantidades pequeñas de datos y no debe usarse para información sensible.\n  * `POST`: Los datos del formulario se envían en el cuerpo de la solicitud HTTP. Es más seguro y puede manejar mayores cantidades de datos.\n* **accept-charset:** Especifica la codificación de caracteres utilizada para el envío del formulario.\n* **autocomplete:** Indica si el navegador debe autocompletar los campos del formulario. Puede ser `on` o `off`.\n* **enctype:** Especifica cómo deben codificarse los datos del formulario antes de enviarlos al servidor. Es importante cuando se incluyen archivos en el formulario. Los valores comunes son:\n  * `application/x-www-form-urlencoded`: Es el valor predeterminado. Todos los caracteres se codifican antes de ser enviados.\n  * `multipart/form-data`: Se utiliza cuando el formulario incluye elementos `<input type=\"file\">`.\n  * `text/plain`: Los datos se envían sin codificación.\n* **name:** Especifica un nombre para el formulario.\n* **novalidate:** Desactiva la validación del formulario por parte del navegador.\n* **target:** Especifica dónde se mostrará la respuesta después de enviar el formulario. Puede ser `_blank`, `_self`, `_parent`, `_top`, o el nombre de un `<iframe>`.\n\n### EJEMPLOS DE IMPLEMENTACION\n\n#### FORMULARIO BASICO CON LOS METODOS GET Y POST\n\n```html\n<!-- Formulario con método GET -->\r\n<form action=\"/procesar-formulario\" method=\"get\">\r\n  <label for=\"nombre\">Nombre:</label><br>\r\n  <input type=\"text\" id=\"nombre\" name=\"nombre\"><br>\r\n  <label for=\"email\">Email:</label><br>\r\n  <input type=\"email\" id=\"email\" name=\"email\"><br><br>\r\n  <input type=\"submit\" value=\"Enviar (GET)\">\r\n</form>\r\n\r\n<!-- Formulario con método POST -->\r\n<form action=\"/procesar-formulario\" method=\"post\">\r\n  <label for=\"nombre\">Nombre:</label><br>\r\n  <input type=\"text\" id=\"nombre\" name=\"nombre\"><br>\r\n  <label for=\"email\">Email:</label><br>\r\n  <input type=\"email\" id=\"email\" name=\"email\"><br><br>\r\n  <input type=\"submit\" value=\"Enviar (POST)\">\r\n</form>\n```\n\n#### FORMULARIO CON SUBIDA DE ARCHIVOS\n\n```html\n<form action=\"/subir-archivo\" method=\"post\" enctype=\"multipart/form-data\">\r\n  <label for=\"archivo\">Selecciona un archivo:</label><br>\r\n  <input type=\"file\" id=\"archivo\" name=\"archivo\"><br><br>\r\n  <input type=\"submit\" value=\"Subir Archivo\">\r\n</form>\n```\n\n#### FORMULARIO CON VALIDACION DESACTIVADA\n\n```html\n<form action=\"/procesar-formulario\" method=\"post\" novalidate>\r\n  <label for=\"nombre\">Nombre:</label><br>\r\n  <input type=\"text\" id=\"nombre\" name=\"nombre\" required><br>\r\n  <label for=\"email\">Email:</label><br>\r\n  <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\r\n  <input type=\"submit\" value=\"Enviar sin Validar\">\r\n</form>\n```\n\n### MEJORES PRACTICAS\n\n* **Usar Etiquetas `<label>`:** Asocia cada campo del formulario con una etiqueta `<label>` para mejorar la accesibilidad y usabilidad.\n* **Validación:** Implementar validación tanto en el lado del cliente (con HTML5 y JavaScript) como en el lado del servidor para asegurar la integridad de los datos.\n* **Seguridad:** Utilizar el método `POST` para enviar datos sensibles y proteger el formulario contra ataques CSRF (Cross-Site Request Forgery).\n* **Accesibilidad:** Asegurarse de que el formulario sea accesible para todos los usuarios, incluyendo aquellos con discapacidades, mediante el uso adecuado de atributos ARIA y etiquetas semánticas.\n* **Estructura Clara:** Organizar los elementos del formulario de manera lógica y coherente para facilitar su comprensión y uso.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: The HTML form element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form)\n* [W3Schools: HTML Forms](https://www.w3schools.com/html/html_forms.asp)\n"
  },
  {
    "slug": "/programming/web/html/forms-in-html",
    "title": "Formularios en HTML",
    "description": "Guía completa sobre la creación y uso de formularios en HTML para la recolección de datos del usuario.",
    "content": "Los formularios en HTML son una herramienta fundamental para la interacción entre los usuarios y los sitios web. Permiten recolectar información valiosa, como datos de contacto, comentarios, preferencias y cualquier otro tipo de entrada que el sitio necesite. Un formulario bien diseñado mejora la experiencia del usuario y facilita la gestión de la información.\n\n## OBJETIVOS CLAVE\n\n* **Recolección de Datos:** Permitir a los usuarios ingresar y enviar datos al servidor.\n* **Validación de Datos:** Asegurar que los datos ingresados sean correctos y cumplan con los requisitos del sitio.\n* **Interactividad:** Ofrecer una experiencia de usuario intuitiva y fácil de usar.\n* **Accesibilidad:** Diseñar formularios que sean accesibles para todos los usuarios, incluyendo aquellos con discapacidades.\n\n## ETIQUETA `<FORM>`\n\nEl elemento `<form>` es el contenedor principal de todos los elementos de un formulario. Define el formulario y especifica cómo se enviarán los datos al servidor.\n\n```html\n<form action=\"/procesar_formulario\" method=\"post\">\r\n  <!-- Elementos del formulario aquí -->\r\n</form>\n```\n\n* **`action`:** Especifica la URL a la que se enviarán los datos del formulario.\n* **`method`:** Define el método HTTP utilizado para enviar los datos (generalmente `get` o `post`).\n\n## ELEMENTOS DE ENTRADA `<INPUT>`\n\nEl elemento `<input>` es el más común en los formularios y se utiliza para crear diferentes tipos de campos de entrada.\n\n### TIPOS DE INPUT\n\n* **`text`:** Para campos de texto de una sola línea.\n\n  ```html\n  <label for=\"nombre\">Nombre:</label>\r\n  <input type=\"text\" id=\"nombre\" name=\"nombre\">\n  ```\n\n* **`password`:** Para campos de contraseña, donde el texto se oculta.\n\n  ```html\n  <label for=\"password\">Contraseña:</label>\r\n  <input type=\"password\" id=\"password\" name=\"password\">\n  ```\n\n* **`email`:** Para campos de correo electrónico, con validación básica del formato.\n\n  ```html\n  <label for=\"email\">Correo Electrónico:</label>\r\n  <input type=\"email\" id=\"email\" name=\"email\">\n  ```\n\n* **`number`:** Para campos numéricos, con opciones para definir valores mínimos y máximos.\n\n  ```html\n  <label for=\"edad\">Edad:</label>\r\n  <input type=\"number\" id=\"edad\" name=\"edad\" min=\"18\" max=\"99\">\n  ```\n\n* **`date`:** Para seleccionar una fecha del calendario.\n\n  ```html\n  <label for=\"fecha_nacimiento\">Fecha de Nacimiento:</label>\r\n  <input type=\"date\" id=\"fecha_nacimiento\" name=\"fecha_nacimiento\">\n  ```\n\n* **`radio`:** Para opciones de selección única.\n\n  ```html\n  <p>Género:</p>\r\n  <input type=\"radio\" id=\"masculino\" name=\"genero\" value=\"masculino\">\r\n  <label for=\"masculino\">Masculino</label><br>\r\n  <input type=\"radio\" id=\"femenino\" name=\"genero\" value=\"femenino\">\r\n  <label for=\"femenino\">Femenino</label><br>\r\n  <input type=\"radio\" id=\"otro\" name=\"genero\" value=\"otro\">\r\n  <label for=\"otro\">Otro</label>\n  ```\n\n* **`checkbox`:** Para opciones de selección múltiple.\n\n  ```html\n  <p>Intereses:</p>\r\n  <input type=\"checkbox\" id=\"musica\" name=\"intereses\" value=\"musica\">\r\n  <label for=\"musica\">Música</label><br>\r\n  <input type=\"checkbox\" id=\"deporte\" name=\"intereses\" value=\"deporte\">\r\n  <label for=\"deporte\">Deporte</label><br>\r\n  <input type=\"checkbox\" id=\"cine\" name=\"intereses\" value=\"cine\">\r\n  <label for=\"cine\">Cine</label>\n  ```\n\n* **`file`:** Para permitir la carga de archivos.\n\n  ```html\n  <label for=\"archivo\">Subir Archivo:</label>\r\n  <input type=\"file\" id=\"archivo\" name=\"archivo\">\n  ```\n\n* **`submit`:** Para crear un botón que envía el formulario.\n\n  ```html\n  <input type=\"submit\" value=\"Enviar\">\n  ```\n\n* **`reset`:** Para crear un botón que resetea el formulario a sus valores predeterminados.\n\n  ```html\n  <input type=\"reset\" value=\"Restablecer\">\n  ```\n\n## ETIQUETA `<TEXTAREA>`\n\nEl elemento `<textarea>` se utiliza para crear campos de texto de múltiples líneas, ideales para comentarios o descripciones.\n\n```html\n<label for=\"comentarios\">Comentarios:</label><br>\r\n<textarea id=\"comentarios\" name=\"comentarios\" rows=\"4\" cols=\"50\"></textarea>\n```\n\n* **`rows`:** Especifica el número de filas visibles en el área de texto.\n* **`cols`:** Especifica el número de columnas visibles en el área de texto.\n\n## ETIQUETA `<SELECT>`\n\nEl elemento `<select>` crea una lista desplegable de opciones.\n\n```html\n<label for=\"pais\">País:</label>\r\n<select id=\"pais\" name=\"pais\">\r\n  <option value=\"mexico\">México</option>\r\n  <option value=\"colombia\">Colombia</option>\r\n  <option value=\"espana\">España</option>\r\n  <option value=\"argentina\">Argentina</option>\r\n</select>\n```\n\n* **`<option>`:** Define cada una de las opciones en la lista desplegable.\n\n## ETIQUETA `<LABEL>`\n\nEl elemento `<label>` proporciona una descripción para los elementos del formulario, mejorando la accesibilidad y la usabilidad.\n\n```html\n<label for=\"nombre\">Nombre:</label>\r\n<input type=\"text\" id=\"nombre\" name=\"nombre\">\n```\n\nAl asociar un `<label>` con un elemento de formulario mediante el atributo `for`, se mejora la accesibilidad, ya que los usuarios pueden hacer clic en la etiqueta para enfocar el elemento asociado.\n\n## ATRIBUTOS IMPORTANTES\n\n* **`name`:** Especifica el nombre del elemento, que se utiliza para identificar los datos cuando se envían al servidor.\n* **`id`:** Proporciona un identificador único para el elemento, útil para CSS y JavaScript.\n* **`value`:** Define el valor inicial del elemento.\n* **`placeholder`:** Muestra un texto de ejemplo dentro del campo hasta que el usuario ingrese algo.\n* **`required`:** Indica que el campo es obligatorio y debe ser llenado antes de enviar el formulario.\n* **`disabled`:** Desactiva el campo, impidiendo que el usuario interactúe con él.\n* **`readonly`:** Permite que el usuario vea el valor del campo, pero no lo modifique.\n\n## VALIDACION DE FORMULARIOS\n\nLa validación de formularios es crucial para asegurar que los datos ingresados por los usuarios sean correctos y cumplan con los requisitos del sitio.\n\n### VALIDACION HTML5\n\nHTML5 proporciona atributos de validación integrados, como `required`, `min`, `max`, `pattern` y `type`.\n\n```html\n<input type=\"email\" id=\"email\" name=\"email\" required>\r\n<input type=\"number\" id=\"edad\" name=\"edad\" min=\"18\" max=\"99\">\r\n<input type=\"text\" id=\"codigo_postal\" name=\"codigo_postal\" pattern=\"[0-9]{5}\">\n```\n\n### VALIDACION CON JAVASCRIPT\n\nPara una validación más compleja, se puede utilizar JavaScript. Esto permite realizar comprobaciones personalizadas y mostrar mensajes de error específicos.\n\n```javascript\nconst formulario = document.getElementById('miFormulario');\r\n\r\nformulario.addEventListener('submit', function(event) {\r\n  let email = document.getElementById('email').value;\r\n  if (!email.includes('@')) {\r\n    alert('Por favor, introduce un correo electrónico válido.');\r\n    event.preventDefault(); // Evita que el formulario se envíe\r\n  }\r\n});\n```\n\n## ACCESIBILIDAD EN FORMULARIOS\n\nEs fundamental diseñar formularios que sean accesibles para todos los usuarios, incluyendo aquellos con discapacidades.\n\n* **Etiquetas:** Utilizar etiquetas `<label>` para todos los elementos del formulario.\n* **Atributo `aria-label`:** Proporcionar descripciones adicionales para elementos complejos.\n* **Estructura lógica:** Organizar los elementos del formulario de manera lógica y coherente.\n* **Validación accesible:** Asegurarse de que los mensajes de error sean claros y fáciles de entender.\n\n## EJEMPLO COMPLETO\n\n```html\n<form action=\"/procesar_formulario\" method=\"post\" id=\"miFormulario\">\r\n  <label for=\"nombre\">Nombre:</label><br>\r\n  <input type=\"text\" id=\"nombre\" name=\"nombre\" required><br><br>\r\n\r\n  <label for=\"email\">Correo Electrónico:</label><br>\r\n  <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\r\n\r\n  <label for=\"password\">Contraseña:</label><br>\r\n  <input type=\"password\" id=\"password\" name=\"password\" required><br><br>\r\n\r\n  <p>Género:</p>\r\n  <input type=\"radio\" id=\"masculino\" name=\"genero\" value=\"masculino\">\r\n  <label for=\"masculino\">Masculino</label><br>\r\n  <input type=\"radio\" id=\"femenino\" name=\"genero\" value=\"femenino\">\r\n  <label for=\"femenino\">Femenino</label><br>\r\n  <input type=\"radio\" id=\"otro\" name=\"genero\" value=\"otro\">\r\n  <label for=\"otro\">Otro</label><br><br>\r\n\r\n  <label for=\"comentarios\">Comentarios:</label><br>\r\n  <textarea id=\"comentarios\" name=\"comentarios\" rows=\"4\" cols=\"50\"></textarea><br><br>\r\n\r\n  <input type=\"submit\" value=\"Enviar\">\r\n  <input type=\"reset\" value=\"Restablecer\">\r\n</form>\r\n\r\n<script>\r\n  const formulario = document.getElementById('miFormulario');\r\n\r\n  formulario.addEventListener('submit', function(event) {\r\n    let email = document.getElementById('email').value;\r\n    if (!email.includes('@')) {\r\n      alert('Por favor, introduce un correo electrónico válido.');\r\n      event.preventDefault(); // Evita que el formulario se envíe\r\n    }\r\n  });\r\n</script>\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs - HTML forms](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form)\n* [W3Schools - HTML forms](https://www.w3schools.com/html/html_forms.asp)\n* [WebAIM - Creating Accessible Forms](https://webaim.org/techniques/forms/)\n"
  },
  {
    "slug": "/programming/web/html/forms-in-html/input-elements",
    "title": "Elementos de Entrada (<input>, <textarea>, <select>)",
    "description": "Guía completa sobre los elementos de entrada en HTML `<input>`, `<textarea>`, y `<select>`. Aprende sobre sus atributos, tipos y cómo utilizarlos para crear formularios interactivos y accesibles.",
    "content": "Los elementos de entrada son componentes esenciales en el desarrollo web, ya que permiten a los usuarios interactuar con las páginas y enviar información al servidor.  En HTML, los principales elementos de entrada son `<input>`, `<textarea>`, y `<select>`. Cada uno de estos elementos tiene propósitos específicos y atributos que controlan su comportamiento y apariencia. Comprender cómo utilizar estos elementos de manera efectiva es crucial para crear formularios accesibles y fáciles de usar.\n\n## OBJETIVOS CLAVE SOBRE LOS ELEMENTOS DE ENTRADA\n\n* **Comprender los diferentes tipos de elementos de entrada:**  Conocer las diferencias entre `<input>`, `<textarea>`, y `<select>`, y cuándo utilizar cada uno.\n* **Dominar los atributos de los elementos de entrada:**  Aprender a utilizar los atributos HTML para personalizar el comportamiento y la apariencia de los elementos de entrada.\n* **Crear formularios accesibles:**  Implementar prácticas de accesibilidad para garantizar que los formularios sean utilizables por todos los usuarios, incluyendo aquellos con discapacidades.\n* **Validar la entrada del usuario:**  Utilizar la validación del lado del cliente y del servidor para asegurar que la información ingresada por los usuarios sea correcta y segura.\n* **Mejorar la experiencia del usuario:**  Diseñar formularios intuitivos y fáciles de usar que guíen a los usuarios a través del proceso de envío de información.\n\n## ELEMENTO `<INPUT>`\n\nEl elemento `<input>` es el más versátil de los tres, ya que puede representar una amplia variedad de tipos de entrada, desde campos de texto simples hasta selectores de fecha y botones de carga de archivos.  El tipo de entrada se especifica mediante el atributo `type`.\n\n### TIPOS COMUNES DE `<INPUT>`\n\n* **`text`:**  Crea un campo de texto de una sola línea para ingresar texto simple.\n\n  ```html\n  <label for=\"nombre\">Nombre:</label>\r\n  <input type=\"text\" id=\"nombre\" name=\"nombre\">\n  ```\n\n* **`password`:**  Similar al tipo `text`, pero oculta el texto ingresado con asteriscos o puntos.\n\n  ```html\n  <label for=\"password\">Contraseña:</label>\r\n  <input type=\"password\" id=\"password\" name=\"password\">\n  ```\n\n* **`email`:**  Crea un campo de texto diseñado para ingresar direcciones de correo electrónico.  Algunos navegadores realizan una validación básica para asegurar que el texto ingresado tenga el formato de una dirección de correo electrónico válida.\n\n  ```html\n  <label for=\"email\">Correo electrónico:</label>\r\n  <input type=\"email\" id=\"email\" name=\"email\">\n  ```\n\n* **`number`:**  Crea un campo numérico que permite ingresar solo números.  Puedes utilizar los atributos `min`, `max`, y `step` para controlar el rango y el incremento de los números permitidos.\n\n  ```html\n  <label for=\"edad\">Edad:</label>\r\n  <input type=\"number\" id=\"edad\" name=\"edad\" min=\"0\" max=\"120\">\n  ```\n\n* **`date`:**  Crea un selector de fecha que permite a los usuarios elegir una fecha de un calendario.\n\n  ```html\n  <label for=\"fecha_nacimiento\">Fecha de nacimiento:</label>\r\n  <input type=\"date\" id=\"fecha_nacimiento\" name=\"fecha_nacimiento\">\n  ```\n\n* **`radio`:**  Crea un botón de opción que permite a los usuarios seleccionar una opción de un grupo de opciones mutuamente excluyentes.  Los botones de opción que pertenecen al mismo grupo deben tener el mismo valor para el atributo `name`.\n\n  ```html\n  <p>Género:</p>\r\n  <input type=\"radio\" id=\"masculino\" name=\"genero\" value=\"masculino\">\r\n  <label for=\"masculino\">Masculino</label><br>\r\n  <input type=\"radio\" id=\"femenino\" name=\"genero\" value=\"femenino\">\r\n  <label for=\"femenino\">Femenino</label><br>\r\n  <input type=\"radio\" id=\"otro\" name=\"genero\" value=\"otro\">\r\n  <label for=\"otro\">Otro</label>\n  ```\n\n* **`checkbox`:**  Crea una casilla de verificación que permite a los usuarios seleccionar una o más opciones de una lista.\n\n  ```html\n  <p>Intereses:</p>\r\n  <input type=\"checkbox\" id=\"musica\" name=\"intereses\" value=\"musica\">\r\n  <label for=\"musica\">Música</label><br>\r\n  <input type=\"checkbox\" id=\"deporte\" name=\"intereses\" value=\"deporte\">\r\n  <label for=\"deporte\">Deporte</label><br>\r\n  <input type=\"checkbox\" id=\"cine\" name=\"intereses\" value=\"cine\">\r\n  <label for=\"cine\">Cine</label>\n  ```\n\n* **`file`:**  Crea un botón de carga de archivos que permite a los usuarios seleccionar uno o más archivos de su sistema.\n\n  ```html\n  <label for=\"archivo\">Seleccionar archivo:</label>\r\n  <input type=\"file\" id=\"archivo\" name=\"archivo\">\n  ```\n\n* **`submit`:**  Crea un botón que envía el formulario al servidor.\n\n  ```html\n  <input type=\"submit\" value=\"Enviar\">\n  ```\n\n* **`reset`:**  Crea un botón que restablece los valores del formulario a sus valores predeterminados.\n\n  ```html\n  <input type=\"reset\" value=\"Restablecer\">\n  ```\n\n* **`button`:**  Crea un botón genérico que no tiene un comportamiento predeterminado.  Se utiliza generalmente con JavaScript para realizar acciones personalizadas.\n\n  ```html\n  <button type=\"button\">Haz clic aquí</button>\n  ```\n\n### ATRIBUTOS COMUNES DE `<INPUT>`\n\n* **`id`:**  Especifica un identificador único para el elemento.  Se utiliza para referenciar el elemento en CSS y JavaScript.\n* **`name`:**  Especifica el nombre del elemento.  Se utiliza para identificar el elemento cuando se envía el formulario al servidor.\n* **`value`:**  Especifica el valor del elemento.  Para los campos de texto, este es el texto que se muestra en el campo.  Para los botones de opción y las casillas de verificación, este es el valor que se envía al servidor si el elemento está seleccionado.\n* **`placeholder`:**  Especifica un texto de marcador de posición que se muestra en el campo cuando está vacío.\n* **`required`:**  Especifica que el campo es obligatorio y debe ser completado antes de enviar el formulario.\n* **`disabled`:**  Deshabilita el elemento, impidiendo que el usuario interactúe con él.\n* **`readonly`:**  Hace que el campo sea de solo lectura, permitiendo que el usuario vea el valor pero no lo modifique.\n* **`maxlength`:**  Especifica la longitud máxima de caracteres que se pueden ingresar en el campo.\n* **`min` y `max`:**  Especifican los valores mínimo y máximo permitidos para los campos de tipo `number` y `date`.\n* **`step`:**  Especifica el incremento entre los valores permitidos para los campos de tipo `number`.\n* **`autocomplete`:** Permite habilitar o deshabilitar el autocompletado del navegador para el campo.\n\n## ELEMENTO `<TEXTAREA>`\n\nEl elemento `<textarea>` crea un campo de texto de múltiples líneas que permite a los usuarios ingresar texto más extenso, como comentarios o descripciones.\n\n```html\n<label for=\"comentarios\">Comentarios:</label><br>\r\n<textarea id=\"comentarios\" name=\"comentarios\" rows=\"4\" cols=\"50\">\r\nEscribe tus comentarios aquí...\r\n</textarea>\n```\n\n### ATRIBUTOS COMUNES DE `<TEXTAREA>`\n\n* **`id`:**  Especifica un identificador único para el elemento.\n* **`name`:**  Especifica el nombre del elemento.\n* **`rows`:**  Especifica el número de filas visibles en el campo.\n* **`cols`:**  Especifica el número de columnas visibles en el campo.\n* **`placeholder`:**  Especifica un texto de marcador de posición que se muestra en el campo cuando está vacío.\n* **`required`:**  Especifica que el campo es obligatorio.\n* **`disabled`:**  Deshabilita el elemento.\n* **`readonly`:**  Hace que el campo sea de solo lectura.\n* **`maxlength`:**  Especifica la longitud máxima de caracteres que se pueden ingresar en el campo.\n* **`wrap`:**  Controla cómo se ajusta el texto dentro del campo.  Los valores posibles son `soft` (el texto se ajusta visualmente pero no se insertan saltos de línea) y `hard` (se insertan saltos de línea en el texto).\n\n## ELEMENTO `<SELECT>`\n\nEl elemento `<select>` crea un menú desplegable que permite a los usuarios seleccionar una opción de una lista de opciones predefinidas.  Las opciones se definen dentro del elemento `<select>` utilizando el elemento `<option>`.\n\n```html\n<label for=\"pais\">País:</label>\r\n<select id=\"pais\" name=\"pais\">\r\n  <option value=\"mexico\">México</option>\r\n  <option value=\"estados_unidos\">Estados Unidos</option>\r\n  <option value=\"canada\">Canadá</option>\r\n  <option value=\"otro\">Otro</option>\r\n</select>\n```\n\n### ATRIBUTOS COMUNES DE `<SELECT>`\n\n* **`id`:**  Especifica un identificador único para el elemento.\n* **`name`:**  Especifica el nombre del elemento.\n* **`required`:**  Especifica que el campo es obligatorio.\n* **`disabled`:**  Deshabilita el elemento.\n* **`multiple`:**  Permite a los usuarios seleccionar múltiples opciones del menú desplegable.\n\n### ATRIBUTOS COMUNES DE `<OPTION>`\n\n* **`value`:**  Especifica el valor de la opción.  Este es el valor que se envía al servidor si la opción está seleccionada.\n* **`selected`:**  Especifica que la opción está seleccionada por defecto.\n* **`disabled`:**  Deshabilita la opción, impidiendo que el usuario la seleccione.\n\n## ACCESIBILIDAD\n\nEs fundamental garantizar que los formularios sean accesibles para todos los usuarios, incluyendo aquellos con discapacidades.  Aquí hay algunas prácticas recomendadas para mejorar la accesibilidad de los formularios:\n\n* **Utilizar etiquetas `<label>`:**  Asociar cada elemento de entrada con una etiqueta `<label>` utilizando el atributo `for` de la etiqueta y el atributo `id` del elemento de entrada.  Esto permite a los usuarios que utilizan lectores de pantalla comprender el propósito de cada campo.\n* **Proporcionar instrucciones claras:**  Utilizar texto descriptivo para explicar el propósito de cada campo y proporcionar instrucciones sobre cómo completarlo correctamente.\n* **Utilizar atributos ARIA:**  Utilizar atributos ARIA (Accessible Rich Internet Applications) para proporcionar información adicional sobre la estructura y el comportamiento del formulario a los lectores de pantalla.\n* **Asegurar un contraste de color adecuado:**  Utilizar colores que proporcionen un contraste adecuado entre el texto y el fondo para que el texto sea fácil de leer para los usuarios con discapacidades visuales.\n* **Probar el formulario con lectores de pantalla:**  Utilizar un lector de pantalla para probar el formulario y asegurarse de que sea fácil de usar para los usuarios con discapacidades visuales.\n\n## VALIDACION\n\nLa validación es el proceso de verificar que la información ingresada por los usuarios sea correcta y segura.  La validación se puede realizar tanto en el lado del cliente (en el navegador) como en el lado del servidor.\n\n### VALIDACION DEL LADO DEL CLIENTE\n\nLa validación del lado del cliente se realiza en el navegador utilizando HTML5 y JavaScript.  HTML5 proporciona varios atributos que se pueden utilizar para realizar una validación básica, como `required`, `type`, `min`, `max`, y `pattern`.  JavaScript se puede utilizar para realizar una validación más compleja.\n\n### VALIDACION DEL LADO DEL SERVIDOR\n\nLa validación del lado del servidor se realiza en el servidor utilizando un lenguaje de programación como PHP, Python, o Java.  La validación del lado del servidor es esencial para garantizar la seguridad de la aplicación, ya que los usuarios pueden deshabilitar la validación del lado del cliente en su navegador.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs:  `<input>`](https://developer.mozilla.org/es/docs/Web/HTML/Element/Input)\n* [MDN Web Docs:  `<textarea>`](https://developer.mozilla.org/es/docs/Web/HTML/Element/textarea)\n* [MDN Web Docs:  `<select>`](https://developer.mozilla.org/es/docs/Web/HTML/Element/select)\n* [W3C:  HTML Forms](https://www.w3.org/MarkUp/html3/forms.html)\n"
  },
  {
    "slug": "/programming/web/html/fundamental-html-tags/divisions-and-spans",
    "title": "Divisiones y Spans (<div>, <span>)",
    "description": "Explicación detallada de los elementos <div> y <span> en HTML, su uso para estructurar y estilizar contenido, y las diferencias clave entre ambos.",
    "content": "Los elementos `<div>` y `<span>` son dos de los elementos más fundamentales y versátiles en HTML.  Aunque ambos se utilizan para agrupar contenido, su comportamiento y propósito son distintos.  Comprender estas diferencias es crucial para crear una estructura HTML semánticamente correcta y aplicar estilos CSS de manera efectiva.\n\n## OBJETIVOS CLAVE\n\n* Entender la diferencia fundamental entre elementos de bloque (`<div>`) y elementos en línea (`<span>`).\n* Aprender a utilizar `<div>` para estructurar secciones principales de una página web.\n* Aprender a utilizar `<span>` para aplicar estilos específicos a porciones de texto o elementos dentro de una línea.\n* Comprender cómo estos elementos interactúan con CSS para controlar la presentación visual.\n* Conocer las mejores prácticas para el uso de `<div>` y `<span>` en el contexto de la semántica HTML5.\n\n## ELEMENTO `<DIV>` (DIVISION)\n\nEl elemento `<div>`, abreviatura de \"division\", es un contenedor de bloque genérico.  Se utiliza para agrupar otros elementos HTML en secciones lógicas.  Por defecto, un `<div>` ocupa todo el ancho disponible de su contenedor padre y siempre comienza en una nueva línea.  Esencialmente, crea una \"caja\" rectangular que puede contener otros elementos, texto, imágenes, etc.\n\n**Características principales de `<div>`:**\n\n* **Elemento de bloque:**  Ocupa todo el ancho disponible y comienza en una nueva línea.\n* **Contenedor genérico:**  Puede contener cualquier tipo de contenido HTML.\n* **Utilizado para la estructura:**  Ayuda a organizar el contenido en secciones lógicas.\n* **Estilizable:**  Se puede aplicar estilos CSS para controlar su apariencia (ancho, alto, color de fondo, márgenes, etc.).\n\n**Ejemplo de uso:**\n\n```html\n<div id=\"header\">\r\n  <h1>Mi Sitio Web</h1>\r\n  <nav>\r\n    <ul>\r\n      <li><a href=\"#\">Inicio</a></li>\r\n      <li><a href=\"#\">Acerca de</a></li>\r\n      <li><a href=\"#\">Servicios</a></li>\r\n      <li><a href=\"#\">Contacto</a></li>\r\n    </ul>\r\n  </nav>\r\n</div>\r\n\r\n<div id=\"main-content\">\r\n  <article>\r\n    <h2>Título del Artículo</h2>\r\n    <p>Este es el contenido del artículo...</p>\r\n  </article>\r\n</div>\r\n\r\n<div id=\"footer\">\r\n  <p>© 2023 Mi Sitio Web</p>\r\n</div>\n```\n\nEn este ejemplo, se utilizan `<div>` para crear las secciones principales de una página web: encabezado, contenido principal y pie de página.  Cada `<div>` actúa como un contenedor para el contenido correspondiente.  El atributo `id` se utiliza para identificar cada `<div>` y aplicar estilos CSS específicos.\n\n## ELEMENTO `<SPAN>`\n\nEl elemento `<span>` es un contenedor en línea genérico.  Se utiliza para agrupar pequeñas porciones de texto u otros elementos en línea dentro de una línea de texto.  A diferencia de `<div>`, `<span>` no crea una nueva línea; simplemente envuelve el contenido especificado.\n\n**Características principales de `<span>`:**\n\n* **Elemento en línea:**  No crea una nueva línea; fluye con el texto circundante.\n* **Contenedor genérico:**  Puede contener texto u otros elementos en línea.\n* **Utilizado para el estilo:**  Se utiliza para aplicar estilos específicos a porciones de texto.\n* **Estilizable:**  Se puede aplicar estilos CSS para controlar su apariencia (color, fuente, tamaño, etc.).\n\n**Ejemplo de uso:**\n\n```html\n<p>Este es un párrafo de texto.  Quiero resaltar la palabra <span style=\"color: red;\">importante</span> en rojo.</p>\r\n\r\n<p>Este es un párrafo con un <span class=\"highlight\">fragmento</span> resaltado.</p>\n```\n\nEn el primer ejemplo, se utiliza `<span>` para cambiar el color de la palabra \"importante\" a rojo.  En el segundo ejemplo, se utiliza `<span>` con una clase CSS para aplicar un estilo de resaltado.\n\n## DIFERENCIAS CLAVE ENTRE `<DIV>` Y `<SPAN>`\n\n| Característica | `<div>` | `<span>` |\r\n|---|---|---|\r\n| Tipo de elemento | Bloque | En línea |\r\n| Comportamiento | Crea una nueva línea | No crea una nueva línea |\r\n| Uso principal | Estructura de la página | Estilo de porciones de texto |\r\n| Ancho | Ocupa todo el ancho disponible | Se ajusta al contenido |\r\n| Contenido | Puede contener cualquier elemento HTML | Puede contener texto u otros elementos en línea |\n\n## CUÁNDO USAR `<DIV>` Y `<SPAN>`\n\n* **Usar `<div>`:**\n  * Para crear secciones principales de una página web (encabezado, pie de página, barra lateral, etc.).\n  * Para agrupar elementos relacionados para facilitar el diseño y la manipulación con CSS y JavaScript.\n  * Para crear layouts complejos utilizando CSS.\n* **Usar `<span>`:**\n  * Para aplicar estilos específicos a palabras o frases dentro de un párrafo.\n  * Para agregar iconos o símbolos dentro de una línea de texto.\n  * Para manipular porciones de texto con JavaScript.\n\n## SEMÁNTICA HTML5 Y ALTERNATIVAS A `<DIV>`\n\nCon la introducción de HTML5, se han introducido elementos semánticos que proporcionan un significado más específico a la estructura de una página web.  Estos elementos incluyen:\n\n* `<header>`:  Representa el encabezado de una sección o página.\n* `<nav>`:  Representa una sección de navegación.\n* `<main>`:  Representa el contenido principal de una página.\n* `<article>`:  Representa un artículo independiente.\n* `<aside>`:  Representa contenido relacionado pero secundario.\n* `<footer>`:  Representa el pie de página de una sección o página.\n\nSi bien `<div>` sigue siendo útil para agrupar contenido genérico, se recomienda utilizar estos elementos semánticos cuando sea apropiado para mejorar la accesibilidad y el SEO de tu sitio web.  En lugar de usar `<div id=\"header\">`, usa `<header>`.\n\n## MEJORES PRÁCTICAS\n\n* **Usar elementos semánticos HTML5 cuando sea posible.**  Esto mejora la accesibilidad y el SEO.\n* **Evitar el uso excesivo de `<div>` y `<span>`.**  Demasiados elementos pueden dificultar la lectura y el mantenimiento del código.\n* **Usar clases CSS para aplicar estilos en lugar de estilos en línea.**  Esto facilita la reutilización y el mantenimiento de los estilos.\n* **Mantener la estructura HTML limpia y organizada.**  Esto facilita la comprensión y la modificación del código.\n* **Comentar el código para explicar la función de cada `<div>` y `<span>`.**  Esto facilita la colaboración y el mantenimiento a largo plazo.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: `<div>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div)\n* [MDN Web Docs: `<span>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span)\n* [W3Schools: HTML `<div>` Tag](https://www.w3schools.com/tags/tag_div.asp)\n* [W3Schools: HTML `<span>` Tag](https://www.w3schools.com/tags/tag_span.asp)\n"
  },
  {
    "slug": "/programming/web/html/fundamental-html-tags/headings",
    "title": "Encabezados (<h1> a <h6>)",
    "description": "Explicación detallada de los encabezados HTML, su uso correcto y mejores prácticas para la estructuración del contenido web.",
    "content": "## INTRODUCCION A LOS ENCABEZADOS HTML (H1 A H6)\n\nLos encabezados HTML, representados por las etiquetas `<h1>` a `<h6>`, son elementos fundamentales para estructurar el contenido de una página web.  No solo definen la jerarquía visual del texto, sino que también proporcionan información semántica crucial para los motores de búsqueda y la accesibilidad.  Comprender cómo y cuándo utilizar cada nivel de encabezado es esencial para crear documentos HTML bien organizados y optimizados.\n\n## OBJETIVOS CLAVE SOBRE LOS ENCABEZADOS\n\n* **Estructurar el Contenido:**  Organizar la información en secciones lógicas y jerárquicas.\n* **Mejorar la Accesibilidad:** Facilitar la navegación para usuarios con discapacidades, especialmente aquellos que utilizan lectores de pantalla.\n* **Optimización para Motores de Búsqueda (SEO):**  Indicar a los motores de búsqueda la importancia relativa de diferentes secciones del contenido.\n* **Claridad Visual:**  Proporcionar una jerarquía visual clara que guíe al lector a través del contenido.\n\n## ¿QUE SON LOS ENCABEZADOS HTML?\n\nLos encabezados HTML son etiquetas que definen títulos y subtítulos dentro de una página web.  Existen seis niveles de encabezados, desde `<h1>` (el más importante) hasta `<h6>` (el menos importante).  Cada nivel representa un nivel diferente en la jerarquía del contenido.\n\n* `<h1>`:  Representa el título principal de la página.  Debe haber solo un `<h1>` por página.\n* `<h2>`:  Representa los títulos de las secciones principales dentro de la página.\n* `<h3>`:  Representa los subtítulos dentro de las secciones principales.\n* `<h4>`, `<h5>`, `<h6>`:  Representan subtítulos de niveles inferiores, utilizados para organizar aún más el contenido dentro de las subsecciones.\n\n## USO CORRECTO DE LOS ENCABEZADOS\n\nEl uso correcto de los encabezados es crucial para la semántica y la accesibilidad de una página web.  Aquí hay algunas pautas a seguir:\n\n1. **Jerarquía:** Utilice los encabezados en orden jerárquico.  No salte niveles (por ejemplo, de `<h1>` a `<h3>` sin usar `<h2>`).\n2. **Unico H1 por Pagina:** Asegúrese de que cada página tenga solo un elemento `<h1>` que represente el título principal de la página.\n3. **Relevancia:**  Utilice encabezados que describan con precisión el contenido de la sección que encabezan.\n4. **Longitud:** Mantenga los encabezados concisos y descriptivos.\n5. **Estilo:**  Utilice CSS para estilizar los encabezados, no las etiquetas HTML.  Esto permite mantener la separación entre la estructura y la presentación.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: ESTRUCTURA BASICA\n\n```html\n<h1>Título Principal de la Página</h1>\r\n\r\n<h2>Sección Principal 1</h2>\r\n<p>Contenido de la sección 1...</p>\r\n\r\n<h3>Subtítulo de la Sección 1</h3>\r\n<p>Contenido del subtítulo 1...</p>\r\n\r\n<h2>Sección Principal 2</h2>\r\n<p>Contenido de la sección 2...</p>\n```\n\n### EJEMPLO 2: USO DE NIVELES INFERIORES\n\n```html\n<h1>Artículo sobre Desarrollo Web</h1>\r\n\r\n<h2>Introducción</h2>\r\n<p>Breve introducción al desarrollo web...</p>\r\n\r\n<h2>Herramientas de Desarrollo</h2>\r\n<p>Descripción de las herramientas comunes...</p>\r\n\r\n<h3>Editores de Código</h3>\r\n<p>Información sobre editores como VS Code, Sublime Text...</p>\r\n\r\n<h4>Extensiones Útiles</h4>\r\n<p>Lista de extensiones que mejoran la productividad...</p>\n```\n\n### EJEMPLO 3:  ESTRUCTURA DE UN BLOG POST\n\n```html\n<h1>Título del Blog Post:  \"Guía Completa de Git\"</h1>\r\n\r\n<h2>Introducción a Git</h2>\r\n<p>¿Qué es Git y por qué es importante?...</p>\r\n\r\n<h2>Comandos Básicos de Git</h2>\r\n<p>Descripción de los comandos esenciales...</p>\r\n\r\n<h3>Git Init</h3>\r\n<p>Cómo inicializar un nuevo repositorio...</p>\r\n\r\n<h3>Git Add</h3>\r\n<p>Cómo agregar archivos al área de preparación...</p>\r\n\r\n<h3>Git Commit</h3>\r\n<p>Cómo guardar los cambios en el repositorio...</p>\n```\n\n## CONSIDERACIONES ADICIONALES\n\n* **Accesibilidad:**  Asegúrese de que la estructura de encabezados sea lógica y fácil de seguir para los usuarios que utilizan lectores de pantalla.  Utilice las herramientas de accesibilidad para validar la estructura de su contenido.\n* **SEO:**  Los motores de búsqueda utilizan los encabezados para comprender la estructura y el tema de una página.  Utilice palabras clave relevantes en sus encabezados, pero evite el relleno de palabras clave.\n* **CSS:**  Utilice CSS para controlar la apariencia de los encabezados (tamaño, fuente, color, etc.).  Esto permite mantener la coherencia visual en todo el sitio web y facilita la modificación del diseño sin afectar la estructura HTML.\n\n## MEJORES PRACTICAS\n\n* **Planifique la Estructura:** Antes de comenzar a escribir el contenido, planifique la estructura de la página y determine qué niveles de encabezado son necesarios.\n* **Sea Consistente:** Utilice la misma estructura de encabezados en todas las páginas de su sitio web.\n* **Valide su HTML:** Utilice un validador HTML para asegurarse de que su código es válido y cumple con los estándares web.\n* **Pruebe la Accesibilidad:** Utilice herramientas de accesibilidad para probar la facilidad de uso de su sitio web para personas con discapacidades.\n\n## CONCLUSION\n\nLos encabezados HTML son una herramienta poderosa para estructurar y organizar el contenido web.  Al comprender cómo utilizar correctamente las etiquetas `<h1>` a `<h6>`, puede crear páginas web que sean accesibles, fáciles de leer y optimizadas para los motores de búsqueda.  Recuerde seguir las mejores prácticas y validar su código para garantizar la calidad y la usabilidad de su sitio web.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: HTML heading elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements)\n* [W3C: HTML Sectioning Elements](https://www.w3.org/TR/html52/sections.html)\n* [WebAIM: Semantic Structure](https://webaim.org/techniques/semanticstructure/)\n"
  },
  {
    "slug": "/programming/web/html/fundamental-html-tags/images",
    "title": "Imagenes (<img>)",
    "description": "La etiqueta <img> en HTML permite insertar imágenes en una página web.",
    "content": "## INTRODUCCION A LA ETIQUETA IMG\n\nLa etiqueta `<img>` es un elemento fundamental en HTML que permite insertar imágenes en una página web. A diferencia de otras etiquetas, `<img>` es un elemento vacío, lo que significa que no necesita una etiqueta de cierre. Su función principal es mostrar una imagen en el navegador, y para ello utiliza atributos esenciales como `src` y `alt`.\n\n## OBJETIVOS CLAVE\n\n1. **Mostrar Imágenes:** Permitir la visualización de imágenes en una página web.\n2. **Atributo `src`:** Comprender y utilizar correctamente el atributo `src` para especificar la ruta de la imagen.\n3. **Atributo `alt`:** Comprender y utilizar el atributo `alt` para proporcionar texto alternativo para la imagen.\n4. **Atributos de Dimensionamiento:** Utilizar atributos como `width` y `height` para controlar el tamaño de la imagen.\n5. **Accesibilidad:** Asegurar que las imágenes sean accesibles para todos los usuarios, incluyendo aquellos que utilizan lectores de pantalla.\n\n## ESTRUCTURA BASICA\n\nLa estructura básica de la etiqueta `<img>` es la siguiente:\n\n```html\n<img src=\"ruta/a/la/imagen.jpg\" alt=\"Descripción de la imagen\">\n```\n\n* **`src` (source):** Especifica la URL de la imagen que se va a mostrar. Este atributo es obligatorio.\n* **`alt` (alternative text):** Proporciona un texto alternativo para la imagen. Este atributo es esencial para la accesibilidad y se muestra si la imagen no se puede cargar.\n\n## ATRIBUTO SRC\n\nEl atributo `src` es el más importante de la etiqueta `<img>`, ya que define la ubicación de la imagen que se va a mostrar. La URL puede ser:\n\n* **URL Absoluta:** Una dirección completa que incluye el protocolo (ej. `http://www.ejemplo.com/imagenes/logo.png`).\n* **URL Relativa:** Una dirección relativa al archivo HTML actual (ej. `imagenes/logo.png`).\n\n**Ejemplo de URL Absoluta:**\n\n```html\n<img src=\"https://www.ejemplo.com/imagenes/paisaje.jpg\" alt=\"Paisaje de montaña\">\n```\n\n**Ejemplo de URL Relativa:**\n\nSi tienes un archivo HTML en la carpeta `mi_sitio_web` y la imagen en `mi_sitio_web/imagenes/perfil.jpg`:\n\n```html\n<img src=\"imagenes/perfil.jpg\" alt=\"Foto de perfil\">\n```\n\n## ATRIBUTO ALT\n\nEl atributo `alt` proporciona un texto alternativo para la imagen. Este texto se muestra si la imagen no se puede cargar y es utilizado por los lectores de pantalla para describir la imagen a los usuarios con discapacidades visuales.\n\n**Importancia del Atributo `alt`:**\n\n* **Accesibilidad:** Permite que los usuarios con discapacidades visuales comprendan el contenido de la imagen.\n* **SEO:** Los motores de búsqueda utilizan el texto alternativo para entender el contenido de la imagen, lo que puede mejorar el SEO de tu sitio web.\n* **Experiencia del Usuario:** Si la imagen no se carga, el texto alternativo proporciona información sobre lo que debería mostrarse.\n\n**Ejemplo:**\n\n```html\n<img src=\"imagenes/gato.jpg\" alt=\"Un gato atigrado durmiendo en una cesta\">\n```\n\n## ATRIBUTOS DE DIMENSIONAMIENTO: WIDTH Y HEIGHT\n\nLos atributos `width` y `height` se utilizan para especificar el ancho y el alto de la imagen en píxeles. Aunque es posible usar estos atributos, se recomienda utilizar CSS para controlar el tamaño de las imágenes, ya que ofrece mayor flexibilidad y control.\n\n**Ejemplo con Atributos `width` y `height`:**\n\n```html\n<img src=\"imagenes/playa.jpg\" alt=\"Playa tropical\" width=\"500\" height=\"300\">\n```\n\n**Ejemplo con CSS:**\n\n```html\n<img src=\"imagenes/playa.jpg\" alt=\"Playa tropical\" style=\"width:500px; height:300px;\">\n```\n\nO, mejor aún, utilizando una clase CSS:\n\n```html\n<style>\r\n.imagen-mediana {\r\n  width: 500px;\r\n  height: 300px;\r\n}\r\n</style>\r\n\r\n<img src=\"imagenes/playa.jpg\" alt=\"Playa tropical\" class=\"imagen-mediana\">\n```\n\n## CONSIDERACIONES ADICIONALES\n\n* **Formatos de Imagen:** Los formatos de imagen más comunes son JPEG, PNG, GIF y SVG. Cada formato tiene sus propias características y es adecuado para diferentes tipos de imágenes.\n  * **JPEG:** Ideal para fotografías y imágenes con muchos colores.\n  * **PNG:** Adecuado para imágenes con transparencia y gráficos con texto.\n  * **GIF:** Utilizado para animaciones simples y gráficos con pocos colores.\n  * **SVG:** Formato vectorial ideal para iconos y gráficos escalables.\n* **Optimización de Imágenes:** Es importante optimizar las imágenes para reducir su tamaño de archivo sin perder calidad. Esto mejora la velocidad de carga de la página web.\n* **Imágenes Responsivas:** Para asegurar que las imágenes se vean bien en diferentes dispositivos, se pueden utilizar técnicas de diseño responsivo, como el atributo `srcset` y el elemento `<picture>`.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n**Ejemplo 1: Imagen con URL Relativa y Texto Alternativo:**\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Ejemplo de Imagen</title>\r\n</head>\r\n<body>\r\n  <h1>Mi Página con Imagen</h1>\r\n  <img src=\"imagenes/montana.jpg\" alt=\"Una vista impresionante de una montaña nevada\">\r\n</body>\r\n</html>\n```\n\n**Ejemplo 2: Imagen con URL Absoluta y Dimensionamiento con CSS:**\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Ejemplo de Imagen con CSS</title>\r\n  <style>\r\n    .imagen-grande {\r\n      width: 800px;\r\n      height: 400px;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <h1>Imagen con Estilo CSS</h1>\r\n  <img src=\"https://www.ejemplo.com/imagenes/ciudad.jpg\" alt=\"Una ciudad moderna al atardecer\" class=\"imagen-grande\">\r\n</body>\r\n</html>\n```\n\n**Ejemplo 3: Imagen con Enlace:**\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Ejemplo de Imagen con Enlace</title>\r\n</head>\r\n<body>\r\n  <h1>Imagen con Enlace</h1>\r\n  <a href=\"https://www.ejemplo.com\">\r\n    <img src=\"imagenes/logo.png\" alt=\"Logo de Ejemplo\">\r\n  </a>\r\n</body>\r\n</html>\n```\n\n## CONCLUSION\n\nLa etiqueta `<img>` es esencial para mostrar imágenes en una página web. Utilizando los atributos `src` y `alt` correctamente, y considerando la optimización y accesibilidad, puedes mejorar significativamente la experiencia del usuario y el SEO de tu sitio web.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<img>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img)\n* [W3Schools: HTML \\<img> Tag](https://www.w3schools.com/tags/tag_img.asp)\n* [Google Developers: Optimize Images](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-images)\n"
  },
  {
    "slug": "/programming/web/html/fundamental-html-tags",
    "title": "Etiquetas HTML Fundamentales",
    "description": "Exploración en profundidad de las etiquetas HTML esenciales para la estructura y contenido de páginas web.",
    "content": "Las etiquetas HTML son los bloques de construcción básicos de cualquier página web. Definen la estructura, el contenido y la semántica de un documento HTML. Comprender las etiquetas fundamentales es crucial para cualquier desarrollador web, ya que permite crear páginas bien estructuradas, accesibles y optimizadas para los motores de búsqueda.\n\n## OBJETIVOS CLAVE\n\n* Comprender la función y el propósito de las etiquetas HTML fundamentales.\n* Aprender a utilizar correctamente las etiquetas para estructurar el contenido de una página web.\n* Conocer las etiquetas semánticas que mejoran la accesibilidad y el SEO.\n* Aplicar las etiquetas HTML en la creación de páginas web prácticas y funcionales.\n\n## ETIQUETAS DE ESTRUCTURA BASICA\n\n* **`<!DOCTYPE html>`**:  Define la versión de HTML que se está utilizando.  Siempre debe ser la primera línea en un documento HTML5.\n\n  ```html\n  <!DOCTYPE html>\n  ```\n\n* **`<html>`**:  Es el elemento raíz que contiene todo el contenido de la página HTML.\n\n  ```html\n  <html>\r\n  ...\r\n  </html>\n  ```\n\n* **`<head>`**:  Contiene metadatos sobre el documento HTML, como el título, la codificación de caracteres, enlaces a hojas de estilo y scripts.  No se muestra directamente en el navegador.\n\n  ```html\n  <head>\r\n      <meta charset=\"UTF-8\">\r\n      <title>Mi Página Web</title>\r\n      <link rel=\"stylesheet\" href=\"estilos.css\">\r\n  </head>\n  ```\n\n* **`<title>`**:  Especifica el título de la página, que se muestra en la pestaña del navegador y en los resultados de búsqueda.\n\n  ```html\n  <title>Etiquetas HTML Fundamentales</title>\n  ```\n\n* **`<body>`**:  Contiene todo el contenido visible de la página web, como texto, imágenes, enlaces, etc.\n\n  ```html\n  <body>\r\n      <h1>Bienvenido a mi página</h1>\r\n      <p>Este es un párrafo de texto.</p>\r\n  </body>\n  ```\n\n## ETIQUETAS DE ENCABEZADO\n\nLas etiquetas de encabezado (`<h1>` a `<h6>`) se utilizan para definir títulos y subtítulos en una página web.  `<h1>` representa el título principal, mientras que `<h6>` representa el subtítulo de menor importancia.\n\n```html\n<h1>Título Principal</h1>\r\n<h2>Subtítulo</h2>\r\n<h3>Subtítulo de Nivel 3</h3>\n```\n\nEs importante utilizar los encabezados de forma jerárquica para estructurar el contenido de manera lógica y mejorar la accesibilidad.\n\n## ETIQUETAS DE TEXTO\n\n* **`<p>`**:  Define un párrafo de texto.\n\n  ```html\n  <p>Este es un párrafo de texto. Puede contener varias líneas y se separa de otros párrafos por un espacio en blanco.</p>\n  ```\n\n* **`<a>`**:  Crea un hipervínculo a otra página web, un archivo o una ubicación dentro de la misma página.\n\n  ```html\n  <a href=\"https://www.ejemplo.com\">Visita Ejemplo.com</a>\n  ```\n\n* **`<img>`**:  Inserta una imagen en la página web.\n\n  ```html\n  <img src=\"imagen.jpg\" alt=\"Descripción de la imagen\">\n  ```\n\n* **`<span>`**:  Es un contenedor en línea que se utiliza para aplicar estilos o manipular una parte específica del texto.\n\n  ```html\n  <p>Este es un <span>texto resaltado</span>.</p>\n  ```\n\n* **`<strong>`**:  Indica texto importante, que generalmente se muestra en negrita.\n\n  ```html\n  <p>Esto es <strong>muy importante</strong>.</p>\n  ```\n\n* **`<em>`**:  Indica énfasis en el texto, que generalmente se muestra en cursiva.\n\n  ```html\n  <p>Esto es <em>énfasis</em>.</p>\n  ```\n\n## ETIQUETAS DE LISTAS\n\n* **`<ul>`**:  Crea una lista no ordenada (con viñetas).\n\n  ```html\n  <ul>\r\n      <li>Elemento 1</li>\r\n      <li>Elemento 2</li>\r\n      <li>Elemento 3</li>\r\n  </ul>\n  ```\n\n* **`<ol>`**:  Crea una lista ordenada (numerada).\n\n  ```html\n  <ol>\r\n      <li>Primer elemento</li>\r\n      <li>Segundo elemento</li>\r\n      <li>Tercer elemento</li>\r\n  </ol>\n  ```\n\n* **`<li>`**:  Define un elemento de la lista.\n\n## ETIQUETAS DE TABLAS\n\n* **`<table>`**:  Crea una tabla.\n\n  ```html\n  <table>\r\n      <thead>\r\n          <tr>\r\n              <th>Encabezado 1</th>\r\n              <th>Encabezado 2</th>\r\n          </tr>\r\n      </thead>\r\n      <tbody>\r\n          <tr>\r\n              <td>Dato 1</td>\r\n              <td>Dato 2</td>\r\n          </tr>\r\n          <tr>\r\n              <td>Dato 3</td>\r\n              <td>Dato 4</td>\r\n          </tr>\r\n      </tbody>\r\n  </table>\n  ```\n\n* **`<tr>`**:  Define una fila de la tabla.\n\n* **`<th>`**:  Define una celda de encabezado de la tabla.\n\n* **`<td>`**:  Define una celda de datos de la tabla.\n\n## ETIQUETAS SEMANTICAS\n\nLas etiquetas semánticas proporcionan significado al contenido de la página, lo que mejora la accesibilidad y el SEO.\n\n* **`<header>`**:  Define la sección de encabezado de un documento o sección.\n\n  ```html\n  <header>\r\n      <h1>Mi Blog</h1>\r\n      <nav>\r\n          <a href=\"#\">Inicio</a>\r\n          <a href=\"#\">Acerca de</a>\r\n          <a href=\"#\">Contacto</a>\r\n      </nav>\r\n  </header>\n  ```\n\n* **`<nav>`**:  Define una sección de navegación.\n\n* **`<article>`**:  Define un artículo independiente.\n\n  ```html\n  <article>\r\n      <h2>Título del Artículo</h2>\r\n      <p>Contenido del artículo...</p>\r\n  </article>\n  ```\n\n* **`<aside>`**:  Define contenido relacionado pero separado del contenido principal.\n\n  ```html\n  <aside>\r\n      <h3>Enlaces Relacionados</h3>\r\n      <ul>\r\n          <li><a href=\"#\">Enlace 1</a></li>\r\n          <li><a href=\"#\">Enlace 2</a></li>\r\n      </ul>\r\n  </aside>\n  ```\n\n* **`<footer>`**:  Define la sección de pie de página de un documento o sección.\n\n  ```html\n  <footer>\r\n      <p>© 2023 Mi Blog</p>\r\n  </footer>\n  ```\n\n## EJEMPLO DE IMPLEMENTACION\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Etiquetas HTML Fundamentales</title>\r\n</head>\r\n<body>\r\n\r\n    <header>\r\n        <h1>Mi Página Web</h1>\r\n        <nav>\r\n            <ul>\r\n                <li><a href=\"#\">Inicio</a></li>\r\n                <li><a href=\"#\">Acerca de</a></li>\r\n                <li><a href=\"#\">Servicios</a></li>\r\n                <li><a href=\"#\">Contacto</a></li>\r\n            </ul>\r\n        </nav>\r\n    </header>\r\n\r\n    <main>\r\n        <article>\r\n            <h2>Bienvenido</h2>\r\n            <p>Este es un ejemplo de una página web básica utilizando etiquetas HTML fundamentales.</p>\r\n            <img src=\"imagen.jpg\" alt=\"Imagen de ejemplo\">\r\n        </article>\r\n\r\n        <aside>\r\n            <h3>Información Adicional</h3>\r\n            <p>Aquí puedes encontrar información adicional sobre nuestra empresa.</p>\r\n        </aside>\r\n    </main>\r\n\r\n    <footer>\r\n        <p>© 2023 Mi Página Web</p>\r\n    </footer>\r\n\r\n</body>\r\n</html>\n```\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: HTML elements reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)\n* [W3Schools: HTML Tutorial](https://www.w3schools.com/html/default.asp)\n* [freeCodeCamp: Learn HTML](https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/)\n"
  },
  {
    "slug": "/programming/web/html/fundamental-html-tags/links",
    "title": "Enlaces (<a>)",
    "description": "Explicación detallada de los enlaces HTML (<a>), sus atributos y mejores prácticas.",
    "content": "Los enlaces, representados por la etiqueta `<a>` (anchor), son elementos fundamentales en la creación de páginas web. Permiten a los usuarios navegar entre diferentes recursos en la web, ya sean páginas dentro del mismo sitio o páginas externas. Un enlace bien implementado mejora la usabilidad y la accesibilidad de un sitio web.\n\n## OBJETIVOS CLAVE SOBRE LOS ENLACES\n\n* **Conectar Recursos:** Facilitar la navegación entre páginas web y otros recursos en línea.\n* **Mejorar la Usabilidad:** Proporcionar una experiencia de usuario intuitiva y eficiente.\n* **Optimizar el SEO:** Utilizar atributos de enlace para influir en cómo los motores de búsqueda indexan y clasifican las páginas.\n* **Accesibilidad:** Asegurar que los enlaces sean accesibles para todos los usuarios, incluyendo aquellos que utilizan tecnologías de asistencia.\n\n## ETIQUETA `<a>` Y EL ATRIBUTO HREF\n\nLa etiqueta `<a>` define un hipervínculo a otro recurso. El atributo más importante es `href`, que especifica la URL de destino del enlace.\n\n**Ejemplo Básico:**\n\n```html\n<a href=\"https://www.ejemplo.com\">Visita Ejemplo</a>\n```\n\nEn este ejemplo, el texto \"Visita Ejemplo\" actuará como un enlace que, al hacer clic, llevará al usuario a `https://www.ejemplo.com`.\n\n## TIPOS DE URLS\n\nEl atributo `href` puede contener diferentes tipos de URLs:\n\n* **URLs Absolutas:** Incluyen el protocolo (ej., `https://`) y el dominio completo. Se utilizan para enlazar a sitios web externos.\n\n  ```html\n  <a href=\"https://www.wikipedia.org\">Wikipedia</a>\n  ```\n\n* **URLs Relativas:** Especifican la ruta al recurso en relación con la ubicación del documento actual. Se utilizan para enlazar a páginas dentro del mismo sitio web.\n\n  ```html\n  <a href=\"/contacto.html\">Contacto</a> <!-- Enlace a la página de contacto en el directorio raíz -->\r\n  <a href=\"blog/articulo.html\">Artículo del Blog</a> <!-- Enlace a un artículo dentro del directorio \"blog\" -->\n  ```\n\n* **Enlaces a Anclas:** Permiten enlazar a una sección específica dentro de la misma página o en otra página. Se utilizan con el atributo `id`.\n\n  ```html\n  <!-- Definición del ancla -->\r\n  <h2 id=\"seccion2\">Sección 2</h2>\r\n\r\n  <!-- Enlace al ancla -->\r\n  <a href=\"#seccion2\">Ir a la Sección 2</a>\r\n\r\n  <!-- Enlace a un ancla en otra página -->\r\n  <a href=\"otra_pagina.html#seccion2\">Ir a la Sección 2 en otra página</a>\n  ```\n\n* **Enlaces de Correo Electrónico:** Abren el cliente de correo electrónico predeterminado del usuario con una dirección de correo electrónico específica.\n\n  ```html\n  <a href=\"mailto:info@ejemplo.com\">Enviar un correo electrónico</a>\n  ```\n\n* **Enlaces de Llamada Telefónica:** Inician una llamada telefónica en dispositivos compatibles (como smartphones).\n\n  ```html\n  <a href=\"tel:+15551234567\">Llamar al +1 (555) 123-4567</a>\n  ```\n\n## ATRIBUTO TARGET\n\nEl atributo `target` especifica dónde se abrirá el enlace. Los valores más comunes son:\n\n* `_self` (valor por defecto): Abre el enlace en la misma pestaña o ventana.\n* `_blank`: Abre el enlace en una nueva pestaña o ventana.\n* `_parent`: Abre el enlace en el marco padre.\n* `_top`: Abre el enlace en el cuerpo completo de la ventana.\n\n**Ejemplo:**\n\n```html\n<a href=\"https://www.ejemplo.com\" target=\"_blank\">Visitar Ejemplo en una nueva pestaña</a>\n```\n\n## ATRIBUTO REL\n\nEl atributo `rel` especifica la relación entre el documento actual y el recurso enlazado. Es importante para el SEO y la accesibilidad. Algunos valores comunes son:\n\n* `nofollow`: Indica a los motores de búsqueda que no sigan el enlace. Se utiliza para enlaces a sitios web no confiables o para contenido patrocinado.\n\n  ```html\n  <a href=\"https://www.ejemplo.com\" rel=\"nofollow\">Enlace no seguido</a>\n  ```\n\n* `noopener`: Previene que la nueva página tenga acceso al objeto `window.opener`, lo cual mejora la seguridad. Se utiliza generalmente con `target=\"_blank\"`.\n\n  ```html\n  <a href=\"https://www.ejemplo.com\" target=\"_blank\" rel=\"noopener\">Enlace seguro en nueva pestaña</a>\n  ```\n\n* `noreferrer`: Oculta la información de referencia (referrer) al sitio web enlazado. También implica `noopener`.\n\n  ```html\n  <a href=\"https://www.ejemplo.com\" target=\"_blank\" rel=\"noreferrer\">Enlace sin referrer</a>\n  ```\n\n* `alternate`: Indica una versión alternativa del documento actual (ej., una versión en otro idioma).\n\n  ```html\n  <a href=\"https://www.ejemplo.es\" rel=\"alternate\" hreflang=\"es\">Versión en español</a>\n  ```\n\n## ACCESIBILIDAD DE LOS ENLACES\n\nEs crucial asegurar que los enlaces sean accesibles para todos los usuarios:\n\n* **Texto Descriptivo:** Utilizar texto de enlace claro y descriptivo que indique el destino del enlace. Evitar frases genéricas como \"haz clic aquí\".\n\n* **Atributo Title:** Proporcionar información adicional sobre el enlace utilizando el atributo `title`. Esta información se muestra como un tooltip al pasar el ratón sobre el enlace.\n\n  ```html\n  <a href=\"https://www.ejemplo.com\" title=\"Visita la página principal de Ejemplo\">Ejemplo</a>\n  ```\n\n* **Enlaces Visibles:** Asegurar que los enlaces sean visualmente distintos del texto circundante, utilizando colores y estilos que cumplan con los estándares de contraste de accesibilidad.\n\n* **Enlaces Lógicos:** Ordenar los enlaces de manera lógica y coherente para facilitar la navegación con el teclado.\n\n## MEJORES PRACTICAS\n\n* **Evitar Enlaces Rotos:** Verificar regularmente que todos los enlaces funcionen correctamente.\n* **Usar URLs Amigables:** Utilizar URLs descriptivas y fáciles de entender.\n* **Optimizar el Texto del Enlace:** Utilizar palabras clave relevantes en el texto del enlace para mejorar el SEO.\n* **Considerar la Experiencia del Usuario:** Asegurar que los enlaces sean fáciles de encontrar y usar en dispositivos móviles.\n\n## EJEMPLOS ADICIONALES\n\n* **Enlace con Imagen:**\n\n  ```html\n  <a href=\"https://www.ejemplo.com\">\r\n      <img src=\"logo.png\" alt=\"Logo de Ejemplo\">\r\n  </a>\n  ```\n\n* **Menú de Navegación:**\n\n  ```html\n  <nav>\r\n      <ul>\r\n          <li><a href=\"/\">Inicio</a></li>\r\n          <li><a href=\"/productos\">Productos</a></li>\r\n          <li><a href=\"/servicios\">Servicios</a></li>\r\n          <li><a href=\"/contacto\">Contacto</a></li>\r\n      </ul>\r\n  </nav>\n  ```\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<a>: The Anchor element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a)\n* [W3Schools: HTML \\<a> tag](https://www.w3schools.com/tags/tag_a.asp)\n* [WebAIM: Links and Hypertext - 2023](https://webaim.org/techniques/hypertext/)\n"
  },
  {
    "slug": "/programming/web/html/fundamental-html-tags/lists",
    "title": "Listas (UL, OL, LI)",
    "description": "Guía completa sobre cómo crear y personalizar listas en HTML utilizando las etiquetas <ul>, <ol> y <li>.",
    "content": "## INTRODUCCION A LAS LISTAS EN HTML (UL, OL, LI)\n\nLas listas son elementos fundamentales en HTML que permiten organizar y presentar información de manera estructurada.  Existen dos tipos principales de listas: listas no ordenadas (`<ul>`) y listas ordenadas (`<ol>`).  Ambos tipos utilizan la etiqueta `<li>` para definir cada elemento de la lista.  Comprender cómo utilizar estas etiquetas es esencial para crear contenido web bien organizado y fácil de leer.\n\n## OBJETIVOS CLAVE SOBRE LAS LISTAS EN HTML\n\n* **Comprender la diferencia entre listas ordenadas y no ordenadas:** Saber cuándo utilizar `<ul>` y cuándo utilizar `<ol>`.\n* **Aprender a crear listas básicas:** Utilizar las etiquetas `<ul>`, `<ol>` y `<li>` correctamente.\n* **Personalizar listas:**  Modificar el estilo de las listas utilizando atributos HTML y CSS.\n* **Anidar listas:** Crear listas dentro de listas para representar jerarquías de información.\n* **Utilizar listas para la navegación:** Implementar menús de navegación utilizando listas.\n\n## LISTAS NO ORDENADAS (`<UL>`)\n\nLas listas no ordenadas se utilizan para presentar elementos sin un orden específico.  Se representan con la etiqueta `<ul>` (unordered list) y cada elemento dentro de la lista se define con la etiqueta `<li>` (list item).  Por defecto, los elementos de una lista no ordenada se muestran con viñetas.\n\n**Ejemplo:**\n\n```html\n<ul>\r\n  <li>Elemento 1</li>\r\n  <li>Elemento 2</li>\r\n  <li>Elemento 3</li>\r\n</ul>\n```\n\n**Resultado:**\n\n* Elemento 1\n* Elemento 2\n* Elemento 3\n\n## LISTAS ORDENADAS (`<OL>`)\n\nLas listas ordenadas se utilizan para presentar elementos en un orden específico.  Se representan con la etiqueta `<ol>` (ordered list) y cada elemento dentro de la lista se define con la etiqueta `<li>` (list item).  Por defecto, los elementos de una lista ordenada se muestran con números.\n\n**Ejemplo:**\n\n```html\n<ol>\r\n  <li>Primer elemento</li>\r\n  <li>Segundo elemento</li>\r\n  <li>Tercer elemento</li>\r\n</ol>\n```\n\n**Resultado:**\n\n1. Primer elemento\n2. Segundo elemento\n3. Tercer elemento\n\n## LA ETIQUETA `<LI>`\n\nLa etiqueta `<li>` (list item) se utiliza para definir cada elemento dentro de una lista, ya sea ordenada (`<ol>`) o no ordenada (`<ul>`).  Es importante recordar que la etiqueta `<li>` siempre debe ser un hijo directo de `<ul>` o `<ol>`.\n\n**Ejemplo:**\n\n```html\n<ul>\r\n  <li>Este es un elemento de lista.</li>\r\n  <li>Este es otro elemento de lista.</li>\r\n</ul>\r\n\r\n<ol>\r\n  <li>Este es el primer elemento.</li>\r\n  <li>Este es el segundo elemento.</li>\r\n</ol>\n```\n\n## ATRIBUTOS DE LAS LISTAS ORDENADAS (`<OL>`)\n\nLa etiqueta `<ol>` permite utilizar atributos para personalizar la numeración de la lista.  Los atributos más comunes son:\n\n* **`type`:**  Especifica el tipo de marcador numérico a utilizar.  Los valores posibles son:\n  * `1`:  Números (por defecto).\n  * `a`:  Letras minúsculas.\n  * `A`:  Letras mayúsculas.\n  * `i`:  Números romanos en minúsculas.\n  * `I`:  Números romanos en mayúsculas.\n* **`start`:**  Especifica el valor inicial de la numeración.\n\n**Ejemplo:**\n\n```html\n<ol type=\"A\" start=\"3\">\r\n  <li>Elemento C</li>\r\n  <li>Elemento D</li>\r\n  <li>Elemento E</li>\r\n</ol>\n```\n\n**Resultado:**\n\nA. Elemento C\r\nB. Elemento D\r\nC. Elemento E\n\n## ANIDAMIENTO DE LISTAS\n\nEs posible anidar listas dentro de otras listas para crear estructuras jerárquicas.  Esto se logra incluyendo una lista (`<ul>` o `<ol>`) dentro de un elemento de lista (`<li>`).\n\n**Ejemplo:**\n\n```html\n<ul>\r\n  <li>Café</li>\r\n  <li>Té\r\n    <ul>\r\n      <li>Té negro</li>\r\n      <li>Té verde</li>\r\n    </ul>\r\n  </li>\r\n  <li>Leche</li>\r\n</ul>\n```\n\n**Resultado:**\n\n* Café\n* Té\n  * Té negro\n  * Té verde\n* Leche\n\n## PERSONALIZACION DE LISTAS CON CSS\n\nLas listas pueden ser personalizadas ampliamente utilizando CSS.  Algunas propiedades comunes para estilizar listas son:\n\n* **`list-style-type`:**  Especifica el tipo de marcador para las listas no ordenadas (`<ul>`) o el tipo de numeración para las listas ordenadas (`<ol>`).  Para listas no ordenadas, se pueden usar valores como `disc`, `circle`, `square` o `none`.  Para listas ordenadas, se pueden usar valores como `decimal`, `lower-alpha`, `upper-alpha`, `lower-roman` o `upper-roman`.\n* **`list-style-image`:**  Permite utilizar una imagen como marcador para las listas no ordenadas.\n* **`list-style-position`:**  Controla la posición del marcador en relación con el contenido del elemento de lista.  Los valores posibles son `inside` (el marcador se coloca dentro del elemento de lista) y `outside` (el marcador se coloca fuera del elemento de lista).\n* **`padding` y `margin`:**  Controlan el espacio alrededor de los elementos de la lista.\n\n**Ejemplo:**\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<style>\r\nul {\r\n  list-style-type: square;\r\n}\r\n\r\nol {\r\n  list-style-type: upper-roman;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n\r\n<h2>Lista no ordenada con estilo cuadrado:</h2>\r\n<ul>\r\n  <li>Café</li>\r\n  <li>Té</li>\r\n  <li>Leche</li>\r\n</ul>\r\n\r\n<h2>Lista ordenada con números romanos en mayúsculas:</h2>\r\n<ol>\r\n  <li>Café</li>\r\n  <li>Té</li>\r\n  <li>Leche</li>\r\n</ol>\r\n\r\n</body>\r\n</html>\n```\n\n**Resultado:**\n\n## LISTA NO ORDENADA CON ESTILO CUADRADO:\n\n* Café\n* Té\n* Leche\n\n## LISTA ORDENADA CON NUMEROS ROMANOS EN MAYUSCULAS:\n\nI. Café\r\nII. Té\r\nIII. Leche\n\n### LISTAS PARA LA NAVEGACION\n\nLas listas son una herramienta común para crear menús de navegación en sitios web.  Combinadas con enlaces (`<a>`) y CSS, las listas pueden transformarse en menús de navegación atractivos y funcionales.\n\n**Ejemplo:**\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<style>\r\nul {\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  overflow: hidden;\r\n  background-color: #333;\r\n}\r\n\r\nli {\r\n  float: left;\r\n}\r\n\r\nli a {\r\n  display: block;\r\n  color: white;\r\n  text-align: center;\r\n  padding: 14px 16px;\r\n  text-decoration: none;\r\n}\r\n\r\nli a:hover {\r\n  background-color: #111;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n\r\n<ul>\r\n  <li><a href=\"#home\">Inicio</a></li>\r\n  <li><a href=\"#news\">Noticias</a></li>\r\n  <li><a href=\"#contact\">Contacto</a></li>\r\n  <li><a href=\"#about\">Acerca de</a></li>\r\n</ul>\r\n\r\n</body>\r\n</html>\n```\n\nEste código crea una barra de navegación horizontal con enlaces a diferentes secciones del sitio web.  La propiedad `list-style-type: none;` elimina las viñetas de la lista, y el CSS se utiliza para estilizar los enlaces y la apariencia general del menú.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: Lists](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul)\n* [W3Schools: HTML Lists](https://www.w3schools.com/html/html_lists.asp)\n"
  },
  {
    "slug": "/programming/web/html/fundamental-html-tags/paragraphs",
    "title": "Parrafos (<p>)",
    "description": "El elemento <p> en HTML representa un párrafo de texto. Es un bloque de construcción fundamental para estructurar contenido textual en la web.",
    "content": "El elemento `<p>` en HTML es esencial para la estructura y organización del contenido textual en páginas web. Representa un párrafo, que es una unidad de texto coherente y autónoma. Los párrafos facilitan la lectura y comprensión del contenido al dividirlo en secciones lógicas.\n\n## OBJETIVOS CLAVE\n\n* **Estructuración del Contenido:** Dividir el texto en párrafos mejora la legibilidad y la organización visual del contenido.\n* **Semántica:** Proporcionar significado semántico al contenido, indicando que un bloque de texto es un párrafo.\n* **Estilo:** Facilitar la aplicación de estilos CSS específicos a los párrafos, como márgenes, fuentes y alineación.\n\n## USO BASICO\n\nEl elemento `<p>` se utiliza para envolver bloques de texto que forman un párrafo.\n\n**Ejemplo:**\n\n```html\n<p>Este es el primer párrafo de mi página web. Contiene información importante que quiero destacar.</p>\r\n<p>Este es el segundo párrafo. Aquí, desarrollo aún más las ideas presentadas en el párrafo anterior.</p>\n```\n\n## ATRIBUTOS\n\nAunque el elemento `<p>` no tiene atributos específicos que sean esenciales, puede utilizar atributos globales como `class`, `id`, y `style` para aplicar estilos y manipular el párrafo con CSS y JavaScript.\n\n**Ejemplo:**\n\n```html\n<p id=\"intro\" class=\"destacado\">Este es un párrafo introductorio con estilos específicos.</p>\n```\n\n## ESTILOS CSS\n\nLos párrafos se pueden estilizar fácilmente con CSS para mejorar su apariencia.\n\n**Ejemplo:**\n\n```css\np {\r\n  font-family: Arial, sans-serif;\r\n  font-size: 16px;\r\n  line-height: 1.5;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.destacado {\r\n  font-weight: bold;\r\n  color: blue;\r\n}\n```\n\nEn este ejemplo, todos los párrafos tendrán una fuente Arial, un tamaño de 16px, un interlineado de 1.5 y un margen inferior de 15px. Además, los párrafos con la clase \"destacado\" tendrán un estilo de fuente en negrita y color azul.\n\n## CONSIDERACIONES IMPORTANTES\n\n* **Semántica:** Utiliza el elemento `<p>` solo para párrafos de texto. No lo uses para otros tipos de contenido, como listas o encabezados.\n* **Anidamiento:** No anides elementos `<p>` dentro de otros elementos `<p>`. Esto es incorrecto y puede causar problemas de interpretación en el navegador.\n* **Etiquetas de Cierre:** Aunque HTML5 permite omitir la etiqueta de cierre `</p>` en algunos casos, es una buena práctica incluirla para asegurar la compatibilidad y claridad del código.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: PARRAFO SIMPLE\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Ejemplo de Párrafo Simple</title>\r\n</head>\r\n<body>\r\n  <p>Este es un párrafo simple de texto. Puedes usarlo para introducir información básica en tu página web.</p>\r\n</body>\r\n</html>\n```\n\n### EJEMPLO 2: PARRAFOS CON ESTILOS\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Ejemplo de Párrafos con Estilos</title>\r\n  <style>\r\n    .parrafo-destacado {\r\n      font-size: 18px;\r\n      color: green;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <p>Este es un párrafo normal.</p>\r\n  <p class=\"parrafo-destacado\">Este es un párrafo destacado con estilos CSS.</p>\r\n</body>\r\n</html>\n```\n\n### EJEMPLO 3: PARRAFOS CON ENLACES\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Ejemplo de Párrafos con Enlaces</title>\r\n</head>\r\n<body>\r\n  <p>Este es un párrafo que contiene un <a href=\"https://www.ejemplo.com\">enlace a un sitio web</a>.</p>\r\n</body>\r\n</html>\n```\n\n## MEJORES PRACTICAS\n\n1. **Claridad y Concisión:** Escribe párrafos claros y concisos que se centren en una sola idea principal.\n2. **Longitud Adecuada:** Intenta mantener los párrafos de una longitud razonable para evitar que el lector se sienta abrumado. Generalmente, entre 3 y 7 líneas es un buen rango.\n3. **Uso de Espacios en Blanco:** Utiliza espacios en blanco y saltos de línea para separar los párrafos y mejorar la legibilidad.\n4. **Revisión:** Revisa siempre tu contenido para asegurarte de que los párrafos estén bien estructurados y libres de errores.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<p>: The Paragraph element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p)\n* [W3Schools: HTML Paragraphs](https://www.w3schools.com/html/html_paragraphs.asp)\n"
  },
  {
    "slug": "/programming/web/html",
    "title": "HTML",
    "description": "Lenguaje de marcado para la estructura de contenido web.",
    "content": "## INTRODUCCION A HTML\n\nHTML (HyperText Markup Language) es el lenguaje de marcado estándar para crear páginas web. Define la estructura del contenido web, incluyendo texto, imágenes, enlaces y otros elementos multimedia. HTML no es un lenguaje de programación; en cambio, utiliza etiquetas para estructurar y presentar el contenido. Los navegadores web interpretan estas etiquetas y muestran el contenido de la página web de acuerdo con ellas.\n\n## OBJETIVOS CLAVE DE HTML\n\n* **Estructura del Contenido:** Definir la jerarquía y organización del contenido en una página web.\n* **Presentación:** Especificar cómo se debe mostrar el contenido en el navegador (aunque el estilo visual se maneja principalmente con CSS).\n* **Hipervínculos:** Crear enlaces a otras páginas web o recursos en línea.\n* **Multimedia:** Integrar imágenes, audio y video en las páginas web.\n* **Formularios:** Crear formularios para recopilar datos del usuario.\n* **Accesibilidad:** Asegurar que el contenido sea accesible para todos los usuarios, incluyendo aquellos con discapacidades.\n\n## INFORMACION RELEVANTE SOBRE HTML\n\n### ESTRUCTURA BASICA DE UN DOCUMENTO HTML\n\nUn documento HTML típico tiene la siguiente estructura básica:\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Título de la página</title>\r\n</head>\r\n<body>\r\n    <!-- Contenido de la página -->\r\n</body>\r\n</html>\n```\n\n* **`<!DOCTYPE html>`**: Declara el tipo de documento como HTML5.\n* **`<html>`**: Elemento raíz del documento HTML.\n* **`<head>`**: Contiene metadatos sobre el documento, como el título, la codificación de caracteres y enlaces a hojas de estilo.\n* **`<meta>`**: Proporciona metadatos adicionales, como la codificación de caracteres (`charset`) y la configuración de la ventana gráfica (`viewport`).\n* **`<title>`**: Define el título de la página que se muestra en la pestaña del navegador.\n* **`<body>`**: Contiene el contenido visible de la página web.\n\n### ELEMENTOS HTML\n\nLos elementos HTML están definidos por etiquetas, que consisten en un nombre de etiqueta encerrado entre corchetes angulares (`<` y `>`). La mayoría de los elementos tienen una etiqueta de apertura y una etiqueta de cierre.\n\nEjemplos de elementos HTML comunes:\n\n* **`<h1>` a `<h6>`**: Encabezados de diferentes niveles.\n* **`<p>`**: Párrafo de texto.\n* **`<a>`**: Enlace (hipervínculo).\n* **`<img>`**: Imagen.\n* **`<ul>`**: Lista no ordenada.\n* **`<ol>`**: Lista ordenada.\n* **`<li>`**: Elemento de lista.\n* **`<div>`**: Contenedor genérico.\n* **`<span>`**: Contenedor en línea genérico.\n* **`<form>`**: Formulario para recopilar datos del usuario.\n* **`<input>`**: Campo de entrada de formulario.\n* **`<button>`**: Botón.\n* **`<textarea>`**: Área de texto para entrada de texto multilínea.\n* **`<select>`**: Menú desplegable.\n* **`<table>`**: Tabla.\n* **`<tr>`**: Fila de tabla.\n* **`<td>`**: Celda de tabla.\n* **`<header>`**: Encabezado de sección.\n* **`<nav>`**: Sección de navegación.\n* **`<article>`**: Artículo independiente.\n* **`<aside>`**: Contenido secundario.\n* **`<footer>`**: Pie de página.\n\n### ATRIBUTOS HTML\n\nLos atributos proporcionan información adicional sobre los elementos HTML. Se especifican en la etiqueta de apertura y consisten en un nombre y un valor.\n\nEjemplos de atributos HTML comunes:\n\n* **`class`**: Define una clase CSS para aplicar estilos.\n* **`id`**: Define un identificador único para el elemento.\n* **`src`**: Especifica la URL de una imagen (para el elemento `<img>`).\n* **`href`**: Especifica la URL de un enlace (para el elemento `<a>`).\n* **`alt`**: Proporciona texto alternativo para una imagen (importante para la accesibilidad).\n* **`title`**: Proporciona un título para el elemento (que se muestra como información sobre herramientas).\n* **`style`**: Permite aplicar estilos CSS directamente al elemento (aunque generalmente se recomienda usar hojas de estilo externas).\n* **`width`**: Define el ancho de un elemento (como una imagen).\n* **`height`**: Define la altura de un elemento.\n* **`name`**: Especifica el nombre de un elemento de formulario.\n* **`value`**: Especifica el valor de un elemento de formulario.\n* **`type`**: Especifica el tipo de un elemento de formulario (por ejemplo, \"text\", \"email\", \"password\", \"submit\").\n* **`placeholder`**: Proporciona un texto de marcador de posición en un campo de formulario.\n* **`required`**: Indica que un campo de formulario es obligatorio.\n* **`disabled`**: Desactiva un elemento de formulario.\n\n### SEMANTICA HTML\n\nLa semántica HTML se refiere al uso de etiquetas HTML para dar significado al contenido de una página web, en lugar de simplemente definir su apariencia visual. El uso de etiquetas semánticas mejora la accesibilidad, el SEO (Search Engine Optimization) y la comprensión del código.\n\nEjemplos de etiquetas semánticas:\n\n* **`<article>`**: Representa un artículo independiente en un documento, como una publicación de blog o una noticia.\n* **`<aside>`**: Representa contenido relacionado pero secundario al contenido principal, como una barra lateral.\n* **`<nav>`**: Representa una sección de navegación en un documento.\n* **`<header>`**: Representa el encabezado de una sección o página.\n* **`<footer>`**: Representa el pie de página de una sección o página.\n* **`<main>`**: Representa el contenido principal de un documento.\n* **`<section>`**: Representa una sección genérica de un documento.\n* **`<figure>` y `<figcaption>`**: Se utilizan para agrupar una imagen con su leyenda.\n* **`<time>`**: Representa una fecha y/o hora.\n* **`<mark>`**: Representa texto resaltado.\n* **`<details>` y `<summary>`**: Se utilizan para crear un widget de detalles desplegable.\n\n### ACCESIBILIDAD WEB\n\nLa accesibilidad web se refiere a la práctica de diseñar y desarrollar sitios web que sean utilizables por personas con discapacidades. HTML juega un papel crucial en la accesibilidad web al proporcionar la estructura y la semántica necesarias para que las tecnologías de asistencia (como los lectores de pantalla) interpreten y presenten el contenido de manera significativa.\n\nPrincipios clave de accesibilidad HTML:\n\n* **Texto alternativo para imágenes:** Utilizar el atributo `alt` en las etiquetas `<img>` para proporcionar una descripción textual de la imagen.\n* **Estructura de encabezados adecuada:** Utilizar los encabezados (`<h1>` a `<h6>`) en orden lógico para estructurar el contenido.\n* **Etiquetas semánticas:** Utilizar etiquetas semánticas para dar significado al contenido.\n* **Formularios accesibles:** Asegurarse de que los formularios sean accesibles proporcionando etiquetas claras y utilizando los atributos apropiados (como `aria-label` y `aria-describedby`).\n* **Contraste de color adecuado:** Asegurarse de que haya suficiente contraste entre el texto y el fondo para que el contenido sea legible.\n* **Navegación por teclado:** Asegurarse de que todos los elementos interactivos sean accesibles a través del teclado.\n\n### HTML5 Y NUEVAS CARACTERISTICAS\n\nHTML5 es la última versión principal de HTML y ha introducido muchas nuevas características y mejoras, incluyendo:\n\n* **Nuevas etiquetas semánticas:** Como `<article>`, `<aside>`, `<nav>`, `<header>`, `<footer>`, `<main>`, `<section>`.\n* **Soporte multimedia mejorado:** Elementos `<audio>` y `<video>` para integrar audio y video sin necesidad de plugins.\n* **Canvas:** Elemento `<canvas>` para dibujar gráficos dinámicos mediante JavaScript.\n* **APIs:** Nuevas APIs para acceder a características del dispositivo, como la geolocalización y el almacenamiento local.\n* **Formularios mejorados:** Nuevos tipos de input (como `email`, `date`, `number`) y atributos de validación.\n* **WebSockets:** Para comunicación bidireccional en tiempo real entre el cliente y el servidor.\n* **Web Storage:** Para almacenar datos localmente en el navegador del usuario.\n\n## PROCESO DE INSTALACION\n\nHTML no requiere instalación. Simplemente necesitas un editor de texto para escribir el código HTML y un navegador web para visualizarlo.\n\n1. **Editor de texto:** Puedes utilizar cualquier editor de texto básico (como Notepad en Windows o TextEdit en macOS), o un editor de código más avanzado como Visual Studio Code, Sublime Text, Atom, etc.\n2. **Navegador web:** La mayoría de los sistemas operativos vienen con un navegador web preinstalado (como Chrome, Firefox, Safari, Edge).\n\nPara crear y visualizar una página HTML:\n\n1. Abre tu editor de texto.\n2. Escribe el código HTML.\n3. Guarda el archivo con la extensión `.html` (por ejemplo, `index.html`).\n4. Abre el archivo `.html` en tu navegador web.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs - HTML](https://developer.mozilla.org/es/docs/Web/HTML)\n* [W3Schools - HTML Tutorial](https://www.w3schools.com/html/)\n* [HTML.com - HTML Tutorial](https://html.com/)\n* [freeCodeCamp - HTML Tutorial](https://www.freecodecamp.org/news/html-tutorial-for-beginners/)\n"
  },
  {
    "slug": "/programming/web/html/introduction-to-html",
    "title": "Introduccion a HTML",
    "description": "",
    "content": "***\n\ntitle: Introdicción a HTML\r\ndescription:  Introducción a HTML, el lenguaje de marcado estándar para la creación de páginas web.\r\nkeywords: \\[\"HTML\", \"lenguaje de marcado\", \"páginas web\", \"estructura web\", \"elementos HTML\", \"atributos HTML\"]\n---------------------------------------------------------------------------------------------------------------\n\nHTML (HyperText Markup Language) es el lenguaje de marcado estándar para crear páginas web. Define la estructura del contenido de una página web utilizando una serie de elementos, que indican cómo deben mostrarse los diferentes componentes, como encabezados, párrafos, imágenes y enlaces.\n\n## HISTORIA DE HTML\n\nHTML fue creado por Tim Berners-Lee, un científico de la computación británico, en 1990 mientras trabajaba en el CERN (Organización Europea para la Investigación Nuclear). Berners-Lee buscaba una forma de compartir información entre investigadores de manera más eficiente. Propuso un sistema de hipertexto que permitiera a los usuarios navegar entre documentos mediante enlaces.\n\nLa primera especificación pública de HTML, conocida como HTML 0.9, se publicó en 1991. A lo largo de los años, HTML ha evolucionado a través de varias versiones, cada una con nuevas características y mejoras. Algunas de las versiones más importantes incluyen:\n\n* **HTML 2.0 (1995):** Primera especificación estandarizada por el IETF (Internet Engineering Task Force).\n* **HTML 3.2 (1997):** Incorporó características como tablas y applets.\n* **HTML 4.01 (1999):** Introdujo soporte para hojas de estilo en cascada (CSS) y scripting.\n* **XHTML 1.0 (2000):** Reformulación de HTML en XML, buscando una mayor rigurosidad sintáctica.\n* **HTML5 (2014):** La versión más reciente y ampliamente utilizada, que incluye soporte para multimedia, gráficos vectoriales y aplicaciones web.\n\n## OBJETIVOS CLAVE DE HTML\n\n1. **Estructurar el contenido:** HTML proporciona una manera de organizar y estructurar el contenido de una página web, utilizando elementos como encabezados, párrafos, listas y tablas.\n2. **Crear hipervínculos:** Permite crear enlaces entre diferentes páginas web, facilitando la navegación y el acceso a la información.\n3. **Insertar multimedia:** Facilita la inclusión de imágenes, audio y video en las páginas web, enriqueciendo la experiencia del usuario.\n4. **Definir la presentación:** Aunque la presentación visual se maneja principalmente con CSS, HTML permite definir atributos básicos de estilo y formato.\n5. **Compatibilidad:** HTML está diseñado para ser compatible con una amplia variedad de navegadores y dispositivos, asegurando que las páginas web sean accesibles para todos los usuarios.\n\n## INFORMACION RELEVANTE SOBRE HTML\n\n### ELEMENTOS HTML\n\nUn elemento HTML se compone de una etiqueta de inicio, contenido y una etiqueta de cierre. Las etiquetas están encerradas entre corchetes angulares (`<` y `>`). Por ejemplo:\n\n```html\n<p>Este es un párrafo.</p>\n```\n\nAlgunos elementos son elementos vacíos y no tienen etiqueta de cierre, como `<br>` (salto de línea) o `<img>` (imagen).\n\n### ATRIBUTOS HTML\n\nLos atributos proporcionan información adicional sobre los elementos HTML. Se especifican en la etiqueta de inicio y consisten en un nombre y un valor. Por ejemplo:\n\n```html\n<img src=\"imagen.jpg\" alt=\"Descripción de la imagen\">\n```\n\nEn este caso, `src` es el atributo que especifica la URL de la imagen, y `alt` proporciona un texto alternativo para la imagen.\n\n### ESTRUCTURA BASICA DE UN DOCUMENTO HTML\n\nUn documento HTML típico tiene la siguiente estructura:\n\n```html\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Título de la página</title>\r\n</head>\r\n<body>\r\n    <h1>Encabezado principal</h1>\r\n    <p>Este es un párrafo de texto.</p>\r\n</body>\r\n</html>\n```\n\n* `<!DOCTYPE html>`: Define el tipo de documento como HTML5.\n* `<html>`: Elemento raíz que contiene todo el contenido de la página.\n* `<head>`: Contiene metadatos sobre el documento, como el título, la codificación de caracteres y las hojas de estilo.\n* `<meta>`: Proporciona información adicional sobre el documento, como la codificación de caracteres (`charset=\"UTF-8\"`) y la configuración de la ventana gráfica (`viewport`).\n* `<title>`: Define el título de la página que se muestra en la pestaña del navegador.\n* `<body>`: Contiene el contenido visible de la página, como encabezados, párrafos, imágenes y enlaces.\n\n### SEMANTICA HTML\n\nHTML5 introdujo elementos semánticos que describen el significado del contenido. Estos elementos ayudan a los motores de búsqueda y a los lectores de pantalla a entender la estructura y el propósito del contenido. Algunos ejemplos incluyen:\n\n* `<article>`: Representa un artículo independiente en un documento.\n* `<aside>`: Representa contenido relacionado pero separado del contenido principal.\n* `<nav>`: Define una sección de navegación.\n* `<header>`: Define la cabecera de un documento o sección.\n* `<footer>`: Define el pie de página de un documento o sección.\n* `<section>`: Define una sección genérica en un documento.\n\n## PROCESO DE INSTALACION\n\nHTML no requiere instalación, ya que es un lenguaje de marcado interpretado por los navegadores web. Para empezar a escribir código HTML, solo necesitas un editor de texto (como Visual Studio Code, Sublime Text o Notepad++) y un navegador web (como Chrome, Firefox o Safari).\n\n1. **Editor de texto:** Abre tu editor de texto preferido.\n2. **Escribe el código HTML:** Escribe la estructura básica de un documento HTML.\n3. **Guarda el archivo:** Guarda el archivo con la extensión `.html` (por ejemplo, `index.html`).\n4. **Abre el archivo en el navegador:** Abre el archivo HTML en tu navegador web para ver el resultado.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs - HTML](https://developer.mozilla.org/es/docs/Web/HTML)\n* [W3Schools - HTML Tutorial](https://www.w3schools.com/html/)\n* [HTML.com - Learn HTML](https://html.com/)\n"
  },
  {
    "slug": "/programming/web/html/tables-in-html",
    "title": "Tablas en HTML",
    "description": "Guía completa sobre cómo crear y estructurar tablas en HTML para presentar datos de manera organizada y accesible.",
    "content": "## INTRODUCCION A LAS TABLAS EN HTML\n\nLas tablas en HTML son una herramienta fundamental para organizar y presentar datos de manera estructurada en la web. Permiten mostrar información en filas y columnas, facilitando la comparación y el análisis de datos. Aunque en el pasado se utilizaban para el diseño de páginas web, su uso principal hoy en día es la presentación de datos tabulares.\n\n## OBJETIVOS CLAVE\n\n* **Comprender la estructura básica de una tabla HTML:** Aprender a utilizar los elementos `<table>`, `<tr>`, `<th>` y `<td>` para definir la estructura de la tabla.\n* **Crear tablas accesibles:** Implementar atributos y prácticas que mejoren la accesibilidad de las tablas para usuarios con discapacidades.\n* **Aplicar estilos a las tablas:** Utilizar CSS para mejorar la apariencia visual de las tablas y hacerlas más atractivas.\n* **Utilizar características avanzadas de las tablas:** Explorar atributos como `colspan`, `rowspan`, `<thead>`, `<tbody>` y `<tfoot>` para crear tablas más complejas y semánticas.\n\n## ESTRUCTURA BASICA DE UNA TABLA\n\nLa estructura básica de una tabla en HTML se define mediante los siguientes elementos:\n\n* `<table>`: Define la tabla. Es el contenedor principal de todos los demás elementos de la tabla.\n* `<tr>`: Define una fila de la tabla (Table Row).\n* `<th>`: Define una celda de encabezado (Table Header). Se utiliza para los encabezados de las columnas o filas.\n* `<td>`: Define una celda de datos (Table Data). Contiene los datos que se muestran en la tabla.\n\nA continuación, se muestra un ejemplo de una tabla básica:\n\n```html\n<table>\r\n  <tr>\r\n    <th>Nombre</th>\r\n    <th>Edad</th>\r\n    <th>Profesión</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Juan Pérez</td>\r\n    <td>30</td>\r\n    <td>Ingeniero</td>\r\n  </tr>\r\n  <tr>\r\n    <td>María García</td>\r\n    <td>25</td>\r\n    <td>Abogada</td>\r\n  </tr>\r\n</table>\n```\n\nEste código HTML generará una tabla con tres columnas (Nombre, Edad, Profesión) y dos filas de datos.\n\n## ATRIBUTOS IMPORTANTES\n\nExisten varios atributos que se pueden utilizar para personalizar y mejorar la funcionalidad de las tablas:\n\n* `border`: Define el borde de la tabla. Aunque se puede usar, es preferible utilizar CSS para estilizar los bordes.\n* `colspan`: Especifica cuántas columnas debe ocupar una celda.\n* `rowspan`: Especifica cuántas filas debe ocupar una celda.\n* `width`: Define el ancho de la tabla. Es preferible utilizar CSS para definir el ancho.\n* `summary`: Proporciona un resumen del contenido de la tabla para mejorar la accesibilidad.\n\nEjemplo de uso de `colspan` y `rowspan`:\n\n```html\n<table>\r\n  <tr>\r\n    <th colspan=\"3\">Información Personal</th>\r\n  </tr>\r\n  <tr>\r\n    <th>Nombre</th>\r\n    <th>Edad</th>\r\n    <th>Profesión</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Juan Pérez</td>\r\n    <td>30</td>\r\n    <td rowspan=\"2\">Ingeniero</td>\r\n  </tr>\r\n  <tr>\r\n    <td>María García</td>\r\n    <td>25</td>\r\n  </tr>\r\n</table>\n```\n\nEn este ejemplo, la celda \"Información Personal\" ocupa tres columnas gracias al atributo `colspan=\"3\"`. La celda \"Ingeniero\" ocupa dos filas gracias al atributo `rowspan=\"2\"`.\n\n## ACCESIBILIDAD EN LAS TABLAS\n\nLa accesibilidad es un aspecto crucial al crear tablas HTML. Para asegurar que las tablas sean accesibles para todos los usuarios, incluyendo aquellos que utilizan lectores de pantalla, se deben seguir las siguientes prácticas:\n\n* **Utilizar el elemento `<th>` para los encabezados:** Esto permite a los lectores de pantalla identificar las celdas de encabezado y asociarlas con las celdas de datos correspondientes.\n* **Utilizar el atributo `scope` en los elementos `<th>`:** El atributo `scope` especifica si el encabezado se aplica a una columna (`col`) o a una fila (`row`).\n\n```html\n<table>\r\n  <tr>\r\n    <th scope=\"col\">Nombre</th>\r\n    <th scope=\"col\">Edad</th>\r\n    <th scope=\"col\">Profesión</th>\r\n  </tr>\r\n  <tr>\r\n    <th scope=\"row\">Juan Pérez</th>\r\n    <td>30</td>\r\n    <td>Ingeniero</td>\r\n  </tr>\r\n  <tr>\r\n    <th scope=\"row\">María García</th>\r\n    <td>25</td>\r\n    <td>Abogada</td>\r\n  </tr>\r\n</table>\n```\n\n* **Utilizar el atributo `<caption>` para proporcionar un título a la tabla:** El elemento `<caption>` proporciona un título descriptivo para la tabla, lo que ayuda a los usuarios a entender el propósito de la tabla.\n\n```html\n<table>\r\n  <caption>Información de Empleados</caption>\r\n  <tr>\r\n    <th scope=\"col\">Nombre</th>\r\n    <th scope=\"col\">Edad</th>\r\n    <th scope=\"col\">Profesión</th>\r\n  </tr>\r\n  <tr>\r\n    <th scope=\"row\">Juan Pérez</th>\r\n    <td>30</td>\r\n    <td>Ingeniero</td>\r\n  </tr>\r\n  <tr>\r\n    <th scope=\"row\">María García</th>\r\n    <td>25</td>\r\n    <td>Abogada</td>\r\n  </tr>\r\n</table>\n```\n\n* **Utilizar los elementos `<thead>`, `<tbody>` y `<tfoot>`:** Estos elementos permiten estructurar la tabla en secciones lógicas, lo que facilita la navegación y la comprensión de la tabla.\n\n```html\n<table>\r\n  <caption>Información de Empleados</caption>\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">Nombre</th>\r\n      <th scope=\"col\">Edad</th>\r\n      <th scope=\"col\">Profesión</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th scope=\"row\">Juan Pérez</th>\r\n      <td>30</td>\r\n      <td>Ingeniero</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">María García</th>\r\n      <td>25</td>\r\n      <td>Abogada</td>\r\n    </tr>\r\n  </tbody>\r\n  <tfoot>\r\n    <tr>\r\n      <td colspan=\"3\">Total de empleados: 2</td>\r\n    </tr>\r\n  </tfoot>\r\n</table>\n```\n\n## ESTILOS CSS PARA TABLAS\n\nEl uso de CSS es fundamental para mejorar la apariencia visual de las tablas. Algunos estilos comunes incluyen:\n\n* **Bordes:** Se pueden definir bordes para la tabla, las celdas de encabezado y las celdas de datos.\n\n```css\ntable, th, td {\r\n  border: 1px solid black;\r\n  border-collapse: collapse; /* Para combinar los bordes */\r\n}\n```\n\n* **Padding:** Define el espacio entre el contenido de la celda y el borde.\n\n```css\nth, td {\r\n  padding: 8px;\r\n}\n```\n\n* **Alineación del texto:** Se puede alinear el texto dentro de las celdas.\n\n```css\nth, td {\r\n  text-align: left; /* Alinea el texto a la izquierda */\r\n}\n```\n\n* **Colores de fondo:** Se pueden definir colores de fondo para la tabla, las celdas de encabezado y las celdas de datos.\n\n```css\nth {\r\n  background-color: #f2f2f2; /* Color de fondo gris claro */\r\n}\n```\n\n* **Estilos de fuente:** Se pueden definir estilos de fuente para el texto dentro de las celdas.\n\n```css\nth {\r\n  font-weight: bold; /* Texto en negrita */\r\n}\n```\n\n## EJEMPLO COMPLETO CON CSS\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<style>\r\ntable {\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n}\r\n\r\nth, td {\r\n  border: 1px solid black;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\nth {\r\n  background-color: #f2f2f2;\r\n  font-weight: bold;\r\n}\r\n\r\ncaption {\r\n  caption-side: bottom;\r\n  font-style: italic;\r\n  padding-top: 10px;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n\r\n<h2>Tabla de Empleados</h2>\r\n\r\n<table>\r\n  <caption>Información detallada de los empleados</caption>\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">Nombre</th>\r\n      <th scope=\"col\">Edad</th>\r\n      <th scope=\"col\">Profesión</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th scope=\"row\">Juan Pérez</th>\r\n      <td>30</td>\r\n      <td>Ingeniero</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">María García</th>\r\n      <td>25</td>\r\n      <td>Abogada</td>\r\n    </tr>\r\n  </tbody>\r\n  <tfoot>\r\n    <tr>\r\n      <td colspan=\"3\">Total de empleados: 2</td>\r\n    </tr>\r\n  </tfoot>\r\n</table>\r\n\r\n</body>\r\n</html>\n```\n\n## CONCLUSION\n\nLas tablas en HTML son una herramienta esencial para la presentación de datos estructurados en la web. Comprender su estructura básica, atributos y cómo aplicar estilos CSS es fundamental para crear tablas accesibles y visualmente atractivas. Al seguir las prácticas recomendadas de accesibilidad, se asegura que todos los usuarios puedan acceder y comprender la información presentada en las tablas.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<table> element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table)\n* [W3Schools: HTML Tables](https://www.w3schools.com/html/html_tables.asp)\n* [WebAIM: Creating Accessible Tables](https://webaim.org/techniques/tables/)\n"
  },
  {
    "slug": "/programming/web/html/tables-in-html/table-attributes",
    "title": "Atributos de Tabla (colspan, rowspan)",
    "description": "Explicación detallada de los atributos colspan y rowspan en HTML para la creación de tablas complejas.",
    "content": "## ATRIBUTOS COLSPAN Y ROWSPAN EN TABLAS HTML\n\nLos atributos `colspan` y `rowspan` son herramientas poderosas en HTML que permiten crear tablas con celdas que se extienden a lo largo de varias columnas o filas, respectivamente. Estos atributos son fundamentales para diseñar tablas complejas y presentar datos de manera clara y organizada.\n\n## OBJETIVOS CLAVE\n\n* Entender el propósito y la funcionalidad de los atributos `colspan` y `rowspan`.\n* Aprender a utilizar estos atributos para crear diseños de tabla personalizados.\n* Comprender cómo estos atributos afectan la estructura y la presentación de los datos en una tabla.\n* Proporcionar ejemplos prácticos de implementación para facilitar la comprensión.\n\n## COLSPAN: COMBINAR COLUMNAS\n\nEl atributo `colspan` se utiliza en la etiqueta `<td>` (celda de datos) o `<th>` (celda de encabezado) para especificar cuántas columnas debe abarcar una celda. El valor de `colspan` es un número entero que indica el número de columnas que la celda debe ocupar.\n\n### SINTAXIS COLSPAN\n\n```html\n<td colspan=\"numero_de_columnas\">Contenido de la celda</td>\r\n<th colspan=\"numero_de_columnas\">Contenido del encabezado</th>\n```\n\n### EJEMPLO COLSPAN\n\nEn este ejemplo, la primera celda de la primera fila abarca dos columnas:\n\n```html\n<table>\r\n  <tr>\r\n    <th colspan=\"2\">Información Personal</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Nombre:</td>\r\n    <td>Juan Pérez</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Edad:</td>\r\n    <td>30</td>\r\n  </tr>\r\n</table>\n```\n\nEn este caso, el encabezado \"Información Personal\" se extiende sobre las dos columnas siguientes, proporcionando un título claro para los datos que se presentan debajo.\n\n## ROWSPAN: COMBINAR FILAS\n\nEl atributo `rowspan` se utiliza de manera similar a `colspan`, pero en lugar de combinar columnas, combina filas. Se aplica a las etiquetas `<td>` o `<th>` y especifica cuántas filas debe abarcar una celda.\n\n### SINTAXIS ROWSPAN\n\n```html\n<td rowspan=\"numero_de_filas\">Contenido de la celda</td>\r\n<th rowspan=\"numero_de_filas\">Contenido del encabezado</th>\n```\n\n### EJEMPLO ROWSPAN\n\nEn este ejemplo, la primera celda de la primera fila abarca dos filas:\n\n```html\n<table>\r\n  <tr>\r\n    <th rowspan=\"2\">Datos</th>\r\n    <td>Nombre:</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Juan Pérez</td>\r\n  </tr>\r\n</table>\n```\n\nAquí, la celda de encabezado \"Datos\" se extiende sobre las dos filas siguientes, lo que puede ser útil para etiquetar un conjunto de datos relacionados.\n\n## EJEMPLO COMPLETO: USO DE COLSPAN Y ROWSPAN COMBINADOS\n\nPara ilustrar cómo se pueden utilizar `colspan` y `rowspan` juntos, consideremos el siguiente ejemplo:\n\n```html\n<table>\r\n  <tr>\r\n    <th colspan=\"3\">Horario de Clases</th>\r\n  </tr>\r\n  <tr>\r\n    <th>Hora</th>\r\n    <th>Lunes</th>\r\n    <th>Martes</th>\r\n  </tr>\r\n  <tr>\r\n    <td>8:00 - 9:00</td>\r\n    <td>Matemáticas</td>\r\n    <td rowspan=\"2\">Historia</td>\r\n  </tr>\r\n  <tr>\r\n    <td>9:00 - 10:00</td>\r\n    <td>Ciencias</td>\r\n  </tr>\r\n</table>\n```\n\nEn este ejemplo:\n\n* La celda de encabezado \"Horario de Clases\" abarca tres columnas (`colspan=\"3\"`).\n* La celda \"Historia\" abarca dos filas (`rowspan=\"2\"`), indicando que la clase de Historia se extiende por dos horas en el día martes.\n\n## CONSIDERACIONES IMPORTANTES\n\n1. **Estructura de la Tabla:** Al usar `colspan` y `rowspan`, es crucial mantener una estructura de tabla coherente. Asegúrate de que el número total de celdas en cada fila (teniendo en cuenta los atributos `colspan`) sea consistente.\n2. **Accesibilidad:** Asegúrate de que las tablas complejas sean accesibles. Utiliza encabezados de tabla (`<th>`) adecuadamente y proporciona atributos `scope` para mejorar la navegación para los usuarios de lectores de pantalla.\n3. **Diseño Responsivo:** Las tablas pueden ser difíciles de manejar en dispositivos móviles. Considera utilizar técnicas de diseño responsivo, como la reorganización de las celdas o la conversión de la tabla en una lista, para mejorar la experiencia del usuario en pantallas más pequeñas.\n\n## CONCLUSION\n\nLos atributos `colspan` y `rowspan` son herramientas esenciales para crear tablas HTML complejas y bien estructuradas. Permiten combinar celdas horizontal y verticalmente, lo que facilita la presentación de datos de manera clara y organizada. Al comprender y utilizar estos atributos de manera efectiva, puedes mejorar significativamente la usabilidad y la presentación de tus tablas HTML.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<table> element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table)\n* [W3Schools: HTML Tables](https://www.w3schools.com/html/html_tables.asp)\n"
  },
  {
    "slug": "/programming/web/html/tables-in-html/table-data-cells",
    "title": "CELDAS DE DATOS (<td>)",
    "description": "Explicación detallada del elemento HTML <td>, utilizado para definir celdas dentro de una tabla.",
    "content": "El elemento HTML `<td>` (table data cell) se utiliza para definir una celda que contiene datos dentro de una tabla. Es un elemento esencial en la estructura de tablas HTML, ya que organiza la información en filas y columnas, facilitando la presentación de datos tabulares de manera clara y estructurada.\n\n## OBJETIVOS CLAVE SOBRE EL ELEMENTO `<td>`\n\n1. **Contener Datos:** El objetivo principal de `<td>` es albergar datos que pertenecen a una tabla. Estos datos pueden ser texto, imágenes, enlaces, o incluso otros elementos HTML.\n\n2. **Estructurar Tablas:** `<td>` ayuda a definir la estructura de una tabla, organizando los datos en filas y columnas. Cada `<td>` representa una celda en una fila específica.\n\n3. **Facilitar la Presentación:** Al utilizar `<td>`, los desarrolladores pueden presentar datos de manera organizada y fácil de entender para los usuarios.\n\nEl elemento `<td>` debe estar contenido dentro de un elemento `<tr>` (table row), que define una fila en la tabla. A su vez, el elemento `<tr>` debe estar dentro de un elemento `<table>`.\n\n## ATRIBUTOS COMUNES DE `<td>`\n\n* **`colspan`**: Especifica el número de columnas que debe ocupar la celda. Por ejemplo, `colspan=\"2\"` hará que la celda ocupe el espacio de dos columnas.\n* **`rowspan`**: Especifica el número de filas que debe ocupar la celda. Por ejemplo, `rowspan=\"2\"` hará que la celda ocupe el espacio de dos filas.\n* **`headers`**: Especifica una lista de IDs de elementos `<th>` (table header) que proporcionan encabezados para la celda. Esto es útil para la accesibilidad, especialmente en tablas complejas.\n* **`align`**: Especifica la alineación horizontal del contenido dentro de la celda. Los valores posibles son `left`, `right`, `center`, `justify`.  **Nota:** Este atributo está obsoleto en HTML5 y se recomienda usar CSS en su lugar.\n* **`valign`**: Especifica la alineación vertical del contenido dentro de la celda. Los valores posibles son `top`, `middle`, `bottom`, `baseline`.  **Nota:** Este atributo está obsoleto en HTML5 y se recomienda usar CSS en su lugar.\n* **`width`**: Especifica el ancho de la celda.  **Nota:** Este atributo está obsoleto en HTML5 y se recomienda usar CSS en su lugar.\n* **`height`**: Especifica la altura de la celda.  **Nota:** Este atributo está obsoleto en HTML5 y se recomienda usar CSS en su lugar.\n\n## EJEMPLOS DE IMPLEMENTACIÓN\n\n**Ejemplo 1: Tabla básica con `<td>`**\n\n```html\n<table>\r\n  <tr>\r\n    <th>Nombre</th>\r\n    <th>Edad</th>\r\n    <th>Profesión</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Juan Pérez</td>\r\n    <td>30</td>\r\n    <td>Ingeniero</td>\r\n  </tr>\r\n  <tr>\r\n    <td>María López</td>\r\n    <td>25</td>\r\n    <td>Doctora</td>\r\n  </tr>\r\n</table>\n```\n\nEn este ejemplo, cada `<td>` contiene datos específicos para cada columna (Nombre, Edad, Profesión) en cada fila.\n\n**Ejemplo 2: Uso de `colspan`**\n\n```html\n<table>\r\n  <tr>\r\n    <th>Nombre</th>\r\n    <th colspan=\"2\">Información de Contacto</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Juan Pérez</td>\r\n    <td>Email: juan@example.com</td>\r\n    <td>Teléfono: 123-456-7890</td>\r\n  </tr>\r\n</table>\n```\n\nAquí, el encabezado \"Información de Contacto\" ocupa dos columnas gracias al atributo `colspan=\"2\"`.\n\n**Ejemplo 3: Uso de `rowspan`**\n\n```html\n<table>\r\n  <tr>\r\n    <th>Nombre</th>\r\n    <td>Juan Pérez</td>\r\n  </tr>\r\n  <tr>\r\n    <th rowspan=\"2\">Teléfono</th>\r\n    <td>Casa: 123-456-7890</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Móvil: 987-654-3210</td>\r\n  </tr>\r\n</table>\n```\n\nEn este caso, el encabezado \"Teléfono\" ocupa dos filas gracias al atributo `rowspan=\"2\"`.\n\n**Ejemplo 4: Atributos de alineación (obsoletos, usar CSS en su lugar)**\n\nAunque los atributos `align` y `valign` están obsoletos, es importante saber cómo funcionaban para entender código antiguo:\n\n```html\n<table>\r\n  <tr>\r\n    <th>Nombre</th>\r\n    <th>Edad</th>\r\n  </tr>\r\n  <tr>\r\n    <td align=\"center\">Juan Pérez</td>\r\n    <td valign=\"middle\">30</td>\r\n  </tr>\r\n</table>\n```\n\nPara lograr la misma alineación con CSS, se puede hacer lo siguiente:\n\n```html\n<style>\r\n  td {\r\n    text-align: center; /* Alineación horizontal */\r\n    vertical-align: middle; /* Alineación vertical */\r\n  }\r\n</style>\r\n\r\n<table>\r\n  <tr>\r\n    <th>Nombre</th>\r\n    <th>Edad</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Juan Pérez</td>\r\n    <td>30</td>\r\n  </tr>\r\n</table>\n```\n\n## MEJORES PRÁCTICAS\n\n1. **Usar CSS para Estilos:** Evitar el uso de atributos de estilo obsoletos como `align`, `valign`, `width`, y `height`. En su lugar, utilizar CSS para controlar la apariencia de las celdas.\n\n2. **Accesibilidad:** Utilizar el atributo `headers` para relacionar celdas de datos con sus encabezados correspondientes, especialmente en tablas complejas.\n\n3. **Estructura Semántica:** Asegurarse de que la estructura de la tabla sea lógica y semántica. Utilizar `<th>` para los encabezados de las columnas y filas, y `<td>` para los datos.\n\n4. **Validación:** Validar el código HTML para asegurarse de que las tablas estén correctamente estructuradas y que no haya errores de sintaxis.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<td>: The Table Data Cell element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td)\n* [W3Schools: HTML \\<td> tag](https://www.w3schools.com/tags/tag_td.asp)\n* [HTML Table Tutorial](https://www.htmldog.com/guides/html/tables/)\n"
  },
  {
    "slug": "/programming/web/html/tables-in-html/table-headers",
    "title": "Encabezados de Columna (<th>)",
    "description": "Explicación detallada del elemento HTML <th>, su uso, atributos y mejores prácticas para la creación de tablas accesibles y semánticamente correctas.",
    "content": "El elemento HTML `<th>` (table header cell) define una celda como encabezado en una tabla.  A diferencia de las celdas de datos estándar (`<td>`), los encabezados de columna se utilizan para proporcionar contexto y descripción para las columnas de la tabla.  El uso correcto de `<th>` es crucial para la accesibilidad y la semántica de las tablas HTML.\n\n## OBJETIVOS CLAVE SOBRE EL TEMA\n\n* **Semántica:** Utilizar `<th>` para indicar claramente qué celdas actúan como encabezados de columna.\n* **Accesibilidad:**  Asegurar que los lectores de pantalla puedan interpretar correctamente la estructura de la tabla y asociar los datos con sus encabezados correspondientes.\n* **Estilo:**  Comprender cómo los navegadores aplican estilos por defecto a los elementos `<th>` y cómo personalizar estos estilos con CSS.\n* **Atributo `scope`:**  Utilizar el atributo `scope` para especificar el alcance del encabezado (columna, fila, grupo de columnas o grupo de filas).\n\n## ESTRUCTURA BASICA\n\nUn elemento `<th>` se utiliza dentro de una fila (`<tr>`) dentro de una tabla (`<table>`).  Generalmente, los encabezados de columna se colocan en la primera fila de la tabla, dentro del elemento `<thead>`.\n\n```html\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Nombre</th>\r\n      <th>Edad</th>\r\n      <th>Profesión</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Juan Pérez</td>\r\n      <td>30</td>\r\n      <td>Ingeniero</td>\r\n    </tr>\r\n    <tr>\r\n      <td>María García</td>\r\n      <td>25</td>\r\n      <td>Doctora</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\n```\n\nEn este ejemplo, `Nombre`, `Edad` y `Profesión` son los encabezados de las columnas correspondientes.\n\n## ATRIBUTOS IMPORTANTES\n\nEl atributo más importante para `<th>` es `scope`.  Este atributo ayuda a los lectores de pantalla a entender a qué celdas de datos se aplica el encabezado.\n\n* **`scope=\"col\"`:**  Indica que el encabezado se aplica a todas las celdas de la columna actual.\n* **`scope=\"row\"`:**  Indica que el encabezado se aplica a todas las celdas de la fila actual.\n* **`scope=\"colgroup\"`:** Indica que el encabezado se aplica a un grupo de columnas.  Este valor se usa con el elemento `<colgroup>`.\n* **`scope=\"rowgroup\"`:** Indica que el encabezado se aplica a un grupo de filas.  Este valor se usa con los elementos `<thead>`, `<tbody>` y `<tfoot>`.\n\n**Ejemplo con `scope=\"col\"`:**\n\n```html\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">Nombre</th>\r\n      <th scope=\"col\">Edad</th>\r\n      <th scope=\"col\">Profesión</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Juan Pérez</td>\r\n      <td>30</td>\r\n      <td>Ingeniero</td>\r\n    </tr>\r\n    <tr>\r\n      <td>María García</td>\r\n      <td>25</td>\r\n      <td>Doctora</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\n```\n\n**Ejemplo con `scope=\"row\"`:**\n\n```html\n<table>\r\n  <tbody>\r\n    <tr>\r\n      <th scope=\"row\">Nombre</th>\r\n      <td>Juan Pérez</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">Edad</th>\r\n      <td>30</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">Profesión</th>\r\n      <td>Ingeniero</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\n```\n\n## ESTILOS POR DEFECTO Y PERSONALIZACION CON CSS\n\nPor defecto, los navegadores suelen aplicar los siguientes estilos a los elementos `<th>`:\n\n* `font-weight: bold;` (texto en negrita)\n* `text-align: center;` (texto centrado)\n\nEstos estilos se pueden personalizar fácilmente con CSS.\n\n**Ejemplo de personalización con CSS:**\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<style>\r\ntable {\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n}\r\n\r\nth, td {\r\n  border: 1px solid black;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\nth {\r\n  background-color: #f2f2f2;\r\n  font-weight: normal; /* Elimina la negrita por defecto */\r\n  text-align: center; /* Alinea el texto al centro */\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n\r\n<h2>Tabla con Encabezados Personalizados</h2>\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">Nombre</th>\r\n      <th scope=\"col\">Edad</th>\r\n      <th scope=\"col\">Profesión</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Juan Pérez</td>\r\n      <td>30</td>\r\n      <td>Ingeniero</td>\r\n    </tr>\r\n    <tr>\r\n      <td>María García</td>\r\n      <td>25</td>\r\n      <td>Doctora</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n</body>\r\n</html>\n```\n\nEn este ejemplo, se ha eliminado la negrita por defecto y se ha cambiado el color de fondo de los encabezados.\n\n## ACCESIBILIDAD\n\nEl uso correcto de `<th>` y el atributo `scope` es fundamental para la accesibilidad de las tablas.  Los lectores de pantalla utilizan esta información para proporcionar contexto a los usuarios, especialmente a aquellos con discapacidades visuales.  Sin la semántica adecuada, los usuarios pueden tener dificultades para entender la relación entre los datos y sus encabezados correspondientes.\n\n## MEJORES PRACTICAS\n\n* **Siempre usar `<th>` para los encabezados:** No utilizar `<td>` con estilos CSS para simular encabezados.\n* **Utilizar el atributo `scope`:** Especificar el alcance de cada encabezado para mejorar la accesibilidad.\n* **Colocar los encabezados en `<thead>`:**  Utilizar el elemento `<thead>` para agrupar los encabezados de columna.\n* **Simplificar las tablas complejas:**  Si una tabla es demasiado compleja, considerar dividirla en tablas más pequeñas o utilizar un formato diferente para presentar la información.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n**Tabla con encabezados de columna y fila:**\n\n```html\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th></th>\r\n      <th scope=\"col\">Producto A</th>\r\n      <th scope=\"col\">Producto B</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th scope=\"row\">Ventas</th>\r\n      <td>100</td>\r\n      <td>150</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">Costos</th>\r\n      <td>50</td>\r\n      <td>75</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\n```\n\n**Tabla con `colgroup` y `scope=\"colgroup\"`:**\n\n```html\n<table>\r\n  <colgroup>\r\n    <col span=\"2\">\r\n    <col>\r\n  </colgroup>\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"colgroup\" colspan=\"2\">Información Personal</th>\r\n      <th scope=\"col\">Profesión</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Nombre</td>\r\n      <td>Juan Pérez</td>\r\n      <td>Ingeniero</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Edad</td>\r\n      <td>30</td>\r\n      <td>Doctora</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\n```\n\nEn este ejemplo, las primeras dos columnas (Nombre y Edad) están agrupadas bajo el encabezado \"Información Personal\".  El atributo `colspan=\"2\"` indica que el encabezado abarca dos columnas.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<th>: The Table Header cell element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th)\n* [W3C: HTML Table Structure](https://www.w3.org/TR/html52/tabular-data.html)\n* [WebAIM: Creating Accessible Tables](https://webaim.org/techniques/tables/)\n"
  },
  {
    "slug": "/programming/web/html/tables-in-html/table-rows",
    "title": "Filas (<tr>)",
    "description": "Información detallada sobre el elemento HTML <tr>, su uso, atributos y mejores prácticas para la creación de tablas accesibles y semánticas.",
    "content": "El elemento HTML `<tr>` (Table Row) define una fila de celdas en una tabla. Las filas son los bloques de construcción horizontales de una tabla, y dentro de cada fila se colocan las celdas de datos (`<td>`) o las celdas de encabezado (`<th>`). El uso correcto de `<tr>` es fundamental para estructurar tablas de manera semántica y accesible.\n\n## OBJETIVOS CLAVE SOBRE EL TEMA\n\n1. **Estructura Semántica:** Comprender cómo `<tr>` contribuye a la estructura semántica de una tabla.\n2. **Accesibilidad:** Asegurar que las tablas sean accesibles para todos los usuarios, incluyendo aquellos que utilizan tecnologías de asistencia.\n3. **Uso Correcto:** Aprender a utilizar `<tr>` correctamente en combinación con otros elementos de tabla como `<table>`, `<th>`, y `<td>`.\n4. **Atributos:** Conocer los atributos importantes que se pueden utilizar con `<tr>` para mejorar la presentación y accesibilidad.\n\n## ESTRUCTURA BASICA\n\nLa estructura básica de una fila en una tabla HTML se compone del elemento `<tr>` que contiene uno o más elementos `<td>` (Table Data Cell) o `<th>` (Table Header Cell).\n\n```html\n<table>\r\n  <tr>\r\n    <th>Encabezado 1</th>\r\n    <th>Encabezado 2</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Dato 1</td>\r\n    <td>Dato 2</td>\r\n  </tr>\r\n</table>\n```\n\nEn este ejemplo, la primera fila contiene celdas de encabezado (`<th>`), mientras que la segunda fila contiene celdas de datos (`<td>`).\n\n## ATRIBUTOS\n\nAunque el uso de atributos directamente en el elemento `<tr>` para estilos está en desuso en favor de CSS, algunos atributos aún pueden ser relevantes para la accesibilidad y la compatibilidad con versiones anteriores.\n\n* **`scope` (para elementos `<th>` dentro de `<tr>`):** Define la celda de encabezado que proporciona información para las celdas de datos. Los valores pueden ser `col`, `row`, `colgroup`, o `rowgroup`.\n\n  ```html\n  <table>\r\n    <tr>\r\n      <th></th>\r\n      <th scope=\"col\">Columna 1</th>\r\n      <th scope=\"col\">Columna 2</th>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">Fila 1</th>\r\n      <td>Dato 1</td>\r\n      <td>Dato 2</td>\r\n    </tr>\r\n  </table>\n  ```\n\n* **Atributos de Accesibilidad ARIA:** Los atributos ARIA (Accessible Rich Internet Applications) pueden ser utilizados para mejorar la accesibilidad de las tablas, especialmente para usuarios de tecnologías de asistencia.\n\n  ```html\n  <tr aria-rowindex=\"2\">\r\n    <th scope=\"row\">Fila 1</th>\r\n    <td>Dato 1</td>\r\n    <td>Dato 2</td>\r\n  </tr>\n  ```\n\n## MEJORES PRACTICAS\n\n1. **Semántica Correcta:** Utilizar `<tr>` dentro de un elemento `<table>` y asegurarse de que contenga elementos `<td>` o `<th>`.\n2. **Encabezados Claros:** Utilizar `<th>` para los encabezados de columna y fila, y el atributo `scope` para asociar los encabezados con las celdas de datos correspondientes.\n3. **Accesibilidad:** Proporcionar alternativas de texto para las tablas complejas y utilizar atributos ARIA para mejorar la accesibilidad.\n4. **Estilos con CSS:** Evitar el uso de atributos de estilo directamente en el elemento `<tr>` y, en su lugar, utilizar CSS para controlar la apariencia de las filas.\n5. **Tablas Simples:** Para diseños más complejos, considerar si una tabla es realmente necesaria o si se puede lograr el mismo resultado con elementos HTML y CSS más apropiados.\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### TABLA BASICA\n\n```html\n<table>\r\n  <tr>\r\n    <th>Nombre</th>\r\n    <th>Edad</th>\r\n    <th>Profesión</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Juan Pérez</td>\r\n    <td>30</td>\r\n    <td>Ingeniero</td>\r\n  </tr>\r\n  <tr>\r\n    <td>María García</td>\r\n    <td>25</td>\r\n    <td>Doctora</td>\r\n  </tr>\r\n</table>\n```\n\n### TABLA CON ENCABEZADOS DE FILA\n\n```html\n<table>\r\n  <tr>\r\n    <th></th>\r\n    <th scope=\"col\">Lunes</th>\r\n    <th scope=\"col\">Martes</th>\r\n    <th scope=\"col\">Miércoles</th>\r\n  </tr>\r\n  <tr>\r\n    <th scope=\"row\">Mañana</th>\r\n    <td>Trabajo</td>\r\n    <td>Trabajo</td>\r\n    <td>Trabajo</td>\r\n  </tr>\r\n  <tr>\r\n    <th scope=\"row\">Tarde</th>\r\n    <td>Estudio</td>\r\n    <td>Estudio</td>\r\n    <td>Estudio</td>\r\n  </tr>\r\n</table>\n```\n\n### ESTILOS CON CSS\n\n```html\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<style>\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth, td {\r\n  border: 1px solid black;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\nth {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\ntr:nth-child(even) {\r\n  background-color: #f9f9f9;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n\r\n<h2>Tabla de Ejemplo</h2>\r\n\r\n<table>\r\n  <tr>\r\n    <th>Nombre</th>\r\n    <th>Edad</th>\r\n    <th>Profesión</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Juan Pérez</td>\r\n    <td>30</td>\r\n    <td>Ingeniero</td>\r\n  </tr>\r\n  <tr>\r\n    <td>María García</td>\r\n    <td>25</td>\r\n    <td>Doctora</td>\r\n  </tr>\r\n</table>\r\n\r\n</body>\r\n</html>\n```\n\nEn este ejemplo, CSS se utiliza para aplicar estilos a la tabla, incluyendo bordes, relleno, alineación del texto y colores de fondo.\n\n## CONSIDERACIONES DE ACCESIBILIDAD\n\n* **Etiquetas `<th>`:** Utilizar etiquetas `<th>` para los encabezados de las filas y columnas. Esto ayuda a los lectores de pantalla a entender la estructura de la tabla.\n* **Atributo `scope`:** El atributo `scope` en las etiquetas `<th>` especifica si el encabezado se aplica a una columna, fila o grupo de columnas/filas.\n* **Resumen y Captions:** Para tablas complejas, proporcionar un resumen con el atributo `summary` en la etiqueta `<table>` o usar la etiqueta `<caption>` para describir el propósito de la tabla.\n* **ARIA Attributes:** Utilizar atributos ARIA como `aria-label`, `aria-describedby`, y `role=\"table\"` para mejorar la accesibilidad.\n\n## EJEMPLO DE TABLA ACCESIBLE\n\n```html\n<table role=\"table\" aria-label=\"Tabla de datos de empleados\">\r\n  <caption>Datos de empleados</caption>\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">Nombre</th>\r\n      <th scope=\"col\">Edad</th>\r\n      <th scope=\"col\">Profesión</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th scope=\"row\">Juan Pérez</th>\r\n      <td>30</td>\r\n      <td>Ingeniero</td>\r\n    </tr>\r\n    <tr>\r\n      <th scope=\"row\">María García</th>\r\n      <td>25</td>\r\n      <td>Doctora</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\n```\n\nEn este ejemplo, se utilizan atributos ARIA y etiquetas semánticas para mejorar la accesibilidad de la tabla.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<tr>: The Table Row element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr)\n* [W3C: HTML Table Structure](https://www.w3.org/TR/html52/tabular-data.html)\n* [WebAIM: Creating Accessible Tables](https://webaim.org/techniques/tables/)\n"
  },
  {
    "slug": "/programming/web/html/tables-in-html/table-tag",
    "title": "La etiqueta <table>",
    "description": "Documentación detallada sobre la etiqueta HTML <table>, sus atributos, usos y mejores prácticas para la creación de tablas accesibles y semánticas.",
    "content": "La etiqueta `<table>` en HTML se utiliza para crear tablas de datos en una página web. Las tablas son una forma estructurada de presentar información en filas y columnas, lo que facilita la lectura y comprensión de los datos. Aunque las tablas se utilizaban antiguamente para el diseño de páginas web, su uso principal ahora es para mostrar datos tabulares.\n\n## OBJETIVOS CLAVE SOBRE LA ETIQUETA `<table>`\n\n1. **Estructuración de Datos:** Facilitar la presentación de datos en un formato ordenado y fácil de entender.\n2. **Accesibilidad:** Asegurar que las tablas sean accesibles para todos los usuarios, incluyendo aquellos que utilizan tecnologías de asistencia.\n3. **Semántica:** Utilizar las etiquetas HTML apropiadas para definir la estructura de la tabla, mejorando la semántica del documento.\n4. **Responsividad:** Adaptar las tablas a diferentes tamaños de pantalla para una experiencia de usuario óptima en dispositivos móviles y de escritorio.\n\n## ESTRUCTURA BASICA DE UNA TABLA\n\nUna tabla HTML se define con la etiqueta `<table>`. Dentro de esta etiqueta, se utilizan otras etiquetas para definir las filas, las celdas de encabezado y las celdas de datos.\n\n* `<table>`: Define la tabla.\n* `<thead>`: Define el encabezado de la tabla.\n* `<tbody>`: Define el cuerpo de la tabla.\n* `<tfoot>`: Define el pie de la tabla.\n* `<tr>`: Define una fila de la tabla.\n* `<th>`: Define una celda de encabezado en una tabla.\n* `<td>`: Define una celda de datos en una tabla.\n* `<figcaption>`: Define un título o leyenda para la tabla.\n* `<col>`: Especifica propiedades para cada columna.\n* `<colgroup>`: Agrupa columnas para aplicarles estilos o propiedades.\n\nA continuación, se muestra un ejemplo básico de una tabla:\n\n```html\n<table>\r\n  <caption>Tabla de ejemplo</caption>\r\n  <thead>\r\n    <tr>\r\n      <th>Nombre</th>\r\n      <th>Edad</th>\r\n      <th>Profesión</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Juan Pérez</td>\r\n      <td>30</td>\r\n      <td>Ingeniero</td>\r\n    </tr>\r\n    <tr>\r\n      <td>María García</td>\r\n      <td>25</td>\r\n      <td>Diseñadora</td>\r\n    </tr>\r\n  </tbody>\r\n  <tfoot>\r\n    <tr>\r\n      <td colspan=\"3\">Fuente: Datos ficticios</td>\r\n    </tr>\r\n  </tfoot>\r\n</table>\n```\n\n## ATRIBUTOS DE LA ETIQUETA `<table>`\n\nLa etiqueta `<table>` tiene varios atributos que permiten controlar su apariencia y comportamiento. Algunos de los atributos más comunes son:\n\n* `border`: Define el ancho del borde de la tabla. (Este atributo está obsoleto en HTML5 y se recomienda usar CSS para definir los bordes).\n* `cellpadding`: Define el espacio entre el contenido de la celda y el borde de la celda. (Este atributo está obsoleto en HTML5 y se recomienda usar CSS para definir el relleno).\n* `cellspacing`: Define el espacio entre las celdas. (Este atributo está obsoleto en HTML5 y se recomienda usar CSS para definir el espaciado).\n* `width`: Define el ancho de la tabla. (Este atributo está obsoleto en HTML5 y se recomienda usar CSS para definir el ancho).\n* `summary`: Proporciona un resumen del contenido de la tabla para mejorar la accesibilidad.\n* `data-*`: Permite almacenar datos personalizados privados a la página o aplicación.\n\nEjemplo de uso de algunos atributos (aunque se recomienda usar CSS para el estilo):\n\n```html\n<table style=\"width:100%; border-collapse: collapse;\">\r\n  <caption>Tabla de ejemplo con estilos CSS</caption>\r\n  <thead>\r\n    <tr>\r\n      <th style=\"border: 1px solid black; padding: 8px; text-align: left;\">Nombre</th>\r\n      <th style=\"border: 1px solid black; padding: 8px; text-align: left;\">Edad</th>\r\n      <th style=\"border: 1px solid black; padding: 8px; text-align: left;\">Profesión</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td style=\"border: 1px solid black; padding: 8px;\">Juan Pérez</td>\r\n      <td style=\"border: 1px solid black; padding: 8px;\">30</td>\r\n      <td style=\"border: 1px solid black; padding: 8px;\">Ingeniero</td>\r\n    </tr>\r\n    <tr>\r\n      <td style=\"border: 1px solid black; padding: 8px;\">María García</td>\r\n      <td style=\"border: 1px solid black; padding: 8px;\">25</td>\r\n      <td style=\"border: 1px solid black; padding: 8px;\">Diseñadora</td>\r\n    </tr>\r\n  </tbody>\r\n  <tfoot>\r\n    <tr>\r\n      <td colspan=\"3\" style=\"border: 1px solid black; padding: 8px; text-align: center;\">\r\n        Fuente: Datos ficticios\r\n      </td>\r\n    </tr>\r\n  </tfoot>\r\n</table>\n```\n\n## ACCESIBILIDAD EN TABLAS\n\nEs crucial hacer que las tablas sean accesibles para todos los usuarios, especialmente aquellos que utilizan tecnologías de asistencia como lectores de pantalla. Aquí hay algunas prácticas recomendadas:\n\n1. **Usar `<th>` para los encabezados:** Utilizar la etiqueta `<th>` para definir las celdas de encabezado. Esto proporciona información semántica importante para los lectores de pantalla.\n2. **Atributo `scope`:** Utilizar el atributo `scope` en las etiquetas `<th>` para especificar si el encabezado se aplica a una columna (`scope=\"col\"`) o a una fila (`scope=\"row\"`).\n3. **Atributo `<caption>`:** Proporcionar un título descriptivo para la tabla utilizando la etiqueta `<caption>`. Esto ayuda a los usuarios a entender el propósito de la tabla.\n4. **Atributo `summary`:** Aunque está obsoleto, se puede usar el atributo `aria-describedby` para proporcionar una descripción detallada de la tabla.\n5. **Estructura lógica:** Asegurarse de que la estructura de la tabla sea lógica y fácil de entender. Evitar el uso excesivo de celdas combinadas (`colspan` y `rowspan`) que pueden dificultar la navegación para los usuarios de lectores de pantalla.\n\nEjemplo de tabla accesible:\n\n```html\n<table aria-describedby=\"tabla-descripcion\">\r\n  <caption>\r\n    Tabla de datos de empleados\r\n  </caption>\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">Nombre</th>\r\n      <th scope=\"col\">Edad</th>\r\n      <th scope=\"col\">Profesión</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Juan Pérez</td>\r\n      <td>30</td>\r\n      <td>Ingeniero</td>\r\n    </tr>\r\n    <tr>\r\n      <td>María García</td>\r\n      <td>25</td>\r\n      <td>Diseñadora</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<p id=\"tabla-descripcion\">\r\n  Esta tabla muestra información básica de los empleados de la empresa.\r\n</p>\n```\n\n## RESPONSIVIDAD EN TABLAS\n\nLas tablas pueden ser difíciles de manejar en dispositivos móviles debido a su diseño inherentemente horizontal. Aquí hay algunas técnicas para hacer que las tablas sean responsivas:\n\n1. **Desbordamiento Horizontal:** Envolver la tabla en un contenedor con `overflow-x: auto;` para permitir el desplazamiento horizontal en pantallas pequeñas.\n\n   ```html\n   <div style=\"overflow-x: auto;\">\r\n     <table>\r\n       <!-- Contenido de la tabla -->\r\n     </table>\r\n   </div>\n   ```\n\n2. **Apilamiento de Celdas:** Utilizar CSS para cambiar la disposición de la tabla en pantallas pequeñas, apilando las celdas en lugar de mostrarlas en filas y columnas.\n\n   ```css\n   @media screen and (max-width: 600px) {\r\n     table {\r\n       display: block;\r\n     }\r\n     thead {\r\n       display: none;\r\n     }\r\n     tr {\r\n       display: block;\r\n       margin-bottom: 10px;\r\n     }\r\n     td {\r\n       display: block;\r\n       text-align: right;\r\n       border-bottom: 1px solid #ddd;\r\n     }\r\n     td:before {\r\n       content: attr(data-label);\r\n       float: left;\r\n       font-weight: bold;\r\n     }\r\n   }\n   ```\n\n   ```html\n   <table>\r\n     <caption>\r\n       Tabla de datos de empleados\r\n     </caption>\r\n     <thead>\r\n       <tr>\r\n         <th scope=\"col\">Nombre</th>\r\n         <th scope=\"col\">Edad</th>\r\n         <th scope=\"col\">Profesión</th>\r\n       </tr>\r\n     </thead>\r\n     <tbody>\r\n       <tr>\r\n         <td data-label=\"Nombre\">Juan Pérez</td>\r\n         <td data-label=\"Edad\">30</td>\r\n         <td data-label=\"Profesión\">Ingeniero</td>\r\n       </tr>\r\n       <tr>\r\n         <td data-label=\"Nombre\">María García</td>\r\n         <td data-label=\"Edad\">25</td>\r\n         <td data-label=\"Profesión\">Diseñadora</td>\r\n       </tr>\r\n     </tbody>\r\n   </table>\n   ```\n\n3. **Ocultar Columnas:** Ocultar columnas menos importantes en pantallas pequeñas utilizando CSS.\n\n   ```css\n   @media screen and (max-width: 600px) {\r\n     .ocultar-en-movil {\r\n       display: none;\r\n     }\r\n   }\n   ```\n\n   ```html\n   <table>\r\n     <caption>\r\n       Tabla de datos de empleados\r\n     </caption>\r\n     <thead>\r\n       <tr>\r\n         <th scope=\"col\">Nombre</th>\r\n         <th scope=\"col\">Edad</th>\r\n         <th scope=\"col\" class=\"ocultar-en-movil\">Profesión</th>\r\n       </tr>\r\n     </thead>\r\n     <tbody>\r\n       <tr>\r\n         <td>Juan Pérez</td>\r\n         <td>30</td>\r\n         <td class=\"ocultar-en-movil\">Ingeniero</td>\r\n       </tr>\r\n       <tr>\r\n         <td>María García</td>\r\n         <td>25</td>\r\n         <td class=\"ocultar-en-movil\">Diseñadora</td>\r\n       </tr>\r\n     </tbody>\r\n   </table>\n   ```\n\n## MEJORES PRACTICAS\n\n* **Usar CSS para el estilo:** Evitar el uso de atributos HTML obsoletos para el estilo de la tabla. Utilizar CSS para controlar la apariencia de la tabla, incluyendo bordes, relleno, espaciado y colores.\n* **Semántica adecuada:** Utilizar las etiquetas HTML apropiadas para definir la estructura de la tabla. Esto mejora la semántica del documento y facilita la accesibilidad.\n* **Accesibilidad:** Asegurarse de que las tablas sean accesibles para todos los usuarios. Utilizar las etiquetas `<th>`, el atributo `scope` y la etiqueta `<caption>` para proporcionar información semántica y contexto.\n* **Responsividad:** Adaptar las tablas a diferentes tamaños de pantalla para una experiencia de usuario óptima en dispositivos móviles y de escritorio.\n* **Evitar el uso excesivo de celdas combinadas:** El uso excesivo de `colspan` y `rowspan` puede dificultar la navegación para los usuarios de lectores de pantalla. Tratar de mantener la estructura de la tabla lo más simple posible.\n\n## FUENTES DEL DOCUMENTO\n\n* [MDN Web Docs: \\<table>](https://developer.mozilla.org/es/docs/Web/HTML/Element/table)\n* [W3Schools: HTML Tables](https://www.w3schools.com/html/html_tables.asp)\n* [CSS-Tricks: Responsive Data Tables](https://css-tricks.com/responsive-data-tables/)\n* [WebAIM: Creating Accessible Tables](https://webaim.org/techniques/tables/)\n"
  },
  {
    "slug": "/programming/web",
    "title": "Herramientas de desarrollo Web",
    "description": "desc",
    "content": ""
  }
]