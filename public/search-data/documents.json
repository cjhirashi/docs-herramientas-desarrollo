[
  {
    "slug": "/data-management/databases",
    "title": "Bases de Datos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/databases/mongodb",
    "title": "Mongo DB",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/databases/postgres",
    "title": "Postgres",
    "description": "Esta",
    "content": ""
  },
  {
    "slug": "/data-management/databases/sql",
    "title": "SQL",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management",
    "title": "Administración de datos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/platforms",
    "title": "Plataformas de administración de datos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/platforms/supabase",
    "title": "Supabase",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/deployments/docker",
    "title": "Docker",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/deployments",
    "title": "Despliegue de proyectos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/deployments/vercel",
    "title": "Vercel",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/dev-templates/app-ai",
    "title": "Aplicaciones con Inteligencia Artificial",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/dev-templates/app-courses",
    "title": "Aplicaciones para cursos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/dev-templates/app-documentation",
    "title": "Aplicaciones para documentación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": "<CardGrid>\n  <Card subtitle=\"Rubix Documents\" title=\"Rubix Documents\" description=\"Este kit de inicio de documentos sirve como una base flexible y escalable para crear sitios web de documentación o proyectos basados ​​en contenido.\" href=\"/docs/dev-templates/app-documentation/rubix-documents\" />\n</CardGrid>\n"
  },
  {
    "slug": "/dev-templates/app-documentation/rubix-documents/components",
    "title": "Componentes para documentación",
    "description": "Este kit de inicio de documentos sirve como una base flexible y escalable para crear sitios web de documentación o proyectos basados ​​en contenido.",
    "content": "## CARDS\n\n### CHICAS\n\n<CardGrid>\n  <Card title=\"Instrucciones\" href=\"#\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n\n  <Card title=\"Configuración\" href=\"#\" icon=\"alignJustify\" variant=\"small\" />\n</CardGrid>\n\n```JSX\n<CardGrid>\r\n  <Card\r\n    title=\"Instrucciones\"\r\n    href=\"#\"\r\n    icon=\"alignJustify\"\r\n    variant=\"small\"\r\n    description=\"test description\"\r\n  />\r\n  <Card\r\n    title=\"Configuración\"\r\n    href=\"#\"\r\n    icon=\"alignJustify\"\r\n    variant=\"small\"\r\n  />\r\n</CardGrid>\n```\n\n### MEDIANAS\n\n<CardGrid>\n  <Card subtitle=\"Instructions\" title=\"Installation\" description=\"Get started with Documents using our quick start installation guide to get your project started.\" href=\"#\" />\n\n  <Card subtitle=\"Setup\" title=\"Site Settings\" description=\"Setting up your Documents projects layout, links and search engine optimisation.\" href=\"#\" />\n</CardGrid>\n\n```JSX\n<CardGrid>\r\n  <Card\r\n    subtitle=\"Instructions\"\r\n    title=\"Installation\"\r\n    description=\"Get started with Documents using our quick start installation guide to get your project started.\"\r\n    href=\"#\"\r\n  />\r\n  <Card\r\n    subtitle=\"Setup\"\r\n    title=\"Site Settings\"\r\n    description=\"Setting up your Documents projects layout, links and search engine optimisation.\"\r\n    href=\"#\"\r\n  />\r\n</CardGrid>\r\n\n```\n\n### IMAGEN\n\n<CardGrid>\n  <Card title=\"Instructions\" href=\"#\" image=\"/images/og-image.png\" variant=\"image\" />\n\n  <Card title=\"Setup\" href=\"#\" image=\"/images/og-image.png\" variant=\"image\" />\n</CardGrid>\n\n```JSX\n<CardGrid>\r\n  <Card\r\n    title=\"Instructions\"\r\n    href=\"#\"\r\n    image=\"/images/og-image.png\"\r\n    variant=\"image\"\r\n  />\r\n  <Card\r\n    title=\"Setup\"\r\n    href=\"#\"\r\n    image=\"/images/og-image.png\"\r\n    variant=\"image\"\r\n  />\r\n</CardGrid>\n```\n\n***\n\n## DIAGRAMAS\n\n### DIAGRAMA DE FLUJO\n\n```JSX\n<Mermaid\r\n  chart={\\`\r\n    graph TD;\r\n    Start --> Task1;\r\n    Task1 --> Task2;\r\n    Task2 --> End;\r\n  \\`}\r\n/>\n```\n\n### ARBOL DE DECISIONES\n\n```JSX\n<Mermaid\r\n  chart={\\`\r\n    graph TD;\r\n    A[Start] --> B{Is it raining?};\r\n    B -->|Yes| C[Take an umbrella];\r\n    B -->|No| D[Enjoy the weather];\r\n    C --> E[Go outside];\r\n    D --> E;\r\n  \\`}\r\n/>\n```\n\n### DIAGRAMA DE ENTIDAD-REACCION\n\n```JSX\n<Mermaid\r\n  chart={\\`\r\n    erDiagram\r\n    CUSTOMER ||--o{ ORDER : places\r\n    ORDER ||--|{ LINE-ITEM : contains\r\n    PRODUCT ||--o{ LINE-ITEM : \"included in\"\r\n    CUSTOMER {\r\n        string name\r\n        string email\r\n    }\r\n    ORDER {\r\n        int orderNumber\r\n        date orderDate\r\n    }\r\n    LINE-ITEM {\r\n        int quantity\r\n        float price\r\n    }\r\n    PRODUCT {\r\n        int productId\r\n        string name\r\n        float price\r\n    }\r\n  \\`}\r\n/>\r\n\n```\n\n***\n\n## ARBOL DE ARCHIVOS\n\n<FileTree>\n  <Folder name=\"src\" label=\"Source Code\">\n    <File name=\"index.tsx\" label=\"Index File\" />\n\n    <Folder name=\"components\" label=\"Components\">\n      <File name=\"button.tsx\" label=\"Button Component\" />\n\n      <File name=\"input.tsx\" label=\"Input Component\" />\n    </Folder>\n\n    <Folder name=\"pages\" label=\"Pages\">\n      <File name=\"home.tsx\" label=\"Home Page\" />\n\n      <File name=\"about.tsx\" label=\"About Page\" />\n    </Folder>\n  </Folder>\n</FileTree>\n\n```JSX\n<FileTree>\r\n  <Folder name=\"src\" label=\"Source Code\">\r\n    <File name=\"index.tsx\" label=\"Index File\" />\r\n    <Folder name=\"components\" label=\"Components\">\r\n      <File name=\"button.tsx\" label=\"Button Component\" />\r\n      <File name=\"input.tsx\" label=\"Input Component\" />\r\n    </Folder>\r\n    <Folder name=\"pages\" label=\"Pages\">\r\n      <File name=\"home.tsx\" label=\"Home Page\" />\r\n      <File name=\"about.tsx\" label=\"About Page\" />\r\n    </Folder>\r\n  </Folder>\r\n</FileTree>\r\n\n```\n\n***\n\n## LISTAS\n\n### LISTA DE VERIFICACION\n\n* \\[x] Escribe el comunicado de prensa\n* \\[ ] Actualizar el sitio web\n* \\[ ] Contacta con los medios\n\n```JSX\n- [x] Escribe el comunicado de prensa\r\n- [ ] Actualizar el sitio web\r\n- [ ] Contacta con los medios\n```\n\n### LISTA SENCILLA\n\n* Item 1\n* Item 2\n* Item 3\n\n```JSX\n- Item 1\r\n- Item 2\r\n- Item 3\n```\n\n### LISTA DE NUMEROS\n\n1. Research\n2. Draft the content\n3. Review and edit\n4. Publish\n\n```JSX\n1. Research\r\n2. Draft the content\r\n3. Review and edit\r\n4. Publish\r\n\n```\n\n### LISTA ANIDADA\n\n* Main Category 1\n  * Sub Item 1.1\n  * Sub Item 1.2\n* Main Category 2\n  * Sub Item 2.1\n  * Sub Item 2.2\n\n```JSX\n- Main Category 1\r\n  - Sub Item 1.1\r\n  - Sub Item 1.2\r\n- Main Category 2\r\n  - Sub Item 2.1\r\n  - Sub Item 2.2\n```\n\n***\n\n## MATEMATICAS\n\n### ALGEBRA BASICA\n\n```math\nA = \\pi r^2\n```\n\n```jsx\nmath\r\nA = \\pi r^2\n```\n\n### FORMULA CUADRATICA\n\n```math\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n```\n\n```jsx\n[math]\r\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n```\n\n### TEOREMA DE PITAGORAS\n\n```math\nE = mc^2\n```\n\n```jsx\n[math]\r\nE = mc^2\n```\n\n***\n\n## NOTAS\n\n### NOTA ESTANDAR\n\n<Note title=\"Requerido\">\n  La funcionalidad de búsqueda del proyecto se basa en la automatización de Husky para crear\r\n  `search-data/documents.json` y garantizar que se realice la confirmación de Git para generar este\r\n  archivo.\n</Note>\n\n```jsx\n<Note title=\"Requerido\">\r\n  La funcionalidad de búsqueda del proyecto se basa en la automatización de Husky para crear\r\n`search-data/documents.json` y garantizar que se realice la confirmación de Git para generar este\r\narchivo.\r\n</Note>\n```\n\n### NOTA DE EXITO\n\n<Note title=\"Required\" type=\"success\">\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\n</Note>\n\n```jsx\n<Note title=\"Required\" type=\"success\">\r\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\r\n</Note>\n```\n\n### NOTA DE ADVERTENCIA\n\n<Note title=\"Required\" type=\"warning\">\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\n</Note>\n\n```jsx\n<Note title=\"Required\" type=\"warning\">\r\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\r\n</Note>\n```\n\n### NOTA DE PELIGRO\n\n<Note title=\"Required\" type=\"danger\">\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\n</Note>\n\n```jsx\n<Note title=\"Required\" type=\"danger\">\r\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\r\n</Note>\n```\n\n***\n\n## PASOS\n\n<Step>\n  <StepItem title=\"Título 1\">\n    Contenido 1\n  </StepItem>\n\n  <StepItem title=\"Título 2\">\n    Contenido 2\n  </StepItem>\n\n  <StepItem title=\"Título 3\">\n    Contenido 3\n  </StepItem>\n</Step>\n\n```jsx\n<Step>\r\n  <StepItem title=\"Título 1\">\r\n   \r\n    Contenido 1\r\n\r\n  </StepItem>\r\n\r\n  <StepItem title=\"Título 2\">\r\n    \r\n    Contenido 2\r\n\r\n  </StepItem>\r\n\r\n  <StepItem title=\"Título 3\">\r\n    \r\n    Contenido 3\r\n\r\n  </StepItem>\r\n</Step>\n```\n\n***\n\n## TABLAS\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n| Feature       | Documentation Link |                    Notes |\r\n| :------------ | :----------------: | -----------------------: |\r\n| **Feature A** |     [Docs](#)      | For more info click here |\r\n| **Feature B** |     [Guide](#)     |  See the full guide here |\r\n| **Feature C** |     [Setup](#)     |       Setup instructions |\n\n```jsx\n\r\n| Feature       | Documentation Link |                    Notes |\r\n| :------------ | :----------------: | -----------------------: |\r\n| **Feature A** |     [Docs](#)      | For more info click here |\r\n| **Feature B** |     [Guide](#)     |  See the full guide here |\r\n| **Feature C** |     [Setup](#)     |       Setup instructions |\r\n\n```\n\n***\n\n## TABS\n\n```jsx\n<Tabs defaultValue=\"js\" className=\"pt-5 pb-1\">\r\n\r\n  <TabsList className=\"\">\r\n    <TabsTrigger value=\"js\">layout.jsx</TabsTrigger>\r\n    <TabsTrigger value=\"ts\">layout.tsx</TabsTrigger>\r\n  </TabsList>\r\n\r\n  <TabsContent value=\"js\">\r\n  '''jsx {7} showLineNumbers\r\n\r\n    // Contenido de layout.jsx\r\n\r\n  '''\r\n  </TabsContent>\r\n\r\n  <TabsContent value=\"ts\">\r\n  '''tsx {11} showLineNumbers\r\n\r\n    // Contenido de layout.tsx\r\n\r\n  '''\r\n  </TabsContent>\r\n\r\n</Tabs>\n```\n"
  },
  {
    "slug": "/dev-templates/app-documentation/rubix-documents",
    "title": "Rubix Documents",
    "description": "Este kit de inicio de documentos sirve como una base flexible y escalable para crear sitios web de documentación o proyectos basados ​​en contenido.",
    "content": "![Banner](https://vercel.com/_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fe5382hct74si%2F5nVnDsvxzCbKSnLIm6IX5W%2Faf59967eb27c0fa46fbfcc81a9c427c8%2FCleanShot_2024-09-27_at_15.59.48_2x.png\\&w=1920\\&q=75)\n\n## TEMPLATE\n\nDocuments es un potente kit de inicio de documentación de Next.js diseñado para simplificar el proceso de creación de documentación de productos, manuales técnicos y guías comerciales integrales y de alta calidad. Desarrollado con React, Tailwind CSS y TypeScript, este kit de inicio proporciona la base para crear la documentación de su proyecto y su base de conocimientos.\n\n### STACK TECNOLOGICO\n\n* **Framework**: Next.js\n* **Caso de uso**: Documentación\n* **CSS**: Tailwind\n\n### CARACTERISTICAS\n\n* **Creación de contenido**\n  * ***Integración MDX***: escriba documentos con componentes Markdown y JSX.\n  * ***Componentes personalizados***: reutilice componentes React en sus documentos.\n  * ***Diagramas de Mermaid.js***: crea diagramas de flujo y diagramas.\n  * ***Matemáticas y tablas***: incluye tablas y fórmulas matemáticas LaTeX.\n\n* **Navegación y legibilidad**\n  * ***Navegación multinivel***: páginas anidadas para crear jerarquías.\n  * ***Paginación de contenido***: transiciones fluidas entre páginas.\n  * ***Tabla de contenidos dinámica***: tabla de contenidos generada automáticamente.\n  * ***Selector de código***: alterne y copie fragmentos de código fácilmente.\n\n* **Características del código**\n  * ***Resaltado de sintaxis***: Resaltado según tema.\n  * ***Bloques de código mejorados***: Resaltado de líneas y títulos de código.\n\n* **Temas y experiencia de usuario**\n  * ***Modos claro/oscuro***: Cambio automático de tema.\n  * ***Optimización SEO***: Metadatos generados automáticamente para una mejor clasificación.\n    * Gestión de metaetiquetas (título, descripción, URL, uso compartido en redes sociales).\n\n* **Búsqueda y mejoras futuras**\n  * ***Búsqueda avanzada***: Búsqueda aproximada con resaltado de términos.\n  * ***Base de conocimiento de IA***: Futuras herramientas de documentación impulsadas por IA.\n\n### LICENCIA\n\nEste proyecto está licenciado bajo la licencia **MIT**. Consulte el archivo [LICENCIA](https://github.com/rubixvi/rubix-documents/blob/main/LICENSE) para obtener más detalles.\n\n### CONTACTO\n\nPara obtener ayuda o realizar consultas, comuníquese con Vincent Vu [@rubixvi](https://x.com/rubixvi) en X.\n\nRubix Studios: [https://www.rubixstudios.com.au](https://www.rubixstudios.com.au)\n\nProyecto: [https://github.com/rubixvi/rubix-documents](https://github.com/rubixvi/rubix-documents)\n\n***\n\n## LINKS\n\n<CardGrid>\n  <Card title=\"Template Vercel\" href=\"https://vercel.com/templates/next.js/documents-simple-next-js-documentation\" icon=\"alignJustify\" variant=\"small\" external=\"true\" />\n\n  <Card title=\"Demo\" href=\"https://rubix-documents.vercel.app/\" icon=\"alignJustify\" variant=\"small\" external=\"true\" />\n\n  <Card title=\"Repositorio GitHub\" href=\"https://github.com/rubixvi/rubix-documents\" icon=\"alignJustify\" variant=\"small\" external=\"true\" />\n</CardGrid>\n\n***\n\n## CLONAR REPOSITORIO\n\n<Step>\n  <StepItem title=\"Clonar repositorio\">\n    Clona el repositorio de GitHub y accede a la nueva carpeta del proyecto\n\n    ```bash\n    git clone https://github.com/rubixvi/rubix-documents.git\r\n    cd rubix-documents\n    ```\n  </StepItem>\n\n  <StepItem title=\"Conectar con nuevo repositorio\">\n    1. Crea un nuevo repositorio en [GitHub](https://github.com/)\n    2. Verificar qué origen tiene asignado el repositorio del proyecto\n       ```bash\n       git remote -v\n       ```\n       Esto mostrará una respuesta como la siguiente:\n       ```bash\n       origin  <URL REPO ASIGNADO> (fetch)\r\n       origin  <URL REPO ASIGNADO> (push)\n       ```\n    3. Ejectura el comando de reasignación de Origen del proyecto con el siguiente comando:\n       ```bash\n       git remote set-url origin <NUEVA_URL>\n       ```\n  </StepItem>\n\n  <StepItem title=\"Instalar dependencias\">\n    Instala todas las dependencias del proyecto\n\n    ```bash\n    npm install\n    ```\n  </StepItem>\n\n  <StepItem title=\"Correr el servidor\">\n    * **Ejecutar en modo desarrollo**:\n\n      ```bash\n      npm run dev\n      ```\n\n    * **Ejecutar en modo producción**:\n      1. Construir aplicación:\n      ```bash\n      npm run build\n      ```\n      2. Ejecutar en modo producción:\r\n         Construir aplicación:\n      ```bash\n      npm run start\n      ```\n  </StepItem>\n</Step>\n"
  },
  {
    "slug": "/dev-templates/app-landingpages",
    "title": "Landing Pages",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/dev-templates/app-saas",
    "title": "Aplicaciones SaaS",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/dev-templates",
    "title": "Templates de desarrollo",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/documentation",
    "title": "Sobre documentación",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/documentation/installation",
    "title": "Uso",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/frameworks",
    "title": "Frameworks para desarrollo",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/frameworks/nextjs",
    "title": "Next.js",
    "description": "Esta",
    "content": ""
  },
  {
    "slug": "/programming/git/commands",
    "title": "Comandos de Git",
    "description": "Exploración detallada de los comandos de Git esenciales para la gestión de versiones en proyectos de software.",
    "content": "La sección de comandos de Git es el corazón de la herramienta.  Permite controlar el versionado de tu código. Comandos como `add`, `commit`, `push`, `pull`, `branch`, `merge`, y `rebase` son esenciales.  `add` prepara cambios, `commit` guarda esos cambios localmente, `push` sube los cambios a un repositorio remoto, `pull` descarga los cambios remotos, `branch` crea ramificaciones para desarrollo paralelo, y `merge` y `rebase` integran cambios de diferentes ramas. Dominar estos comandos es clave para una gestión eficiente del código con Git.\n\n## COMANDOS FUNDAMENTALES DE GIT\n\nA continuación, se describen los comandos de Git más utilizados, agrupados por su función principal:\n\n### 1. CONFIGURACION E INICIALIZACION\n\n* **`git config`**:  Configura las opciones de Git, como el nombre de usuario, el correo electrónico, el editor de texto predeterminado, etc.  Se puede configurar a nivel local (para un solo repositorio), global (para todos los repositorios del usuario) o de sistema (para todos los usuarios del sistema).\n\n  ```bash\n  git config --global user.name \"Tu Nombre\"\r\n  git config --global user.email \"tu_correo@ejemplo.com\"\n  ```\n\n* **`git init`**:  Inicializa un nuevo repositorio de Git en el directorio actual.  Crea un directorio oculto `.git` que contiene la información de configuración del repositorio.\n\n  ```bash\n  git init\n  ```\n\n* **`git clone`**:  Crea una copia local de un repositorio remoto existente. Descarga todos los archivos y el historial completo del repositorio.\n\n  ```bash\n  git clone https://github.com/usuario/repositorio.git\n  ```\n\n### 2.  GESTION DE CAMBIOS\n\n* **`git status`**:  Muestra el estado actual del repositorio, incluyendo los archivos modificados, los archivos en stage (preparados para el commit) y los archivos sin seguimiento.\n\n  ```bash\n  git status\n  ```\n\n* **`git add`**:  Añade los archivos modificados al área de stage (staging area).  El área de stage es una zona intermedia donde se preparan los cambios que se van a incluir en el próximo commit.\n\n  ```bash\n  git add archivo.txt\r\n  git add .  # Añade todos los archivos modificados\n  ```\n\n* **`git commit`**:  Guarda los cambios que están en el área de stage en el historial del repositorio.  Cada commit tiene un mensaje descriptivo que explica los cambios realizados.\n\n  ```bash\n  git commit -m \"Mensaje descriptivo del commit\"\n  ```\n\n* **`git rm`**:  Elimina un archivo del repositorio y del sistema de archivos.\n\n  ```bash\n  git rm archivo.txt\r\n  git commit -m \"Elimina archivo.txt\"\n  ```\n\n* **`git mv`**:  Renombra o mueve un archivo en el repositorio.\n\n  ```bash\n  git mv archivo_viejo.txt archivo_nuevo.txt\r\n  git commit -m \"Renombra archivo_viejo.txt a archivo_nuevo.txt\"\n  ```\n\n### 3.  RAMAS (BRANCHES)\n\n* **`git branch`**:  Lista, crea o elimina ramas. Una rama es una línea de desarrollo independiente del tronco principal (master o main).\n\n  ```bash\n  git branch  # Lista las ramas locales\r\n  git branch nueva_rama  # Crea una nueva rama llamada \"nueva_rama\"\r\n  git branch -d rama_a_eliminar # Elimina una rama (si ya se ha fusionado)\r\n  git branch -D rama_a_eliminar # Elimina una rama (forzando la eliminación)\n  ```\n\n* **`git checkout`**:  Cambia entre ramas.  Permite trabajar en diferentes líneas de desarrollo sin afectar la rama principal.\n\n  ```bash\n  git checkout nueva_rama  # Cambia a la rama \"nueva_rama\"\r\n  git checkout -b nueva_rama # Crea y cambia a la rama \"nueva_rama\"\n  ```\n\n* **`git merge`**:  Fusiona los cambios de una rama en otra.  Combina el historial de las dos ramas.\n\n  ```bash\n  git checkout master\r\n  git merge nueva_rama # Fusiona los cambios de \"nueva_rama\" en \"master\"\n  ```\n\n* **`git rebase`**:  Integra los cambios de una rama en otra moviendo la base de la rama actual a la base de la otra rama.  Produce un historial más limpio que `git merge`, pero puede ser más complejo de usar y potencialmente peligroso si no se entiende bien.\n\n  ```bash\n  git checkout nueva_rama\r\n  git rebase master # Mueve la base de \"nueva_rama\" a la última versión de \"master\"\n  ```\n\n### 4.  TRABAJO REMOTO\n\n* **`git remote add <nombre> <url>`**:  Añade una nueva conexión a un repositorio remoto.  `<nombre>` es un alias que le das al repositorio remoto (por ejemplo, `origin`, `upstream`).  `<url>` es la URL del repositorio remoto (por ejemplo, `https://github.com/usuario/repositorio.git`).\n\n  ```bash\n  git remote add origin https://github.com/usuario/repositorio.git\r\n  git remote add upstream https://github.com/otro_usuario/repositorio.git\n  ```\n\n  ```\n  ```\n\n* **`git remote rename <viejo_nombre> <nuevo_nombre>`**:  Renombra una conexión remota existente.\n\n  ```bash\n  git remote rename origin nuevo_origin\n  ```\n\n* **`git remote remove <nombre>` o `git remote rm <nombre>`**:  Elimina una conexión remota.\n\n  ```bash\n  git remote remove origin\n  ```\n\n* **`git remote set-url <nombre> <nueva_url>`**:  Cambia la URL asociada a una conexión remota existente.\n\n  ```bash\n  git remote set-url origin https://nuevo_dominio/usuario/repositorio.git\n  ```\n\n* **`git remote show <nombre>`**:  Muestra información detallada sobre una conexión remota específica, incluyendo la URL, las ramas rastreadas, las ramas locales que están configuradas para hacer push a ese remoto, y más.\n\n  ```bash\n  git remote show origin\n  ```\n\n* **`git remote update <nombre>`**:  Descarga información actualizada sobre las ramas y etiquetas del repositorio remoto especificado, sin fusionar los cambios en tus ramas locales.  Es similar a `git fetch`, pero se centra en actualizar la información de seguimiento de las ramas remotas.\n\n  ```bash\n  git remote update origin\n  ```\n\n* **`git remote prune <nombre>`**:  Elimina las referencias a ramas remotas que ya no existen en el repositorio remoto.  Esto ayuda a mantener tu repositorio local limpio y actualizado.\n\n  ```bash\n  git remote prune origin\n  ```\n\n* **`git fetch`**:  Descarga los cambios de un repositorio remoto sin fusionarlos en la rama local.  Permite inspeccionar los cambios antes de integrarlos.\n\n  ```bash\n  git fetch origin\n  ```\n\n* **`git pull`**:  Descarga los cambios de un repositorio remoto y los fusiona automáticamente en la rama local.  Es una combinación de `git fetch` y `git merge`.\n\n  ```bash\n  git pull origin master # Descarga y fusiona los cambios de la rama \"master\" del repositorio \"origin\"\n  ```\n\n* **`git push`**:  Sube los cambios de la rama local a un repositorio remoto.\n\n  ```bash\n  git push origin master # Sube los cambios de la rama \"master\" al repositorio \"origin\"\r\n  git push -u origin master # Establece el rastreo entre la rama local y la rama remota (solo la primera vez)\n  ```\n\n### 5.  DESHACER CAMBIOS\n\n* **`git reset`**:  Revierte el estado del repositorio a un commit anterior.  Puede modificar el área de stage, los archivos modificados o incluso el historial del repositorio, dependiendo del tipo de reset que se utilice.\n\n  * `git reset --soft <commit>`:  Mueve el HEAD al commit especificado, pero mantiene los cambios en el área de stage.\n  * `git reset --mixed <commit>`:  Mueve el HEAD al commit especificado y elimina los cambios del área de stage, dejándolos como archivos modificados.  (Este es el comportamiento predeterminado si no se especifica ningún tipo).\n  * `git reset --hard <commit>`:  Mueve el HEAD al commit especificado y descarta todos los cambios en el área de stage y los archivos modificados.  ¡PELIGRO!  Esta opción puede provocar la pérdida de datos si no se usa con cuidado.\n\n  ```bash\n  git reset --soft HEAD^ # Revierte al commit anterior (mantiene los cambios en stage)\r\n  git reset --hard  a1b2c3d # Revierte al commit con hash a1b2c3d (descarta todos los cambios)\n  ```\n\n* **`git revert`**:  Crea un nuevo commit que deshace los cambios introducidos por un commit anterior.  No modifica el historial existente, sino que añade un nuevo commit que revierte los cambios.  Es una forma segura de deshacer cambios, ya que no altera el historial.\n\n  ```bash\n  git revert a1b2c3d # Crea un nuevo commit que deshace los cambios del commit con hash a1b2c3d\n  ```\n\n### 6. OTROS COMANDOS UTILES\n\n* **`git log`**:  Muestra el historial de commits del repositorio. Permite ver la fecha, el autor, el mensaje y el hash de cada commit.\n\n  ```bash\n  git log\r\n  git log --oneline # Muestra el historial en una sola línea por commit\r\n  git log --graph # Muestra el historial como un gráfico\r\n  git log --author=\"Tu Nombre\" # Muestra los commits realizados por un autor específico\n  ```\n\n  Para salir de `git log`, solo basta presionar la letra ***Q***.\n\n* **`git diff`**:  Muestra las diferencias entre archivos, commits o ramas.\n\n  ```bash\n  git diff # Muestra las diferencias entre el área de stage y los archivos modificados\r\n  git diff HEAD # Muestra las diferencias entre el último commit y los archivos modificados\r\n  git diff rama1 rama2 # Muestra las diferencias entre las ramas rama1 y rama2\n  ```\n\n* **`git stash`**:  Guarda temporalmente los cambios no confirmados.  Permite cambiar de rama o realizar otras tareas sin tener que hacer commit de los cambios incompletos.\n\n  ```bash\n  git stash # Guarda los cambios no confirmados\r\n  git stash pop # Recupera los últimos cambios guardados\r\n  git stash list # Lista los stashes guardados\r\n  git stash apply stash@{2} # Aplica un stash específico\n  ```\n\n* **`.gitignore`**:  Un archivo que especifica los archivos y directorios que Git debe ignorar.  Es útil para evitar que archivos temporales, archivos de configuración o archivos generados automáticamente se incluyan en el repositorio.\n\n  ```text\n  # Ejemplo de archivo .gitignore\r\n  *.log\r\n  tmp/\r\n  config.ini\n  ```\n"
  },
  {
    "slug": "/programming/git/github",
    "title": "GitHub",
    "description": "Plataforma de desarrollo colaborativo basada en la nube para el control de versiones con Git.",
    "content": "GitHub es una plataforma de desarrollo colaborativo basada en la nube que permite a los desarrolladores almacenar, gestionar y controlar las versiones de su código. Es una herramienta esencial en el mundo del desarrollo de software moderno, facilitando la colaboración, el seguimiento de cambios y la gestión de proyectos de cualquier tamaño. GitHub se basa en el sistema de control de versiones distribuido Git, lo que significa que cada desarrollador tiene una copia completa del repositorio del proyecto en su máquina local, permitiendo trabajar de forma offline y sincronizar los cambios posteriormente.\n\n### HISTORIA\n\nGitHub fue fundado en 2008 por Tom Preston-Werner, Chris Wanstrath, PJ Hyett y Scott Chacon. La idea surgió de la necesidad de una plataforma que facilitara la colaboración entre desarrolladores utilizando Git. Antes de GitHub, Git era utilizado principalmente a través de la línea de comandos, lo que podía ser intimidante para algunos. GitHub proporcionó una interfaz web intuitiva y características adicionales que hicieron que Git fuera más accesible y atractivo para una audiencia más amplia.\n\nLa plataforma rápidamente ganó popularidad en la comunidad de código abierto, convirtiéndose en el hogar de miles de proyectos. En 2018, Microsoft adquirió GitHub por 7.5 mil millones de dólares, una decisión que generó tanto entusiasmo como preocupación en la comunidad. Sin embargo, Microsoft ha mantenido su compromiso de apoyar el código abierto y ha continuado invirtiendo en la plataforma, mejorando sus características y servicios.\n\n### OBJETIVOS CLAVE\n\n* **Control de Versiones:** GitHub permite a los desarrolladores realizar un seguimiento de todos los cambios realizados en el código a lo largo del tiempo. Esto facilita la identificación y corrección de errores, la reversión a versiones anteriores y la comprensión de la evolución del proyecto.\n* **Colaboración:** GitHub facilita la colaboración entre desarrolladores, permitiendo que varios miembros del equipo trabajen en el mismo proyecto simultáneamente. A través de características como pull requests y issues, los desarrolladores pueden revisar el código de otros, discutir cambios y contribuir al proyecto de manera organizada.\n* **Gestión de Proyectos:** GitHub proporciona herramientas para la gestión de proyectos, como la capacidad de crear y asignar tareas, establecer hitos y realizar un seguimiento del progreso. Esto ayuda a los equipos a mantenerse organizados y a cumplir con los plazos.\n* **Descubrimiento de Código:** GitHub es una plataforma donde los desarrolladores pueden descubrir y explorar proyectos de código abierto. Esto fomenta el aprendizaje, la reutilización de código y la contribución a la comunidad.\n* **Automatización:** GitHub Actions permite automatizar tareas de desarrollo de software, como pruebas, integración continua y despliegue. Esto ayuda a los equipos a mejorar la eficiencia y la calidad de su trabajo.\n\n### CARACTERISTICAS PRINCIPALES\n\n* **Repositorios:** Los repositorios son el corazón de GitHub. Un repositorio es un directorio donde se almacenan todos los archivos de un proyecto, junto con el historial de cambios. Los repositorios pueden ser públicos (accesibles para todos) o privados (accesibles solo para los miembros del equipo).\n* **Branches:** Las branches (ramas) permiten a los desarrolladores trabajar en nuevas características o correcciones de errores sin afectar la rama principal del proyecto (generalmente llamada \"main\" o \"master\"). Una vez que los cambios están listos, se pueden fusionar (merge) de nuevo en la rama principal.\n* **Commits:** Un commit es una instantánea de los cambios realizados en el código en un momento dado. Cada commit tiene un mensaje que describe los cambios realizados.\n* **Pull Requests:** Los pull requests (solicitudes de extracción) son una forma de proponer cambios a un repositorio. Un desarrollador crea una branch, realiza los cambios necesarios y luego envía un pull request para que otros miembros del equipo revisen el código.\n* **Issues:** Los issues (problemas) se utilizan para realizar un seguimiento de errores, solicitar nuevas características o discutir ideas. Los issues pueden ser asignados a miembros del equipo, etiquetados y cerrados una vez que se han resuelto.\n* **Forking:** Forking permite a los desarrolladores crear una copia de un repositorio en su propia cuenta. Esto les permite realizar cambios en el código sin afectar el repositorio original. Si desean contribuir con sus cambios al repositorio original, pueden enviar un pull request.\n* **GitHub Actions:** GitHub Actions es una plataforma de automatización que permite a los desarrolladores crear flujos de trabajo personalizados para automatizar tareas de desarrollo de software.\n\n### FLUJO DE TRABAJO TIPICO\n\n1. **Crear un Repositorio:** El primer paso es crear un repositorio en GitHub para el proyecto.\n2. **Clonar el Repositorio:** Clonar el repositorio en la máquina local del desarrollador utilizando el comando `git clone`.\n3. **Crear una Branch:** Crear una nueva branch para trabajar en una nueva característica o corrección de errores.\n4. **Realizar Cambios:** Realizar los cambios necesarios en el código.\n5. **Commit los Cambios:** Commit los cambios con un mensaje descriptivo utilizando el comando `git commit`.\n6. **Subir los Cambios:** Subir los cambios a la branch remota en GitHub utilizando el comando `git push`.\n7. **Crear un Pull Request:** Crear un pull request para que otros miembros del equipo revisen el código.\n8. **Revisar el Código:** Los miembros del equipo revisan el código y proporcionan comentarios.\n9. **Fusionar el Pull Request:** Una vez que el código ha sido aprobado, el pull request se puede fusionar en la rama principal.\n\n### INFORMACION ADICIONAL\n\n* GitHub ofrece una variedad de planes de precios, incluyendo un plan gratuito para proyectos públicos y planes de pago para proyectos privados con características adicionales.\n* GitHub tiene una gran comunidad de usuarios y una amplia documentación disponible en su sitio web.\n* GitHub se integra con una variedad de herramientas y servicios de desarrollo de software, como IDEs, herramientas de integración continua y plataformas de despliegue.\n\nEn resumen, GitHub es una plataforma esencial para el desarrollo de software moderno, que facilita la colaboración, el control de versiones y la gestión de proyectos. Su amplia gama de características y su gran comunidad de usuarios la convierten en una herramienta indispensable para cualquier desarrollador.\n"
  },
  {
    "slug": "/programming/git/gitignore",
    "title": ".gitignore",
    "description": "Archivo de configuración para especificar archivos y directorios que Git debe ignorar.",
    "content": "El archivo `.gitignore` es un archivo de texto plano que reside en el directorio raíz de un repositorio Git. Su propósito principal es decirle a Git qué archivos y directorios no deben ser rastreados ni incluidos en los commits. Esto es crucial para mantener un repositorio limpio, evitar la inclusión de archivos sensibles (como contraseñas o claves privadas), y optimizar el rendimiento de Git al reducir la cantidad de archivos que necesita monitorear.\n\nEl archivo `.gitignore` utiliza patrones para especificar qué archivos y directorios deben ser ignorados. Estos patrones pueden ser nombres de archivos específicos, nombres de directorios, o patrones más generales utilizando comodines. Git evalúa estos patrones en orden, y si un archivo o directorio coincide con un patrón en `.gitignore`, se ignora.\n\n## FUNCIONAMIENTO BASICO\n\n1. **Ubicación:** El archivo `.gitignore` se coloca en el directorio raíz del repositorio. También se pueden crear archivos `.gitignore` en subdirectorios para aplicar reglas de ignorado específicas a esas carpetas. Las reglas en un archivo `.gitignore` de un subdirectorio tienen precedencia sobre las reglas en el archivo `.gitignore` del directorio raíz.\n\n2. **Sintaxis:** La sintaxis del archivo `.gitignore` es sencilla:\n\n   * Cada línea representa un patrón.\n   * Las líneas que comienzan con `#` son comentarios y se ignoran.\n   * Las líneas en blanco también se ignoran.\n   * Se pueden usar comodines para crear patrones más generales:\n     * `*`: Coincide con cero o más caracteres.\n     * `?`: Coincide con un solo carácter.\n     * `[]`: Coincide con un rango de caracteres.\n     * `**`: Coincide con cualquier número de directorios.\n   * Un prefijo `!` niega un patrón. Es decir, si un archivo coincide con un patrón negado, se incluirá incluso si coincide con un patrón anterior.\n   * Un `/` al final de un patrón indica que solo debe coincidir con un directorio.\n\n3. **Prioridad:** Git evalúa las reglas de ignorado en el siguiente orden:\n\n   1. Reglas leídas desde la línea de comandos (`git add -f`).\n   2. Reglas en el archivo `.gitignore` en el mismo directorio que el archivo o en cualquier directorio padre.\n   3. Reglas especificadas en el archivo `$GIT_DIR/info/exclude`.\n   4. Reglas especificadas en la configuración global de Git (core.excludesfile).\n\n## EJEMPLOS DE IMPLEMENTACION\n\nAquí hay algunos ejemplos de cómo usar `.gitignore`:\n\n1. **Ignorar archivos `.log`:**\n\n   ```\n   *.log\n   ```\n\n   Esto ignorará todos los archivos que tengan la extensión `.log` en cualquier directorio del repositorio.\n\n2. **Ignorar el directorio `node_modules`:**\n\n   ```\n   node_modules/\n   ```\n\n   Esto ignorará el directorio `node_modules` y todo su contenido.\n\n3. **Ignorar archivos `.DS_Store` (comunes en macOS):**\n\n   ```\n   .DS_Store\n   ```\n\n   Esto ignorará los archivos `.DS_Store` que macOS crea en cada directorio.\n\n4. **Ignorar todos los archivos `.txt` excepto `important.txt`:**\n\n   ```\n   *.txt\r\n   !important.txt\n   ```\n\n   Esto ignorará todos los archivos `.txt` excepto el archivo `important.txt`.\n\n5. **Ignorar un directorio específico y todos sus subdirectorios:**\n\n   ```\n   build/\n   ```\n\n   Esto ignorará el directorio `build` y todos sus subdirectorios y archivos.\n\n6. **Ignorar archivos de configuración locales:**\n\n   ```\n   config/local_settings.py\n   ```\n\n   Esto ignorará el archivo `local_settings.py` dentro del directorio `config`.\n\nEn resumen, el archivo `.gitignore` es una herramienta esencial para cualquier proyecto Git. Su uso adecuado ayuda a mantener el repositorio limpio, seguro y eficiente, facilitando la colaboración y el desarrollo a largo plazo.\n"
  },
  {
    "slug": "/programming/git",
    "title": "Git",
    "description": "Git es un sistema de control de versiones distribuido que rastrea los cambios en archivos y coordina el trabajo entre múltiples personas. Permite a los desarrolladores (y a cualquier persona) gestionar el historial de sus proyectos, colaborar fácilmente y revertir a versiones anteriores si es necesario. Cada persona tiene una copia completa del proyecto, lo que permite trabajar sin conexión y reduce la dependencia de un servidor central. Es la herramienta estándar para el desarrollo de software colaborativo moderno.",
    "content": "![GIT](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Git-logo.svg/800px-Git-logo.svg.png)\n\n## ¿QUE ES GIT?\n\nGit es un sistema de control de versiones distribuido (DVCS) diseñado para rastrear los cambios en archivos de computadora y coordinar el trabajo en esos archivos entre múltiples personas. En esencia, es una herramienta que permite a los desarrolladores gestionar el código fuente de manera eficiente y colaborativa, pero se puede usar para rastrear cambios en cualquier tipo de archivo (documentos, imágenes, configuraciones, etc.).\n\n### CARACTERISTICAS CLAVES\n\n* **Sistema de Control de Versiones Distribuido**: A diferencia de los sistemas centralizados (como Subversion o CVS), Git permite que cada desarrollador tenga una copia completa del repositorio, incluyendo todo el historial de cambios. Esto ofrece varias ventajas:\n\n* **Trabajo Offline**: Los desarrolladores pueden trabajar y hacer commits localmente sin necesidad de una conexión constante al servidor central.\n\n* **Rendimiento**: Las operaciones locales (como ver el historial o hacer commits) son mucho más rápidas, ya que no requieren acceso a la red.\n\n* **Resiliencia**: Si el servidor central falla, el proyecto no se pierde, ya que cada desarrollador tiene una copia completa.\n\n* **Ramas (Branching) y Combinación (Merging)**: Git facilita la creación de ramas (líneas de desarrollo paralelas) para implementar nuevas funcionalidades, corregir errores o experimentar con ideas. Luego, estas ramas se pueden combinar (merge) de nuevo en la rama principal. Este modelo de branching permite un flujo de trabajo flexible y no lineal.\n\n* **Eficiencia**: Git está diseñado para ser rápido y eficiente, incluso con proyectos muy grandes. Utiliza algoritmos de compresión y almacenamiento de datos inteligentes para minimizar el espacio en disco y el tiempo de acceso.\n\n* **Integridad de Datos**: Git utiliza un algoritmo de hash SHA-1 para identificar y rastrear cada cambio. Esto garantiza la integridad de los datos y detecta cualquier corrupción accidental.\n\n* **Área de Preparación (Staging Area)**: Git tiene un área de preparación intermedia entre el directorio de trabajo y el repositorio. Esto permite seleccionar los cambios específicos que se incluirán en el próximo commit, ofreciendo un control más granular sobre el historial.\n\n* **Gratuito y de Código Abierto**: Git es un proyecto de código abierto licenciado bajo la GPLv2, lo que significa que es gratuito para usar, modificar y distribuir.\n\n### OBJETIVOS DE GIT\n\n* **Control de Versiones**: Rastrear todos los cambios realizados en los archivos a lo largo del tiempo, permitiendo volver a versiones anteriores, comparar diferencias y auditar modificaciones.\n\n* **Colaboración**: Facilitar el trabajo en equipo en proyectos de software, permitiendo a múltiples desarrolladores trabajar simultáneamente en el mismo código base sin conflictos.\n\n* **Gestión de Ramas**: Proporcionar un modelo flexible para crear, combinar y gestionar ramas de desarrollo, lo que permite experimentar con nuevas funcionalidades sin afectar la estabilidad del proyecto principal.\n\n* **Desarrollo Paralelo**: Permitir que varios desarrolladores trabajen en diferentes partes del proyecto al mismo tiempo, sin interferir entre sí.\n\n* **Deshacer Cambios**: Ofrecer herramientas para deshacer cambios, revertir a versiones anteriores y corregir errores.\n\n* **Seguridad**: Garantizar la integridad de los datos y prevenir la pérdida de información.\n\n* **Auditoría**: Facilitar el seguimiento de quién hizo qué cambios y cuándo.\n\n* **Gestión de Grandes Proyectos**: Escalar bien para proyectos de software de gran tamaño con muchos archivos y un historial de cambios extenso.\n\n## INSTALACION\n\nLa instalación de Git varía dependiendo de tu sistema operativo. Aquí tienes las instrucciones para los sistemas más comunes:\n\n### 1. WINDOWS\n\n* **Descargar**: Descarga el instalador de Git para Windows desde el sitio web oficial: [https://git-scm.com/download/win](https://git-scm.com/download/win)\n\n* **Ejecutar**: Ejecuta el archivo descargado. Sigue los pasos del asistente de instalación. Puedes aceptar las opciones por defecto en la mayoría de los casos.\n\n* **Editor de Texto**: El instalador te preguntará qué editor de texto quieres usar con Git (por ejemplo, Notepad++, Visual Studio Code, Vim). Elige el que prefieras. Si no estás seguro, puedes dejar el valor por defecto (que suele ser Vim).\n\n* **Ajuste del PATH**: Asegúrate de que la opción \"Use Git from Git Bash only\" NO esté seleccionada, a menos que estés seguro de que solo quieres usar Git desde la línea de comandos de Git Bash. La opción recomendada es \"Git from the command line and also from 3rd-party software\".\n\n* **Terminal**: Puedes elegir el emulador de terminal que quieres usar con Git Bash (MinTTY o el terminal de Windows predeterminado).\n\n* **Verificar Instalación**: Abre una ventana de símbolo del sistema (cmd) o PowerShell y escribe git --version. Si Git está instalado correctamente, mostrará la versión instalada.\n\n### 2. MACOS\n\n1. ***Opción 1*** - Instalador (Recomendado)\n\n   * **Descargar**: Descarga el instalador de Git para macOS desde el sitio web oficial: [https://git-scm.com/download/mac](https://git-scm.com/download/mac)\n\n   * **Ejecutar**: Ejecuta el archivo descargado (normalmente un archivo .dmg), sigue las instrucciones del instalador.\n\n   * **Verificar**: Verifica la instalación abriendo una Terminal y escribiendo git --version.\n\n2. ***Opción 2*** - Homebrew\n\n   Si tienes Homebrew instalado, puedes instalar Git con el siguiente comando:\n\n   ```bash\n   brew install git\n   ```\n\n   * **Verificar**: Verifica la instalación abriendo una Terminal y escribiendo git --version.\n\n3. ***Opción 3*** - Xcode Command Line Tools\n\n   Si tienes Xcode instalado, Git puede ya estar presente como parte de las *Command Line Tools*. Abre la Terminal y escribe lo siguiente.\n\n   ```bash\n   git --version\n   ```\n\n   Si no está instalado, *macOS* te pedirá que instales las *Command Line Tools*.\n\n### 3. LINUX (Debian/Ubuntu)\n\nAbre una terminal y ejecuta el siguiente comando.\n\n```bash\nsudo apt update\r\nsudo apt install git\n```\n\nConfirma la instalación escribiendo.\n\n```bash\ngit --version\n```\n\n### 4. LINUX (Fedora/CentOS/RHEL):\n\nAbre una terminal y ejecuta el siguiente comando.\n\n```bash\nsudo dnf install git\r\n# o en sistemas más antiguos:\r\n# sudo yum install git\n```\n\nConfirma la instalación escribiendo.\n\n```bash\ngit --version\n```\n\n## CONFIGURACION INICIAL\n\nDespués de instalar Git, es importante configurar tu nombre de usuario y dirección de correo electrónico, ya que esta información se asociará con tus *commits*, reemplaza ***\"Tu Nombre\"*** y ***\"tu@email.com\"*** con tu información real. La opción `--global` guarda esta configuración para todos tus repositorios Git.\n\n```bash\ngit config --global user.name <tu nombre>\r\ngit config --global user.email <tu@email.com>\n```\n\nPuedes verificar tu configuración con los siguientes comandos\n\n```bash\ngit config --global user.name\r\ngit config --global user.email\n```\n"
  },
  {
    "slug": "/programming",
    "title": "Herramientas de Programación",
    "description": "Una visión general de los lenguajes de programación, su historia, tipos, paradigmas y ejemplos.",
    "content": ""
  },
  {
    "slug": "/programming/languages/bestpp",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages/dart",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages",
    "title": "Lenguajes de Programación",
    "description": "Una visión general de los lenguajes de programación, su historia, tipos, paradigmas y ejemplos.",
    "content": "## ¿QUE SON LOS LENGUAJES DE PROGRAMACION?\n\nUn **lenguaje de programación** es un sistema formal diseñado para expresar computaciones que pueden ser realizadas por una máquina, como una computadora. Permite a los programadores comunicar instrucciones a las computadoras en un formato que estas puedan entender y ejecutar.  En esencia, un lenguaje de programación actúa como un intermediario entre el pensamiento humano y la lógica binaria de las máquinas.\n\n### HISTORIA\n\nLa historia de los lenguajes de programación es tan antigua como la de las propias computadoras.\n\n* **Inicios (Década de 1940-1950):**  Las primeras computadoras se programaban directamente en código máquina, utilizando secuencias de 0s y 1s. Esto era extremadamente tedioso y propenso a errores.  Un hito importante fue la creación de **Short Code** en 1949, considerado uno de los primeros lenguajes de programación de alto nivel, aunque requería interpretación en cada ejecución.  **A-0** (1951) fue otro sistema temprano que facilitó la programación al permitir la especificación de operaciones mediante códigos numéricos.\n* **La Era de los Primeros Lenguajes de Alto Nivel (Década de 1950):**  La necesidad de simplificar la programación llevó al desarrollo de los primeros lenguajes de alto nivel.  **FORTRAN** (Formula Translation, 1957), creado por John Backus en IBM, fue diseñado para cálculos científicos e ingeniería.  **LISP** (List Processor, 1958), desarrollado por John McCarthy en el MIT, se centró en el procesamiento de listas y se convirtió en el lenguaje preferido para la investigación en inteligencia artificial.  **COBOL** (Common Business-Oriented Language, 1959), creado por Grace Hopper, se orientó a aplicaciones empresariales y procesamiento de datos.\n* **La Expansión y Diversificación (Década de 1960-1970):**  Esta época vio una explosión en la creación de lenguajes.  **ALGOL** (Algorithmic Language, 1960) influyó en el diseño de muchos lenguajes posteriores.  **BASIC** (Beginner's All-purpose Symbolic Instruction Code, 1964) fue diseñado para ser fácil de aprender y usar.  **Simula 67** introdujo conceptos de programación orientada a objetos.  **Pascal** (1970), creado por Niklaus Wirth, se diseñó para la enseñanza de la programación estructurada.  **C** (1972), desarrollado por Dennis Ritchie en Bell Labs, se convirtió en un lenguaje poderoso y versátil para la programación de sistemas.\n* **La Programación Orientada a Objetos (Década de 1980-1990):**  La programación orientada a objetos (POO) ganó popularidad.  **Smalltalk** (década de 1970, pero popularizado en los 80) fue uno de los primeros lenguajes puramente orientados a objetos.  **C++** (1983) añadió características de POO a C.  **Objective-C** se utilizó ampliamente en el desarrollo de software para Apple.\n* **La Era de Internet y los Lenguajes de Scripting (Década de 1990-2000):**  El auge de Internet impulsó la creación de lenguajes de scripting.  **Python** (1991), creado por Guido van Rossum, se destacó por su legibilidad y versatilidad.  **Java** (1995), desarrollado por Sun Microsystems, se diseñó para ser multiplataforma (\"escribe una vez, ejecuta en cualquier lugar\").  **JavaScript** (1995) se convirtió en el lenguaje estándar para la programación del lado del cliente en la web.  **PHP** (1995) se popularizó para el desarrollo de aplicaciones web dinámicas.\n* **El Siglo XXI: Diversificación y Especialización:**  La tendencia hacia la diversificación continúa.  **C#** (2000), desarrollado por Microsoft, se integra estrechamente con la plataforma .NET.  **Ruby** (1995) ganó popularidad con el framework Ruby on Rails.  **Go** (2009), desarrollado por Google, se diseñó para la programación de sistemas concurrentes.  **Swift** (2014), desarrollado por Apple, reemplazó a Objective-C como el lenguaje principal para el desarrollo de iOS y macOS.  **Kotlin** (2011) se ha convertido en un lenguaje popular para el desarrollo de Android.  Además, han surgido lenguajes especializados para áreas como ciencia de datos (R), aprendizaje automático (TensorFlow, PyTorch) y computación cuántica (Q#).\n\n### OBJETIVOS CLAVE\n\n* **Expresividad:**  Permitir a los programadores expresar algoritmos y lógica de manera clara y concisa.\n* **Legibilidad:**  Facilitar la comprensión del código por parte de otros programadores (y por el propio programador en el futuro).\n* **Eficiencia:**  Permitir la creación de programas que se ejecuten de manera rápida y utilicen los recursos de la computadora de manera eficiente.\n* **Portabilidad:**  Permitir que los programas se ejecuten en diferentes plataformas (sistemas operativos, arquitecturas de hardware) sin necesidad de modificaciones significativas.\n* **Confiabilidad:**  Facilitar la creación de programas que funcionen correctamente y sean robustos ante errores.\n* **Mantenibilidad:**  Facilitar la modificación y actualización del código a lo largo del tiempo.\n\n### TIPOS DE LENGUAJES DE PROGRAMACION\n\nLos lenguajes de programación se pueden clasificar de diversas maneras:\n\n* **Por Nivel de Abstracción:**\n  * **Lenguajes de Bajo Nivel:**  Están más cerca del hardware de la computadora.  Ejemplos:  Ensamblador, código máquina.  Ofrecen un control preciso sobre el hardware, pero son difíciles de programar.\n  * **Lenguajes de Alto Nivel:**  Son más abstractos y fáciles de usar.  Ejemplos:  Python, Java, C++.  Ofrecen mayor portabilidad y productividad, pero pueden ser menos eficientes en algunos casos.\n* **Por Paradigma de Programación:**\n  * **Imperativos:**  Describen *cómo* se debe realizar un cálculo, especificando una secuencia de instrucciones.  Ejemplos:  C, Pascal, FORTRAN.\n  * **Declarativos:**  Describen *qué* se debe calcular, sin especificar los detalles de la implementación.  Ejemplos:  SQL, Prolog, Haskell.\n  * **Orientados a Objetos:**  Organizan el código en torno a \"objetos\" que encapsulan datos y comportamiento.  Ejemplos:  Java, C++, Python, C#.\n  * **Funcionales:**  Basados en el concepto de funciones matemáticas.  Ejemplos:  Haskell, Lisp, Scala.\n* **Por Propósito:**\n  * **De Propósito General:**  Se pueden utilizar para una amplia variedad de tareas.  Ejemplos:  Python, Java, C++.\n  * **De Propósito Específico:**  Diseñados para tareas específicas.  Ejemplos:  SQL (bases de datos), R (estadística), MATLAB (cálculo numérico).\n* **Por Tipo de Ejecución:**\n  * **Compilados:**  El código fuente se traduce a código máquina ejecutable antes de la ejecución.  Ejemplos:  C, C++, Go.\n  * **Interpretados:**  El código fuente se ejecuta directamente por un intérprete, línea por línea.  Ejemplos:  Python, JavaScript, PHP.\n  * **Híbridos:**  Utilizan una combinación de compilación e interpretación.  Ejemplo:  Java (el código se compila a bytecode, que luego se interpreta por la JVM).\n\n### PARADIGMAS DE PROGRAMACION\n\nUn **paradigma de programación** es un estilo o \"filosofía\" de programación.  Define cómo se estructura y organiza el código.  Algunos de los paradigmas más comunes son:\n\n* **Programación Imperativa:**  Se basa en la ejecución secuencial de instrucciones que modifican el estado del programa.  El programador especifica paso a paso cómo se debe realizar un cálculo.\n* **Programación Orientada a Objetos (POO):**  Se basa en el concepto de \"objetos\" que encapsulan datos (atributos) y comportamiento (métodos).  La POO promueve la reutilización de código, la modularidad y la abstracción.\n* **Programación Funcional:**  Se basa en el concepto de funciones matemáticas puras, que no tienen efectos secundarios (no modifican el estado del programa).  La programación funcional promueve la inmutabilidad, la recursión y la composición de funciones.\n* **Programación Declarativa:**  Se centra en *qué* se debe calcular, en lugar de *cómo*.  El programador especifica las relaciones entre los datos y el sistema se encarga de encontrar la solución.\n\n### SINTAXIS Y SEMANTICA\n\n* **Sintaxis:**  Las reglas que definen la estructura válida de un programa.  Es como la gramática de un lenguaje natural.  Si un programa tiene errores de sintaxis, el compilador o intérprete no podrá entenderlo.\n* **Semántica:**  El significado de las construcciones del lenguaje.  Define qué hace un programa cuando se ejecuta.  Un programa puede ser sintácticamente correcto pero semánticamente incorrecto (por ejemplo, realizar un cálculo incorrecto).\n\n### COMPILADORES E INTERPRETES\n\n* **Compilador:**  Un programa que traduce el código fuente de un lenguaje de programación a código máquina (o a otro lenguaje intermedio).  El código compilado se puede ejecutar directamente por la computadora.\n* **Intérprete:**  Un programa que ejecuta el código fuente directamente, línea por línea.  No se genera un archivo ejecutable separado.\n\n## INFORMACION DE INTERES\n\n***Lenguajes de Dominio Específico (DSL)***: Lenguajes diseñados para un dominio específico, como el diseño de hardware (VHDL, Verilog) o la manipulación de datos (SQL).\n\n***Metaprogramación***: La capacidad de un programa para manipular otros programas (o a sí mismo) como datos. Algunos lenguajes, como Lisp y Smalltalk, son especialmente adecuados para la metaprogramación.\n\n***Evolución de los Lenguajes***: Los lenguajes de programación están en constante evolución, adaptándose a las nuevas tecnologías y necesidades. Nuevos lenguajes surgen regularmente, y los lenguajes existentes se actualizan con nuevas características y mejoras.\n\n***La Importancia de Elegir el Lenguaje Correcto***: La elección del lenguaje de programación adecuado depende del proyecto, los requisitos de rendimiento, la experiencia del equipo y otros factores. No existe un \"mejor\" lenguaje para todos los casos.\n\n## FUENTES DE INFORMACION\n\nWikipedia: https://es.wikipedia.org/wiki/Lenguaje\\_de\\_programaci%C3%B3n\n\nFreeCodeCamp: https://www.freecodecamp.org/news/what-is-a-programming-language/\n\nGeeksforGeeks: https://www.geeksforgeeks.org/programming-languages/\n\nEste documento proporciona una introducción general a los lenguajes de programación. Para obtener información más detallada sobre un lenguaje específico, se recomienda consultar la documentación oficial del lenguaje y otros recursos especializados.\n"
  },
  {
    "slug": "/programming/languages/javascript",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages/python/control-structure",
    "title": "Estructuras de control",
    "description": "",
    "content": ""
  },
  {
    "slug": "/programming/languages/python/data-types/dictionary-operations",
    "title": "Operaciones con Diccionarios en Python",
    "description": "Guía completa sobre las operaciones esenciales que puedes realizar con diccionarios en Python, incluyendo creación, acceso, modificación, eliminación y métodos avanzados.",
    "content": "Los diccionarios en Python son una de las estructuras de datos más versátiles y utilizadas. Permiten almacenar datos en pares clave-valor, lo que facilita la búsqueda y manipulación de información. Este documento detalla las operaciones fundamentales que puedes realizar con diccionarios, desde la creación hasta métodos más avanzados.\n\n## Creación de Diccionarios\n\nUn diccionario se crea utilizando llaves `{}` y definiendo pares clave-valor separados por dos puntos `:`.\n\n```python\n# Diccionario vacío\r\ndiccionario_vacio = {}\r\n\r\n# Diccionario con valores iniciales\r\npersona = {\r\n    \"nombre\": \"Juan\",\r\n    \"edad\": 30,\r\n    \"ciudad\": \"Madrid\"\r\n}\n```\n\n## ACCESO A ELEMENTOS\n\nPara acceder a un valor en un diccionario, se utiliza la clave correspondiente entre corchetes `[]`.\n\n```python\nnombre = persona[\"nombre\"]  # Accede al valor de la clave \"nombre\"\r\nprint(nombre)  # Output: Juan\n```\n\nTambién puedes utilizar el método `get()` para acceder a un valor. La ventaja de `get()` es que permite especificar un valor por defecto si la clave no existe.\n\n```python\napellido = persona.get(\"apellido\", \"Desconocido\")  # Si \"apellido\" no existe, devuelve \"Desconocido\"\r\nprint(apellido)  # Output: Desconocido\n```\n\n## MODIFICACION DE ELEMENTOS\n\nLos diccionarios son mutables, lo que significa que puedes modificar sus valores, añadir nuevas claves o eliminar claves existentes.\n\n```python\n# Modificar un valor existente\r\npersona[\"edad\"] = 31\r\n\r\n# Añadir un nuevo par clave-valor\r\npersona[\"profesion\"] = \"Ingeniero\"\r\n\r\nprint(persona)\r\n# Output: {'nombre': 'Juan', 'edad': 31, 'ciudad': 'Madrid', 'profesion': 'Ingeniero'}\n```\n\n## ELIMINACION DE ELEMENTOS\n\nPara eliminar un elemento de un diccionario, puedes utilizar la sentencia del o los métodos `pop()` y `popitem()`.\n\n```python\n# Eliminar un elemento con del\r\ndel persona[\"ciudad\"]\r\n\r\n# Eliminar un elemento con pop()\r\nedad = persona.pop(\"edad\")  # Elimina la clave \"edad\" y devuelve su valor\r\nprint(edad)  # Output: 31\r\n\r\n# Eliminar el último elemento insertado con popitem()\r\nultimo_elemento = persona.popitem()  # Elimina y devuelve el último par clave-valor\r\nprint(ultimo_elemento)  # Output: ('profesion', 'Ingeniero')\r\n\r\nprint(persona)  # Output: {'nombre': 'Juan'}\n```\n\n## METODOS DE DICCIONARIO\n\nPython proporciona varios métodos útiles para trabajar con diccionarios:\n\n* **keys()**: Devuelve una vista de todas las claves del diccionario.\n\n* **values()**: Devuelve una vista de todos los valores del diccionario.\n\n* **items()**: Devuelve una vista de todos los pares clave-valor del diccionario.\n\n* **update()**: Actualiza el diccionario con los elementos de otro diccionario o un iterable de pares clave-valor.\n\n* **clear()**: Elimina todos los elementos del diccionario.\n\n* **copy()**: Devuelve una copia superficial del diccionario.\n\n```python\npersona = {\r\n    \"nombre\": \"Juan\",\r\n    \"edad\": 30,\r\n    \"ciudad\": \"Madrid\"\r\n}\r\n\r\n# keys()\r\nclaves = persona.keys()\r\nprint(claves)  # Output: dict_keys(['nombre', 'edad', 'ciudad'])\r\n\r\n# values()\r\nvalores = persona.values()\r\nprint(valores)  # Output: dict_values(['Juan', 30, 'Madrid'])\r\n\r\n# items()\r\nelementos = persona.items()\r\nprint(elementos)  # Output: dict_items([('nombre', 'Juan'), ('edad', 30), ('ciudad', 'Madrid')])\r\n\r\n# update()\r\npersona.update({\"profesion\": \"Ingeniero\", \"pais\": \"España\"})\r\nprint(persona)  # Output: {'nombre': 'Juan', 'edad': 30, 'ciudad': 'Madrid', 'profesion': 'Ingeniero', 'pais': 'España'}\r\n\r\n# clear()\r\n# persona.clear()\r\n# print(persona)  # Output: {}\r\n\r\n# copy()\r\npersona_copia = persona.copy()\r\nprint(persona_copia)  # Output: {'nombre': 'Juan', 'edad': 30, 'ciudad': 'Madrid', 'profesion': 'Ingeniero', 'pais': 'España'}\n```\n\n## ITERACCION SOBRE DICCIONARIOS\n\nPuedes iterar sobre un diccionario utilizando un bucle `for`. Por defecto, la iteración se realiza sobre las claves.\n\n```python\nfor clave in persona:\r\n    print(clave, persona[clave])\n```\n\nTambién puedes iterar sobre los valores o los pares clave-valor utilizando los métodos `values()` e `items()`, respectivamente.\n\n```python\n# Iterar sobre los valores\r\nfor valor in persona.values():\r\n    print(valor)\r\n\r\n# Iterar sobre los pares clave-valor\r\nfor clave, valor in persona.items():\r\n    print(clave, valor)\n```\n\n## COMPRESION DE DICCIONARIOS\n\nAl igual que las listas, los diccionarios también admiten la comprensión, lo que permite crear diccionarios de manera concisa.\n\n```python\n# Crear un diccionario con los cuadrados de los números del 1 al 5\r\ncuadrados = {x: x**2 for x in range(1, 6)}\r\nprint(cuadrados)  # Output: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n```\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### CONTEO DE FRECUENCIA DE PALABRAS\n\nUn ejemplo común es contar la frecuencia de palabras en un texto.\n\n```python\ntexto = \"Este es un ejemplo de texto para contar palabras. Este texto es un ejemplo.\"\r\npalabras = texto.lower().split()\r\n\r\nfrecuencia = {}\r\nfor palabra in palabras:\r\n    if palabra in frecuencia:\r\n        frecuencia[palabra] += 1\r\n    else:\r\n        frecuencia[palabra] = 1\r\n\r\nprint(frecuencia)\r\n# Output: {'este': 2, 'es': 2, 'un': 2, 'ejemplo': 2, 'de': 1, 'texto': 2, 'para': 1, 'contar': 1, 'palabras.': 1, 'texto.': 1}\n```\n\n### AGRUPACION DE DATOS\n\nOtro uso común es agrupar datos relacionados.\n\n```python\nestudiantes = [\r\n    {\"nombre\": \"Ana\", \"edad\": 20, \"carrera\": \"Ingeniería\"},\r\n    {\"nombre\": \"Pedro\", \"edad\": 22, \"carrera\": \"Medicina\"},\r\n    {\"nombre\": \"Sofia\", \"edad\": 21, \"carrera\": \"Ingeniería\"}\r\n]\r\n\r\n# Agrupar estudiantes por carrera\r\ncarreras = {}\r\nfor estudiante in estudiantes:\r\n    carrera = estudiante[\"carrera\"]\r\n    if carrera in carreras:\r\n        carreras[carrera].append(estudiante[\"nombre\"])\r\n    else:\r\n        carreras[carrera] = [estudiante[\"nombre\"]]\r\n\r\nprint(carreras)\r\n# Output: {'Ingeniería': ['Ana', 'Sofia'], 'Medicina': ['Pedro']}\n```\n"
  },
  {
    "slug": "/programming/languages/python/data-types",
    "title": "Tipos de Datos en Python",
    "description": "Explora los diferentes tipos de datos disponibles en Python, incluyendo tipos numéricos, cadenas, booleanos y estructuras de datos como listas, tuplas, diccionarios y conjuntos.",
    "content": "Python ofrece una variedad de tipos de datos incorporados que permiten a los programadores representar y manipular diferentes tipos de información. Comprender estos tipos de datos es fundamental para escribir código eficiente y efectivo en Python.\n\n## TIPOS DE DATOS PRIMITIVOS\n\nLos tipos de datos primitivos son los bloques de construcción básicos de los datos en Python.\n\n1. **Números:**\n   * **Enteros (`int`):** Representan números enteros sin parte decimal.\n     * Ejemplo: `10`, `-5`, `0`\n   * **Números de Punto Flotante (`float`):** Representan números reales con parte decimal.\n     * Ejemplo: `3.14`, `-2.5`, `0.0`\n   * **Números Complejos (`complex`):** Representan números con una parte real y una parte imaginaria.\n     * Ejemplo: `2 + 3j`, `-1 - 1j`\n\n2. **Cadenas (`str`):**\n   * Representan secuencias de caracteres. Las cadenas son inmutables, lo que significa que no se pueden modificar después de su creación.\n     * Ejemplo: `\"Hola\"`, `'Python'`, `\"123\"`\n\n3. **Booleanos (`bool`):**\n   * Representan valores de verdad: `True` o `False`.\n     * Ejemplo: `True`, `False`\n\n## ESTRUCTURA DE DATOS\n\nLas estructuras de datos son contenedores que pueden almacenar múltiples elementos de datos.\n\n1. **Listas (`list`):**\n   * Son colecciones ordenadas y mutables de elementos. Los elementos pueden ser de diferentes tipos.\n     * Ejemplo: `[1, 2, 3]`, `[\"a\", \"b\", \"c\"]`, `[1, \"hello\", 3.14]`\n\n2. **Tuplas (`tuple`):**\n   * Son colecciones ordenadas e inmutables de elementos. Similar a las listas, pero no se pueden modificar después de su creación.\n     * Ejemplo: `(1, 2, 3)`, `(\"a\", \"b\", \"c\")`\n\n3. **Diccionarios (`dict`):**\n   * Son colecciones de pares clave-valor. Las claves deben ser únicas e inmutables (por ejemplo, cadenas, números o tuplas), mientras que los valores pueden ser de cualquier tipo.\n     * Ejemplo: `{\"nombre\": \"Juan\", \"edad\": 30}`, `{1: \"a\", 2: \"b\"}`\n\n4. **Conjuntos (`set`):**\n   * Son colecciones no ordenadas de elementos únicos. Los conjuntos son mutables y se utilizan para realizar operaciones de conjuntos como unión, intersección y diferencia.\n     * Ejemplo: `{1, 2, 3}`, `{\"a\", \"b\", \"c\"}`\n\n## TIPADO DINAMICO\n\nPython es un lenguaje de tipado dinámico, lo que significa que no es necesario declarar el tipo de una variable antes de usarla. El tipo de una variable se determina en tiempo de ejecución en función del valor que se le asigna.\n\n```python\nx = 10        # x es un entero\r\nx = \"Hola\"    # x ahora es una cadena\r\nx = [1, 2, 3] # x ahora es una lista\n```\n\n## MUTABILIDAD VS INMUTABILIDAD\n\nLa mutabilidad se refiere a la capacidad de un objeto para ser modificado después de su creación.\n\nTipos Mutables: Listas, diccionarios y conjuntos son tipos de datos mutables. Esto significa que se pueden modificar sus elementos después de su creación.\n\nTipos Inmutables: Enteros, números de punto flotante, cadenas, booleanos y tuplas son tipos de datos inmutables. Esto significa que no se pueden modificar después de su creación. Si se intenta modificar un objeto inmutable, se creará un nuevo objeto en su lugar.\n\n## OBJETIVOS CLAVE\n\nComprender los Tipos de Datos: Familiarizarse con los diferentes tipos de datos disponibles en Python y cómo se utilizan para representar diferentes tipos de información.\n\nDistinguir Mutabilidad e Inmutabilidad: Entender la diferencia entre tipos de datos mutables e inmutables y cómo esto afecta la forma en que se manipulan los datos.\n\nElegir el Tipo de Datos Correcto: Aprender a seleccionar el tipo de datos más apropiado para cada situación, teniendo en cuenta factores como la necesidad de mutabilidad, la eficiencia y la legibilidad del código.\n\nUtilizar Estructuras de Datos: Dominar el uso de estructuras de datos como listas, tuplas, diccionarios y conjuntos para organizar y manipular colecciones de datos de manera eficiente.\n\n## INFORMACION INTERESANTE\n\nConversión de Tipos: Python permite convertir entre diferentes tipos de datos utilizando funciones como int(), float(), str(), list(), tuple(), dict() y set().\n\nOperadores: Python ofrece una variedad de operadores para realizar operaciones en diferentes tipos de datos, como operadores aritméticos, operadores de comparación, operadores lógicos y operadores de pertenencia.\n\nMétodos: Cada tipo de datos en Python tiene una serie de métodos asociados que permiten realizar operaciones específicas en los datos. Por ejemplo, las cadenas tienen métodos como upper(), lower(), split() y replace().\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: TIPOS NUMERICOS\n\n```python\nentero = 10\r\nflotante = 3.14\r\ncomplejo = 2 + 3j\r\n\r\nprint(type(entero))    # <class 'int'>\r\nprint(type(flotante))  # <class 'float'>\r\nprint(type(complejo))  # <class 'complex'>\n```\n\n### EJEMPLO 2: CADENAS\n\n```python\ncadena = \"Hola, mundo!\"\r\nprint(cadena)           # Hola, mundo!\r\nprint(cadena[0])        # H\r\nprint(len(cadena))      # 13\n```\n\n### EJEMPLO 3: LISTAS\n\n```python\nlista = [1, 2, 3, \"a\", \"b\", \"c\"]\r\nprint(lista)            # [1, 2, 3, 'a', 'b', 'c']\r\nlista.append(4)\r\nprint(lista)            # [1, 2, 3, 'a', 'b', 'c', 4]\n```\n\n### EJEMPLO 4: TUPLAS\n\n```python\ntupla = (1, 2, 3)\r\nprint(tupla)            # (1, 2, 3)\r\n# tupla[0] = 4          # Error: 'tuple' object does not support item assignment\n```\n\n### EJEMPLO 5: DICCIONARIO\n\n```python\ndiccionario = {\"nombre\": \"Juan\", \"edad\": 30}\r\nprint(diccionario[\"nombre\"])  # Juan\r\ndiccionario[\"ciudad\"] = \"Madrid\"\r\nprint(diccionario)            # {'nombre': 'Juan', 'edad': 30, 'ciudad': 'Madrid'}\n```\n\n### EJEMPLO 6: CONJUNTOS\n\n```python\nconjunto = {1, 2, 3, 3, 4, 5}\r\nprint(conjunto)           # {1, 2, 3, 4, 5}\r\nconjunto.add(6)\r\nprint(conjunto)           # {1, 2, 3, 4, 5, 6}\n```\n"
  },
  {
    "slug": "/programming/languages/python/data-types/list-operations",
    "title": "Operaciones con Listas en Python",
    "description": "Guía completa sobre las operaciones fundamentales que se pueden realizar con listas en Python, incluyendo acceso, modificación, adición, eliminación y manipulación avanzada de elementos.",
    "content": "Las listas en Python son una de las estructuras de datos más versátiles y utilizadas. Permiten almacenar colecciones ordenadas de elementos, que pueden ser de diferentes tipos. Dominar las operaciones con listas es esencial para cualquier programador de Python, ya que facilita la manipulación y el procesamiento de datos de manera eficiente.\n\n## INTRODUCCION A LAS LISTAS EN PYTHON\n\nUna lista en Python es una secuencia mutable de elementos. Esto significa que puedes cambiar los elementos de una lista después de su creación. Las listas se definen utilizando corchetes `[]` y los elementos se separan por comas.\n\n```python\nmi_lista = [1, 2, 3, \"a\", \"b\", \"c\", 4.5, 5.6]\n```\n\n## OPERACIONES BASICAS CON LISTAS\n\n### 1. ACCESO A ELEMENTOS\n\nPuedes acceder a los elementos de una lista utilizando su índice. Los índices en Python comienzan en 0.\n\n```python\nmi_lista = [10, 20, 30, 40, 50]\r\nprint(mi_lista[0])  # Imprime 10\r\nprint(mi_lista[3])  # Imprime 40\n```\n\nTambién puedes utilizar índices negativos para acceder a los elementos desde el final de la lista.\n\n```python\nprint(mi_lista[-1]) # Imprime 50 (el último elemento)\r\nprint(mi_lista[-2]) # Imprime 40 (el penúltimo elemento)\n```\n\n### 2. MODIFICACION DE ELEMENTOS\n\nLas listas son mutables, lo que significa que puedes cambiar el valor de un elemento específico.\n\n```python\nmi_lista = [1, 2, 3]\r\nmi_lista[1] = 10\r\nprint(mi_lista)  # Imprime [1, 10, 3]\n```\n\n### 3. ADICION DE ELEMENTOS\n\nEl método `append()` añade un elemento al final de la lista.\n\n```python\nmi_lista = [1, 2, 3]\r\nmi_lista.append(4)\r\nprint(mi_lista)  # Imprime [1, 2, 3, 4]\n```\n\nEl método `insert()` añade un elemento en una posición específica.\n\n```python\nmi_lista = [1, 2, 3]\r\nmi_lista.insert(1, 10)  # Inserta 10 en la posición 1\r\nprint(mi_lista)  # Imprime [1, 10, 2, 3]\n```\n\nEl método `extend()` añade múltiples elementos de otra lista (o cualquier iterable) al final de la lista actual.\n\n```python\nmi_lista = [1, 2, 3]\r\notra_lista = [4, 5, 6]\r\nmi_lista.extend(otra_lista)\r\nprint(mi_lista)  # Imprime [1, 2, 3, 4, 5, 6]\n```\n\n### 4. ELIMINACION DE ELEMENTOS\n\nEl método `remove()` elimina la primera ocurrencia de un valor específico de la lista.\n\n```python\nmi_lista = [1, 2, 3, 2]\r\nmi_lista.remove(2)\r\nprint(mi_lista)  # Imprime [1, 3, 2]\n```\n\nEl método `pop()` elimina el elemento en una posición específica y lo retorna. Si no se especifica la posición, elimina y retorna el último elemento.\n\n```python\nmi_lista = [1, 2, 3]\r\nelemento = mi_lista.pop(1)  # Elimina el elemento en la posición 1 (2)\r\nprint(mi_lista)  # Imprime [1, 3]\r\nprint(elemento)  # Imprime 2\r\n\r\nelemento = mi_lista.pop()   # Elimina el último elemento (3)\r\nprint(mi_lista)  # Imprime [1]\r\nprint(elemento)  # Imprime 3\n```\n\nLa palabra clave `del` elimina un elemento en una posición específica o la lista completa.\n\n```python\nmi_lista = [1, 2, 3]\r\ndel mi_lista[1]\r\nprint(mi_lista)  # Imprime [1, 3]\r\n\r\ndel mi_lista  # Elimina la lista\r\n# print(mi_lista)  # Esto causará un error porque la lista ya no existe\n```\n\n### 5. BUSQUEDA DE ELEMENTOS\n\nEl método `index()` retorna el índice de la primera ocurrencia de un valor específico.\n\n```python\nmi_lista = [10, 20, 30, 20]\r\nindice = mi_lista.index(20)\r\nprint(indice)  # Imprime 1\n```\n\nSi el valor no está en la lista, se genera una excepción `ValueError`.\n\nEl método `count()` retorna el número de veces que un valor aparece en la lista.\n\n```python\nmi_lista = [10, 20, 30, 20, 20]\r\nconteo = mi_lista.count(20)\r\nprint(conteo)  # Imprime 3\n```\n\n### 6. ORDENAMIENTO DE LISTAS\n\nEl método `sort()` ordena la lista en su lugar (modifica la lista original).\n\n```python\nmi_lista = [3, 1, 4, 1, 5, 9, 2, 6]\r\nmi_lista.sort()\r\nprint(mi_lista)  # Imprime [1, 1, 2, 3, 4, 5, 6, 9]\r\n\r\nmi_lista.sort(reverse=True)  # Ordena en orden descendente\r\nprint(mi_lista)  # Imprime [9, 6, 5, 4, 3, 2, 1, 1]\n```\n\nLa función `sorted()` retorna una nueva lista ordenada sin modificar la lista original.\n\n```python\nmi_lista = [3, 1, 4, 1, 5, 9, 2, 6]\r\nnueva_lista = sorted(mi_lista)\r\nprint(nueva_lista)  # Imprime [1, 1, 2, 3, 4, 5, 6, 9]\r\nprint(mi_lista)     # Imprime [3, 1, 4, 1, 5, 9, 2, 6] (la lista original no se modifica)\n```\n\n### 7. INVERSION DE LISTAS\n\nEl método `reverse()` invierte el orden de los elementos en la lista en su lugar.\n\n```python\nmi_lista = [1, 2, 3, 4, 5]\r\nmi_lista.reverse()\r\nprint(mi_lista)  # Imprime [5, 4, 3, 2, 1]\n```\n\n### 8. COPIA DE LISTAS\n\nEl método `copy()` retorna una copia superficial de la lista.\n\n```python\nmi_lista = [1, 2, 3]\r\ncopia_lista = mi_lista.copy()\r\nprint(copia_lista)  # Imprime [1, 2, 3]\r\n\r\nmi_lista[0] = 10\r\nprint(mi_lista)     # Imprime [10, 2, 3]\r\nprint(copia_lista)  # Imprime [1, 2, 3] (la copia no se modifica)\n```\n\nTambién puedes usar la función `list()` para crear una copia de la lista.\n\n```python\nmi_lista = [1, 2, 3]\r\ncopia_lista = list(mi_lista)\r\nprint(copia_lista)  # Imprime [1, 2, 3]\n```\n\n### 9. LIMPIEZA DE LISTAS\n\nEl método `clear()` elimina todos los elementos de la lista, dejándola vacía.\n\n```python\nmi_lista = [1, 2, 3]\r\nmi_lista.clear()\r\nprint(mi_lista)  # Imprime []\n```\n\n## OPERACIONES AVANZADAS CON LISTAS\n\n### 1. CONCATENACION DE LISTAS\n\nPuedes concatenar listas utilizando el operador `+`.\n\n```python\nlista1 = [1, 2, 3]\r\nlista2 = [4, 5, 6]\r\nlista_concatenada = lista1 + lista2\r\nprint(lista_concatenada)  # Imprime [1, 2, 3, 4, 5, 6]\n```\n\n### 2. MULTIPLICACION DE LISTAS\n\nPuedes multiplicar una lista por un número entero para repetir sus elementos.\n\n```python\nmi_lista = [1, 2, 3]\r\nlista_multiplicada = mi_lista * 3\r\nprint(lista_multiplicada)  # Imprime [1, 2, 3, 1, 2, 3, 1, 2, 3]\n```\n\n### 3. COMPRENSION DE LISTAS\n\nLa comprensión de listas es una forma concisa de crear listas en Python. Permite generar una nueva lista aplicando una expresión a cada elemento de una lista existente.\n\n```python\n# Ejemplo: Crear una lista con los cuadrados de los números del 0 al 9\r\ncuadrados = [x**2 for x in range(10)]\r\nprint(cuadrados)  # Imprime [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\r\n\r\n# Ejemplo: Crear una lista con los números pares del 0 al 9\r\npares = [x for x in range(10) if x % 2 == 0]\r\nprint(pares)  # Imprime [0, 2, 4, 6, 8]\n```\n\n### 4. LISTAS ANIDADAS\n\nLas listas pueden contener otras listas como elementos.\n\n```python\nmatriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\nprint(matriz[0][1])  # Imprime 2 (elemento en la fila 0, columna 1)\n```\n\n## EJEMPLOS DE IMPLEMENTACION\n\n### EJEMPLO 1: FILTRAR ELEMENTOS DE UNA LISTA\n\n```python\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\npares = [x for x in numeros if x % 2 == 0]\r\nimpares = [x for x in numeros if x % 2 != 0]\r\n\r\nprint(\"Números pares:\", pares)    # Imprime [2, 4, 6, 8, 10]\r\nprint(\"Números impares:\", impares)  # Imprime [1, 3, 5, 7, 9]\n```\n\n### EJEMPLO 2: PROCESAR ELEMENTOS DE UNA LISTA\n\n```python\npalabras = [\"hola\", \"mundo\", \"python\"]\r\nlongitudes = [len(palabra) for palabra in palabras]\r\n\r\nprint(\"Longitudes de las palabras:\", longitudes)  # Imprime [4, 5, 6]\n```\n"
  },
  {
    "slug": "/programming/languages/python/data-types/list-operations/map-filter-reduce",
    "title": "Funciones map(), filter() y reduce() en Python",
    "description": "Descripción detallada de las funciones map(), filter() y reduce() en Python, incluyendo ejemplos de uso y consideraciones importantes.",
    "content": "Las funciones `map()`, `filter()` y `reduce()` son herramientas poderosas en Python que permiten aplicar operaciones a secuencias de datos de manera concisa y eficiente. Estas funciones son pilares de la programación funcional en Python y facilitan la escritura de código más limpio y legible.\n\n## DESCRIPCION GENERAL\n\n* **`map()`**: Aplica una función a cada elemento de un iterable (como una lista) y devuelve un iterador con los resultados.\n* **`filter()`**: Filtra los elementos de un iterable basándose en una función que devuelve `True` o `False` para cada elemento.\n* **`reduce()`**: Aplica una función de dos argumentos acumulativamente a los elementos de un iterable, reduciéndolo a un solo valor.\n\n## OBJETIVOS CLAVE\n\n* Entender el propósito y la sintaxis de cada función.\n* Aprender a usar estas funciones con funciones anónimas (lambda).\n* Comprender cómo estas funciones pueden simplificar el código y mejorar la eficiencia.\n* Conocer las alternativas modernas a `map()`, `filter()` y `reduce()` en Python 3.\n\n## map()\n\nLa función `map()` toma dos argumentos: una función y un iterable. Aplica la función a cada elemento del iterable y devuelve un iterador que produce los resultados.\n\n### SINTAXIS map()\n\n```python\nmap(function, iterable, ...)\n```\n\n* **function**: La función que se aplicará a cada elemento del iterable.\n\n* **iterable**: Uno o más iterables sobre los cuales se aplicará la función.\n\n### EJEMPLOS DE IMPLEMENTACION map()\n\n```python\ndef cuadrado(x):\r\n    return x * x\r\n\r\nnumeros = [1, 2, 3, 4, 5]\r\nresultados = map(cuadrado, numeros)\r\n\r\nprint(list(resultados))  # Output: [1, 4, 9, 16, 25]\n```\n\nEn este ejemplo, la función cuadrado se aplica a cada número en la lista numeros. La función map() devuelve un iterador, que luego se convierte en una lista para imprimir los resultados.\n\n### USO CON FUNCIONES LAMBDA map()\n\nLas funciones lambda son pequeñas funciones anónimas que se pueden definir en línea. Son especialmente útiles con `map()` para operaciones simples.\n\n```python\nnumeros = [1, 2, 3, 4, 5]\r\nresultados = map(lambda x: x * x, numeros)\r\n\r\nprint(list(resultados))  # Output: [1, 4, 9, 16, 25]\n```\n\nEste ejemplo es equivalente al anterior, pero utiliza una función lambda para calcular el cuadrado de cada número.\n\n## MULTIPLES ITERABLES\n\n`map()` puede tomar múltiples iterables como argumentos. En este caso, la función debe aceptar tantos argumentos como iterables se proporcionen.\n\n```python\nnumeros1 = [1, 2, 3]\r\nnumeros2 = [4, 5, 6]\r\n\r\nresultados = map(lambda x, y: x + y, numeros1, numeros2)\r\n\r\nprint(list(resultados))  # Output: [5, 7, 9]\n```\n\nAquí, la función lambda suma los elementos correspondientes de numeros1 y numeros2.\n\n`filter()`\n\nLa función `filter()` toma dos argumentos: una función y un iterable. Aplica la función a cada elemento del iterable y devuelve un iterador con los elementos para los cuales la función devuelve `True`.\n\n### SINTAXIS\n\n```python\nfilter(function, iterable)\n```\n\n* **function**: Una función que devuelve True o False.\n\n* **iterable**: El iterable que se va a filtrar.\n\n### EJEMPLO DE IMPLEMENTACION\n\n```python\ndef es_par(x):\r\n    return x % 2 == 0\r\n\r\nnumeros = [1, 2, 3, 4, 5, 6]\r\nresultados = filter(es_par, numeros)\r\n\r\nprint(list(resultados))  # Output: [2, 4, 6]\n```\n\nEn este ejemplo, la función `es_par` verifica si un número es par. La función `filter()` devuelve un iterador con los números pares de la lista numeros.\n\n### USO CON FUNCIONES LAMBDA\n\nAl igual que con `map()`, las funciones lambda son útiles con `filter()` para operaciones simples.\n\n```python\nnumeros = [1, 2, 3, 4, 5, 6]\r\nresultados = filter(lambda x: x % 2 == 0, numeros)\r\n\r\nprint(list(resultados))  # Output: [2, 4, 6]\n```\n\nEste ejemplo es equivalente al anterior, pero utiliza una función lambda para verificar si un número es par.\n\n## reduce()\n\nLa función `reduce()` aplica una función de dos argumentos acumulativamente a los elementos de un iterable, reduciéndolo a un solo valor. A diferencia de `map()` y `filter()`, `reduce()` no es una función incorporada en Python 3 y debe importarse desde el módulo `functools`.\n\n### SINTAXIS reduce()\n\n```python\nfrom functools import reduce\r\n\r\nreduce(function, iterable[, initializer])\n```\n\n* **function**: Una función que toma dos argumentos y devuelve un valor.\n\n* **iterable**: El iterable que se va a reducir.\n\n* **initializer (opcional)**: Un valor inicial que se utiliza como primer argumento en la primera llamada a la función.\n\n### EJEMPLO DE IMPLEMENTACION reduce()\n\n```python\nfrom functools import reduce\r\n\r\ndef multiplicar(x, y):\r\n    return x * y\r\n\r\nnumeros = [1, 2, 3, 4, 5]\r\nresultado = reduce(multiplicar, numeros)\r\n\r\nprint(resultado)  # Output: 120\n```\n\nEn este ejemplo, la función `multiplicar` multiplica dos números. La función `reduce()` aplica esta función acumulativamente a los elementos de la lista `numeros`, resultando en el producto de todos los números.\n\n### USO CON FUNCIONES LAMBDA reduce()\n\nAl igual que con map() y filter(), las funciones lambda son útiles con reduce() para operaciones simples.\n\n```python\nfrom functools import reduce\r\n\r\nnumeros = [1, 2, 3, 4, 5]\r\nresultado = reduce(lambda x, y: x * y, numeros)\r\n\r\nprint(resultado)  # Output: 120\n```\n\nEste ejemplo es equivalente al anterior, pero utiliza una función lambda para multiplicar los números.\n\n### INICIALIZADOR\n\nEl argumento `initializer` se utiliza como valor inicial. Si se proporciona, se utiliza como el primer argumento en la primera llamada a la función.\n\n```python\nfrom functools import reduce\r\n\r\nnumeros = [1, 2, 3, 4, 5]\r\nresultado = reduce(lambda x, y: x * y, numeros, 10)\r\n\r\nprint(resultado)  # Output: 1200\n```\n\nEn este ejemplo, el valor inicial es 10, por lo que el resultado es 10 multiplicado por el producto de todos los números en la lista.\n\n## ALTERNATIVAS MODERNAS\n\nEn Python 3, las funciones `map()` y `filter()` devuelven iteradores en lugar de listas, lo que puede ser más eficiente en términos de memoria. Sin embargo, a menudo se utilizan comprensiones de lista y expresiones generadoras como alternativas más legibles y Pythonicas.\n\n### COMPRESIONES DE LISTA\n\nLas comprensiones de lista ofrecen una sintaxis concisa para crear listas basadas en iterables existentes.\n\n```python\nnumeros = [1, 2, 3, 4, 5]\r\nresultados = [x * x para x in numeros]\r\n\r\nprint(resultados)  # Output: [1, 4, 9, 16, 25]\n```\n\nEste ejemplo es equivalente al uso de map() con una función lambda para calcular el cuadrado de cada número.\n\n### EXPRESIONES GENERADORAS\n\nLas expresiones generadoras son similares a las comprensiones de lista, pero devuelven un iterador en lugar de una lista. Son útiles para trabajar con grandes cantidades de datos, ya que no almacenan todos los resultados en la memoria a la vez.\n\n```python\nnumeros = [1, 2, 3, 4, 5]\r\nresultados = (x * x para x in numeros)\r\n\r\nprint(list(resultados))  # Output: [1, 4, 9, 16, 25]\n```\n\nEste ejemplo es equivalente al uso de `map()` con una función lambda para calcular el cuadrado de cada número, pero devuelve un iterador en lugar de una lista.\n\n## ALTERNATIVA A filter()\n\nLas comprensiones de lista y las expresiones generadoras también se pueden utilizar como alternativas a `filter()`.\n\n```python\nnumeros = [1, 2, 3, 4, 5, 6]\r\nresultados = [x para x in numeros if x % 2 == 0]\r\n\r\nprint(resultados)  # Output: [2, 4, 6]\n```\n\nEste ejemplo es equivalente al uso de `filter()` con una función lambda para filtrar los números pares.\n\n## ALTERNATIVA A reduce()\n\nPara `reduce()`, no hay una alternativa tan directa en Python moderno, pero se puede lograr el mismo resultado utilizando un bucle `for` o una función acumuladora.\n\n```python\nnumeros = [1, 2, 3, 4, 5]\r\nresultado = 1\r\nfor x in numeros:\r\n    resultado *= x\r\n\r\nprint(resultado)  # Output: 120\n```\n\nEste ejemplo es equivalente al uso de `reduce()` con una función lambda para multiplicar todos los números en la lista.\n\n## CONSIDERACIONES IMPORTANTES\n\n* **Legibilidad**: Aunque `map()`, `filter()` y `reduce()` pueden ser concisas, a veces las comprensiones de lista y las expresiones generadoras son más legibles, especialmente para operaciones complejas.\n\n* **Eficiencia**: En Python 3, `map()` y `filter()` devuelven iteradores, lo que puede ser más eficiente en términos de memoria que las listas. Sin embargo, las comprensiones de lista y las expresiones generadoras a menudo son más rápidas.\n\n* **reduce()**: Debido a su eliminación de las funciones incorporadas, se recomienda usar alternativas más explícitas como bucles `for` para mejorar la legibilidad.\n\n## EJEMPLOS ADICIONALES\n\n### EJEMPLO 1: CONVERTIR UNA LISTA DE STRING A ENTEROS\n\n```python\nstrings = [\"1\", \"2\", \"3\", \"4\", \"5\"]\r\nenteros = list(map(int, strings))\r\n\r\nprint(enteros)  # Output: [1, 2, 3, 4, 5]\n```\n\n### EJEMPLO 2: FILTRAR PALABRAS QUE COMIENZAN CON UNA VOCAL\n\n```python\npalabras = [\"manzana\", \"banana\", \"uva\", \"pera\", \"kiwi\"]\r\nvocales = [\"a\", \"e\", \"i\", \"o\", \"u\"]\r\nresultados = list(filter(lambda x: x[0].lower() in vocales, palabras))\r\n\r\nprint(resultados)  # Output: ['manzana', 'uva']\n```\n\n### EJEMPLO 3: CALCULAR LA SUMA DE LOS CUADRADOS DE UNA LISTA\n\n```python\nfrom functools import reduce\r\n\r\nnumeros = [1, 2, 3, 4, 5]\r\nresultado = reduce(lambda x, y: x + y**2, numeros, 0)\r\n\r\nprint(resultado)  # Output: 55 (0 + 1 + 4 + 9 + 16 + 25)\n```\n"
  },
  {
    "slug": "/programming/languages/python/data-types/numeric-operations",
    "title": "Operaciones con tipos numéricos en Python",
    "description": "Guía detallada sobre las operaciones aritméticas, funciones y bibliotecas para trabajar con números en Python.",
    "content": "Python ofrece una amplia gama de herramientas para realizar operaciones con tipos numéricos, que incluyen enteros (`int`), números de punto flotante (`float`) y números complejos (`complex`). Este documento explora las operaciones aritméticas básicas, las funciones integradas y las bibliotecas que facilitan el trabajo con números en Python.\n\n## OPERACIONES ARITMETICAS BASICAS\n\nPython soporta las operaciones aritméticas básicas utilizando los siguientes operadores:\n\n* **Suma (+):** Suma dos números.\n\n* **Resta (-):** Resta dos números.\n\n* **Multiplicación (\\*):** Multiplica dos números.\n\n* **División (/):** Divide dos números y devuelve un número de punto flotante.\n\n* **División Entera (//):** Divide dos números y devuelve la parte entera del cociente.\n\n* **Módulo (%):** Devuelve el resto de la división entre dos números.\n\n* **Potenciación (\\*\\*):** Eleva un número a la potencia de otro.\n\n```python\na = 10\r\nb = 3\r\n\r\nsuma = a + b                # Resultado: 13\r\nresta = a - b               # Resultado: 7\r\nmultiplicacion = a * b      # Resultado: 30\r\ndivision = a / b            # Resultado: 3.333...\r\ndivision_entera = a // b    # Resultado: 3\r\nmodulo = a % b              # Resultado: 1\r\npotencia = a ** b           # Resultado: 1000\r\n\r\nprint(f\"Suma: {suma}, Resta: {resta}, Multiplicación: {multiplicacion}\")\r\nprint(f\"División: {division}, División Entera: {division_entera}, Módulo: {modulo}, Potencia: {potencia}\")\n```\n\n## FUNCIONES INTEGRADAS PARA OPERACIONES NUMERICAS\n\nPython ofrece varias funciones integradas que facilitan las operaciones numéricas:\n\n* **abs(x)**: Devuelve el valor absoluto de x.\n\n* **round(x, n)**: Redondea x a n decimales.\n\n* **pow(x, y)**: Eleva x a la potencia de y (equivalente a x \\*\\* y).\n\n* **min(a, b, ...)**: Devuelve el valor mínimo entre los argumentos.\n\n* **max(a, b, ...)**: Devuelve el valor máximo entre los argumentos.\n\n```python\nx = -5.7\r\ny = 3.14159\r\n\r\nvalor_absoluto = abs(x)     # Resultado: 5.7\r\nredondeo = round(y, 2)      # Resultado: 3.14\r\npotencia = pow(2, 3)        # Resultado: 8\r\nminimo = min(1, 2, 3, 4)    # Resultado: 1\r\nmaximo = max(1, 2, 3, 4)    # Resultado: 4\r\n\r\nprint(f\"Valor Absoluto: {valor_absoluto}, Redondeo: {redondeo}, Potencia: {potencia}\")\r\nprint(f\"Mínimo: {minimo}, Máximo: {maximo}\")\n```\n\n## BIBLIOTECA math\n\nLa biblioteca math proporciona funciones matemáticas más avanzadas:\n\n* **math.sqrt(x)**: Devuelve la raíz cuadrada de x.\n\n* **math.ceil(x)**: Redondea x al entero superior más cercano.\n\n* **math.floor(x)**: Redondea x al entero inferior más cercano.\n\n* **math.sin(x)**: Devuelve el seno de x (en radianes).\n\n* **math.cos(x)**: Devuelve el coseno de x (en radianes).\n\n* **math.tan(x)**: Devuelve la tangente de x (en radianes).\n\n* **math.log(x, base)**: Devuelve el logaritmo de x en la base especificada.\n\n* **math.pi**: Constante que representa el valor de π (pi).\n\n* **math.e**: Constante que representa el número de Euler.\n\n```python\nimport math\r\n\r\nx = 16\r\ny = 5.7\r\n\r\nraiz_cuadrada = math.sqrt(x)   # Resultado: 4.0\r\nceil = math.ceil(y)           # Resultado: 6\r\nfloor = math.floor(y)          # Resultado: 5\r\nseno = math.sin(math.pi / 2)  # Resultado: 1.0\r\nlogaritmo = math.log(10, 10)   # Resultado: 1.0\r\n\r\nprint(f\"Raíz Cuadrada: {raiz_cuadrada}, Ceil: {ceil}, Floor: {floor}\")\r\nprint(f\"Seno (π/2): {seno}, Logaritmo (10 en base 10): {logaritmo}\")\r\nprint(f\"Valor de Pi: {math.pi}, Valor de e: {math.e}\")\n```\n\n## BIBLIOTECA cmath PARA NUMEROS COMPLEJOS\n\nPara trabajar con números complejos, Python ofrece la biblioteca cmath:\n\n* **cmath.sqrt(x)**: Devuelve la raíz cuadrada de un número complejo.\n\n* **cmath.phase(x)**: Devuelve la fase de un número complejo.\n\n* **cmath.polar(x)**: Convierte un número complejo a coordenadas polares.\n\n* **cmath.rect(r, phi)**: Convierte coordenadas polares a un número complejo.\n\n```python\nimport cmath\r\n\r\nz = complex(3, -4)\r\n\r\nraiz_cuadrada = cmath.sqrt(z)  # Resultado: (2-1j)\r\nfase = cmath.phase(z)         # Resultado: -0.927...\r\npolar = cmath.polar(z)        # Resultado: (5.0, -0.927...)\r\nrect = cmath.rect(5, 0)       # Resultado: (5+0j)\r\n\r\nprint(f\"Raíz Cuadrada: {raiz_cuadrada}, Fase: {fase}, Polar: {polar}, Rect: {rect}\")\n```\n\n## FORMATEO DE NUMEROS\n\nPython permite formatear números para controlar la precisión y la representación:\n\n* **f-strings**: Permiten insertar variables directamente en cadenas de texto.\n\n* **format()**: Método para formatear cadenas.\n\n```python\nnumero = 1234.56789\r\n\r\n# Usando f-strings\r\nprint(f\"Número con dos decimales: {numero:.2f}\")       # Resultado: 1234.57\r\nprint(f\"Número con separador de miles: {numero:,.2f}\")  # Resultado: 1,234.57\r\n\r\n# Usando format()\r\nprint(\"Número con dos decimales: {:.2f}\".format(numero))       # Resultado: 1234.57\r\nprint(\"Número con separador de miles: {:,.2f}\".format(numero))  # Resultado: 1,234.57\n```\n"
  },
  {
    "slug": "/programming/languages/python/data-types/set-operations",
    "title": "Operaciones con conjuntos",
    "description": "",
    "content": ""
  },
  {
    "slug": "/programming/languages/python/data-types/string-methods",
    "title": "Métodos de Cadenas en Python",
    "description": "Exploración exhaustiva de los métodos de cadenas en Python, incluyendo manipulación, búsqueda, validación y formateo.",
    "content": "Las cadenas son uno de los tipos de datos más fundamentales en Python, utilizadas para representar texto. Python ofrece una rica variedad de métodos integrados para manipular y trabajar con cadenas de manera eficiente. Este documento explora en detalle estos métodos, proporcionando ejemplos y casos de uso para cada uno.\n\n### OBJETIVOS CLAVE\n\n1. **Manipulación de Cadenas:** Aprender a modificar cadenas, como cambiar mayúsculas/minúsculas, eliminar espacios en blanco y dividir/unir cadenas.\n2. **Búsqueda y Reemplazo:** Dominar las técnicas para buscar subcadenas dentro de una cadena y reemplazarlas.\n3. **Validación de Cadenas:** Utilizar métodos para verificar si una cadena cumple con ciertos criterios, como ser numérica, alfabética o contener solo espacios en blanco.\n4. **Formateo de Cadenas:** Explorar las diferentes formas de formatear cadenas para insertar valores y crear salidas personalizadas.\n\n### METODOS DE MANIPULACION DE CADENAS\n\n* **`lower()`:** Convierte todos los caracteres de una cadena a minúsculas.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  texto_minusculas = texto.lower()\r\n  print(texto_minusculas)  # Output: hola mundo\n  ```\n* **`upper()`:** Convierte todos los caracteres de una cadena a mayúsculas.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  texto_mayusculas = texto.upper()\r\n  print(texto_mayusculas)  # Output: HOLA MUNDO\n  ```\n* **`capitalize()`:** Convierte el primer carácter de una cadena a mayúscula y el resto a minúsculas.\n\n  ```python\n  texto = \"hola mundo\"\r\n  texto_capitalizado = texto.capitalize()\r\n  print(texto_capitalizado)  # Output: Hola mundo\n  ```\n* **`title()`:** Convierte el primer carácter de cada palabra en una cadena a mayúscula.\n\n  ```python\n  texto = \"hola mundo\"\r\n  texto_titulo = texto.title()\r\n  print(texto_titulo)  # Output: Hola Mundo\n  ```\n* **`swapcase()`:** Invierte las mayúsculas y minúsculas en una cadena.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  texto_invertido = texto.swapcase()\r\n  print(texto_invertido)  # Output: hOLA mUNDO\n  ```\n* **`strip()`:** Elimina los espacios en blanco al principio y al final de una cadena.\n\n  ```python\n  texto = \"   Hola Mundo   \"\r\n  texto_sin_espacios = texto.strip()\r\n  print(texto_sin_espacios)  # Output: Hola Mundo\n  ```\n* **`lstrip()`:** Elimina los espacios en blanco al principio de una cadena.\n\n  ```python\n  texto = \"   Hola Mundo   \"\r\n  texto_sin_espacios_izquierda = texto.lstrip()\r\n  print(texto_sin_espacios_izquierda)  # Output: Hola Mundo\n  ```\n* **`rstrip()`:** Elimina los espacios en blanco al final de una cadena.\n\n  ```python\n  texto = \"   Hola Mundo   \"\r\n  texto_sin_espacios_derecha = texto.rstrip()\r\n  print(texto_sin_espacios_derecha)  # Output:   Hola Mundo\n  ```\n* **`removeprefix(prefix)` (Python 3.9+):** Elimina un prefijo específico de una cadena si está presente.\n\n  ```python\n  texto = \"PrefijoHola Mundo\"\r\n  texto_sin_prefijo = texto.removeprefix(\"Prefijo\")\r\n  print(texto_sin_prefijo)  # Output: Hola Mundo\n  ```\n* **`removesuffix(suffix)` (Python 3.9+):** Elimina un sufijo específico de una cadena si está presente.\n\n  ```python\n  texto = \"Hola MundoSufijo\"\r\n  texto_sin_sufijo = texto.removesuffix(\"Sufijo\")\r\n  print(texto_sin_sufijo)  # Output: Hola Mundo\n  ```\n\n### METODOS DE BUSQUEDA Y REEMPLAZO\n\n* **`find(subcadena, inicio, fin)`:** Busca la primera ocurrencia de una subcadena dentro de una cadena y devuelve su índice. Devuelve -1 si no se encuentra. Los argumentos `inicio` y `fin` son opcionales y especifican el rango de búsqueda.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  indice = texto.find(\"Hola\")\r\n  print(indice)  # Output: 0\r\n  indice2 = texto.find(\"Hola\", 1)\r\n  print(indice2) # Output: 12\n  ```\n* **`rfind(subcadena, inicio, fin)`:** Busca la última ocurrencia de una subcadena dentro de una cadena y devuelve su índice. Devuelve -1 si no se encuentra.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  indice = texto.rfind(\"Hola\")\r\n  print(indice)  # Output: 12\n  ```\n* **`index(subcadena, inicio, fin)`:** Similar a `find()`, pero lanza una excepción `ValueError` si la subcadena no se encuentra.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  indice = texto.index(\"Mundo\")\r\n  print(indice)  # Output: 5\n  ```\n* **`rindex(subcadena, inicio, fin)`:** Similar a `rfind()`, pero lanza una excepción `ValueError` si la subcadena no se encuentra.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  indice = texto.rindex(\"Hola\")\r\n  print(indice)  # Output: 12\n  ```\n* **`startswith(prefijo, inicio, fin)`:** Verifica si una cadena comienza con un prefijo específico.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  comienza_con_hola = texto.startswith(\"Hola\")\r\n  print(comienza_con_hola)  # Output: True\n  ```\n* **`endswith(sufijo, inicio, fin)`:** Verifica si una cadena termina con un sufijo específico.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  termina_con_mundo = texto.endswith(\"Mundo\")\r\n  print(termina_con_mundo)  # Output: True\n  ```\n* **`replace(viejo, nuevo, conteo)`:** Reemplaza todas las ocurrencias de una subcadena con otra. El argumento `conteo` es opcional y especifica el número máximo de reemplazos a realizar.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  nuevo_texto = texto.replace(\"Hola\", \"Adiós\")\r\n  print(nuevo_texto)  # Output: Adiós Mundo, Adiós Python\n  ```\n* **`count(subcadena, inicio, fin)`:** Cuenta el número de ocurrencias de una subcadena dentro de una cadena.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  conteo = texto.count(\"Hola\")\r\n  print(conteo)  # Output: 2\n  ```\n\n### METODOS DE VALIDACION DE CADENAS\n\n* **`isalnum()`:** Devuelve `True` si todos los caracteres de la cadena son alfanuméricos (letras o números) y la cadena no está vacía.\n\n  ```python\n  texto1 = \"HolaMundo123\"\r\n  texto2 = \"Hola Mundo\"\r\n  print(texto1.isalnum())  # Output: True\r\n  print(texto2.isalnum())  # Output: False\n  ```\n* **`isalpha()`:** Devuelve `True` si todos los caracteres de la cadena son letras y la cadena no está vacía.\n\n  ```python\n  texto1 = \"HolaMundo\"\r\n  texto2 = \"Hola Mundo123\"\r\n  print(texto1.isalpha())  # Output: True\r\n  print(texto2.isalpha())  # Output: False\n  ```\n* **`isdigit()`:** Devuelve `True` si todos los caracteres de la cadena son dígitos y la cadena no está vacía.\n\n  ```python\n  texto1 = \"12345\"\r\n  texto2 = \"123Hola\"\r\n  print(texto1.isdigit())  # Output: True\r\n  print(texto2.isdigit())  # Output: False\n  ```\n* **`isnumeric()`:** Devuelve `True` si todos los caracteres de la cadena son caracteres numéricos y la cadena no está vacía. Similar a `isdigit()`, pero también incluye caracteres Unicode que representan números.\n\n  ```python\n  texto1 = \"12345\"\r\n  texto2 = \"½\"\r\n  print(texto1.isnumeric())  # Output: True\r\n  print(texto2.isnumeric())  # Output: True\n  ```\n* **`isdecimal()`:** Devuelve `True` si todos los caracteres de la cadena son caracteres decimales y la cadena no está vacía. Más restrictivo que `isnumeric()`.\n\n  ```python\n  texto1 = \"12345\"\r\n  texto2 = \"½\"\r\n  print(texto1.isdecimal())  # Output: True\r\n  print(texto2.isdecimal())  # Output: False\n  ```\n* **`isspace()`:** Devuelve `True` si todos los caracteres de la cadena son espacios en blanco y la cadena no está vacía.\n\n  ```python\n  texto1 = \"   \"\r\n  texto2 = \" Hola \"\r\n  print(texto1.isspace())  # Output: True\r\n  print(texto2.isspace())  # Output: False\n  ```\n* **`islower()`:** Devuelve `True` si todos los caracteres de la cadena están en minúsculas y hay al menos un carácter en minúscula.\n\n  ```python\n  texto1 = \"hola mundo\"\r\n  texto2 = \"Hola Mundo\"\r\n  print(texto1.islower())  # Output: True\r\n  print(texto2.islower())  # Output: False\n  ```\n* **`isupper()`:** Devuelve `True` si todos los caracteres de la cadena están en mayúsculas y hay al menos un carácter en mayúscula.\n\n  ```python\n  texto1 = \"HOLA MUNDO\"\r\n  texto2 = \"Hola Mundo\"\r\n  print(texto1.isupper())  # Output: True\r\n  print(texto2.isupper())  # Output: False\n  ```\n* **`istitle()`:** Devuelve `True` si la cadena está en formato de título (la primera letra de cada palabra en mayúscula).\n\n  ```python\n  texto1 = \"Hola Mundo\"\r\n  texto2 = \"hola mundo\"\r\n  print(texto1.istitle())  # Output: True\r\n  print(texto2.istitle())  # Output: False\n  ```\n* **`isidentifier()`:** Devuelve `True` si la cadena es un identificador válido en Python.\n\n  ```python\n  texto1 = \"variable_valida\"\r\n  texto2 = \"1variable\"\r\n  print(texto1.isidentifier())  # Output: True\r\n  print(texto2.isidentifier())  # Output: False\n  ```\n* **`isprintable()`:** Devuelve `True` si todos los caracteres de la cadena son imprimibles (no son caracteres de control).\n\n  ```python\n  texto1 = \"Hola Mundo\"\r\n  texto2 = \"Hola\\nMundo\"\r\n  print(texto1.isprintable())  # Output: True\r\n  print(texto2.isprintable())  # Output: False\n  ```\n\n### METODOS DE FORMATO DE CADENAS\n\n* **`format(*args, **kwargs)`:** Permite insertar valores en una cadena utilizando marcadores de posición.\n\n  ```python\n  nombre = \"Juan\"\r\n  edad = 30\r\n  texto = \"Me llamo {} y tengo {} años.\".format(nombre, edad)\r\n  print(texto)  # Output: Me llamo Juan y tengo 30 años.\n  ```\n\n  También se pueden usar nombres para los marcadores de posición:\n\n  ```python\n  nombre = \"Juan\"\r\n  edad = 30\r\n  texto = \"Me llamo {nombre} y tengo {edad} años.\".format(nombre=nombre, edad=edad)\r\n  print(texto)  # Output: Me llamo Juan y tengo 30 años.\n  ```\n\n* **`f-strings` (Python 3.6+):** Una forma más concisa y legible de formatear cadenas.\n\n  ```python\n  nombre = \"Juan\"\r\n  edad = 30\r\n  texto = f\"Me llamo {nombre} y tengo {edad} años.\"\r\n  print(texto)  # Output: Me llamo Juan y tengo 30 años.\n  ```\n\n* **`%`-formatting (estilo antiguo):** Aunque menos común en el código moderno, todavía se puede encontrar.\n\n  ```python\n  nombre = \"Juan\"\r\n  edad = 30\r\n  texto = \"Me llamo %s y tengo %d años.\" % (nombre, edad)\r\n  print(texto)  # Output: Me llamo Juan y tengo 30 años.\n  ```\n\n### METODOS DE DIVISION Y UNION DE CADENAS\n\n* **`split(separador, maxsplit)`:** Divide una cadena en una lista de subcadenas, utilizando un separador específico. El argumento `maxsplit` es opcional y especifica el número máximo de divisiones a realizar.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  lista = texto.split(\", \")\r\n  print(lista)  # Output: ['Hola Mundo', 'Hola Python']\n  ```\n* **`rsplit(separador, maxsplit)`:** Similar a `split()`, pero comienza a dividir desde el final de la cadena.\n\n  ```python\n  texto = \"Hola Mundo, Hola Python\"\r\n  lista = texto.rsplit(\", \", 1)\r\n  print(lista)  # Output: ['Hola Mundo', 'Hola Python']\n  ```\n* **`splitlines(keepends)`:** Divide una cadena en una lista de líneas, utilizando los caracteres de nueva línea como separadores. El argumento `keepends` es opcional y especifica si se deben mantener los caracteres de nueva línea en las líneas resultantes.\n\n  ```python\n  texto = \"Hola Mundo\\nHola Python\"\r\n  lista = texto.splitlines()\r\n  print(lista)  # Output: ['Hola Mundo', 'Hola Python']\n  ```\n* **`join(iterable)`:** Une una lista de cadenas en una sola cadena, utilizando la cadena como separador.\n\n  ```python\n  lista = [\"Hola\", \"Mundo\", \"Python\"]\r\n  texto = \" \".join(lista)\r\n  print(texto)  # Output: Hola Mundo Python\n  ```\n\n### OTROS METODOS UTILES\n\n* **`zfill(ancho)`:** Rellena una cadena con ceros a la izquierda hasta alcanzar un ancho específico.\n\n  ```python\n  numero = \"123\"\r\n  numero_rellenado = numero.zfill(5)\r\n  print(numero_rellenado)  # Output: 00123\n  ```\n* **`center(ancho, caracter_de_relleno)`:** Centra una cadena dentro de un ancho específico, rellenando los espacios restantes con un carácter de relleno.\n\n  ```python\n  texto = \"Hola\"\r\n  texto_centrado = texto.center(10, \"*\")\r\n  print(texto_centrado)  # Output: ***Hola***\n  ```\n* **`ljust(ancho, caracter_de_relleno)`:** Justifica una cadena a la izquierda dentro de un ancho específico, rellenando los espacios restantes con un carácter de relleno.\n\n  ```python\n  texto = \"Hola\"\r\n  texto_justificado_izquierda = texto.ljust(10, \"*\")\r\n  print(texto_justificado_izquierda)  # Output: Hola******\n  ```\n* **`rjust(ancho, caracter_de_relleno)`:** Justifica una cadena a la derecha dentro de un ancho específico, rellenando los espacios restantes con un carácter de relleno.\n\n  ```python\n  texto = \"Hola\"\r\n  texto_justificado_derecha = texto.rjust(10, \"*\")\r\n  print(texto_justificado_derecha)  # Output: ******Hola\n  ```\n* **`encode(encoding='utf-8', errors='strict')`:** Codifica una cadena en una secuencia de bytes utilizando una codificación específica.\n\n  ```python\n  texto = \"Hola Mundo\"\r\n  bytes_codificados = texto.encode('utf-8')\r\n  print(bytes_codificados)  # Output: b'Hola Mundo'\n  ```\n* **`expandtabs(tabsize=8)`:** Reemplaza los caracteres de tabulación en una cadena con un número específico de espacios.\n\n  ```python\n  texto = \"Hola\\tMundo\"\r\n  texto_sin_tabs = texto.expandtabs(4)\r\n  print(texto_sin_tabs)  # Output: Hola    Mundo\n  ```\n\n### EJEMPLOS DE IMPLEMENTACION\n\n#### EJEMPLO 1: LIMPIEZA DE DATOS\n\n```python\ndatos = \"   Nombre:  Juan Pérez  ,  Edad: 30  \"\r\ndatos_limpios = datos.strip().replace(\"Nombre:\", \"\").replace(\"Edad:\", \"\").split(\",\")\r\nnombre = datos_limpios[0].strip()\r\nedad = datos_limpios[1].strip()\r\nprint(f\"Nombre: {nombre}, Edad: {edad}\")\n```\n\n#### EJEMPLO 2: VALIDACION DE ENTRADA DE USUARIO\n\n```python\ndef validar_email(email):\r\n    if \"@\" in email and \".\" in email:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nemail = input(\"Ingrese su email: \")\r\nif validar_email(email):\r\n    print(\"Email válido\")\r\nelse:\r\n    print(\"Email inválido\")\n```\n"
  },
  {
    "slug": "/programming/languages/python/exceptions",
    "title": "Manejo de excepciones",
    "description": "",
    "content": ""
  },
  {
    "slug": "/programming/languages/python/functions",
    "title": "Funciones",
    "description": "",
    "content": ""
  },
  {
    "slug": "/programming/languages/python",
    "title": "Python",
    "description": "Python es un lenguaje de programación de alto nivel, interpretado y de propósito general, conocido por su sintaxis clara y legible.",
    "content": "Python es un lenguaje de programación ampliamente utilizado en diversas áreas, desde el desarrollo web hasta la ciencia de datos y el aprendizaje automático. Su diseño enfatiza la legibilidad del código, utilizando una sintaxis que es fácil de entender y aprender. Esto lo convierte en una excelente opción tanto para principiantes como para desarrolladores experimentados.\n\n### Historia de Python\n\nPython fue creado por Guido van Rossum y lanzado por primera vez en 1991. Van Rossum trabajaba en el Centrum Wiskunde & Informatica (CWI) en los Países Bajos cuando comenzó a desarrollar Python como un sucesor del lenguaje ABC. El nombre \"Python\" proviene de la afición de Van Rossum por el grupo de comedia británico Monty Python.\n\nEl diseño de Python se centró en la legibilidad del código y la facilidad de uso. Van Rossum creía que el código debería ser fácil de entender y mantener, y que los desarrolladores deberían poder escribir programas de manera rápida y eficiente.\n\nA lo largo de los años, Python ha evolucionado y ha ganado una gran comunidad de desarrolladores que contribuyen con bibliotecas y herramientas que amplían sus capacidades. Python 2.0 fue lanzado en 2000, introduciendo nuevas características como la recolección de basura y el soporte Unicode. Python 3.0, una versión importante que no es retrocompatible con Python 2.0, fue lanzado en 2008 y trajo consigo mejoras significativas en el lenguaje.\n\n### Objetivos Clave de Python\n\n1. **Legibilidad del Código:** Python está diseñado para ser fácil de leer y entender. Su sintaxis clara y legible facilita la escritura y el mantenimiento del código.\n2. **Versatilidad:** Python es un lenguaje de propósito general que se puede utilizar en una amplia variedad de aplicaciones, desde el desarrollo web hasta la ciencia de datos y el aprendizaje automático.\n3. **Gran Comunidad y Ecosistema:** Python cuenta con una gran comunidad de desarrolladores que contribuyen con bibliotecas y herramientas que amplían sus capacidades. Esto facilita la búsqueda de soluciones a problemas comunes y la colaboración en proyectos.\n4. **Multiplataforma:** Python es compatible con una amplia variedad de sistemas operativos, incluyendo Windows, macOS y Linux. Esto permite a los desarrolladores escribir código que se puede ejecutar en diferentes plataformas sin necesidad de realizar modificaciones significativas.\n5. **Fácil de Aprender:** Python es un lenguaje fácil de aprender, lo que lo convierte en una excelente opción para principiantes. Su sintaxis clara y legible facilita la comprensión de los conceptos básicos de la programación.\n\n### Instalación de Python\n\nLa instalación de Python es un proceso sencillo que varía ligeramente dependiendo del sistema operativo.\n\n#### En Windows:\n\n1. **Descargar:** Visita el sitio web oficial de Python ([https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)) y descarga la última versión de Python para Windows.\n2. **Ejecutar:** Ejecuta el archivo descargado. Asegúrate de marcar la casilla \"Add Python to PATH\" durante la instalación para que Python sea accesible desde la línea de comandos.\n3. **Verificar:** Abre la línea de comandos y escribe `python --version`. Deberías ver la versión de Python instalada.\n\n#### En macOS:\n\n1. **Descargar:** Visita el sitio web oficial de Python ([https://www.python.org/downloads/macos/](https://www.python.org/downloads/macos/)) y descarga la última versión de Python para macOS.\n2. **Ejecutar:** Ejecuta el archivo descargado y sigue las instrucciones del instalador.\n3. **Verificar:** Abre la terminal y escribe `python3 --version`. Deberías ver la versión de Python instalada.\n\n#### En Linux:\n\nEn la mayoría de las distribuciones de Linux, Python ya está instalado por defecto. Sin embargo, es posible que necesites instalar la última versión.\n\n1. **Actualizar el Gestor de Paquetes:** Abre la terminal y ejecuta el comando `sudo apt update` (para Debian/Ubuntu) o `sudo yum update` (para Fedora/CentOS).\n2. **Instalar Python:** Ejecuta el comando `sudo apt install python3` (para Debian/Ubuntu) o `sudo yum install python3` (para Fedora/CentOS).\n3. **Verificar la Instalación:** Escribe `python3 --version` en la terminal. Deberías ver la versión de Python instalada.\n\n### Información Adicional Interesante\n\n* **Tipado Dinámico:** Python es un lenguaje de tipado dinámico, lo que significa que no es necesario declarar el tipo de una variable antes de usarla. El tipo de una variable se determina en tiempo de ejecución.\n* **Tipado Fuerte:** Python es un lenguaje de tipado fuerte, lo que significa que no se permiten operaciones entre tipos de datos incompatibles. Por ejemplo, no se puede sumar una cadena de texto a un número entero.\n* **Orientado a Objetos:** Python es un lenguaje orientado a objetos, lo que significa que se basa en el concepto de objetos, que son instancias de clases. Los objetos tienen atributos (datos) y métodos (funciones) que operan sobre esos datos.\n* **Interpretado:** Python es un lenguaje interpretado, lo que significa que el código se ejecuta línea por línea por un intérprete, en lugar de ser compilado en código máquina. Esto facilita la depuración y el desarrollo rápido de aplicaciones.\n\n### Ejemplos de Implementación\n\n#### Ejemplo 1: Hola Mundo\n\n```python\nprint(\"Hola, mundo!\")\n```\n\nEste es el programa más simple en Python. La función print() muestra el texto \"Hola, mundo!\" en la consola.\n\n#### Ejemplo 2: Suma de Dos Números\n\n```python\na = 10\r\nb = 20\r\nsuma = a + b\r\nprint(\"La suma de\", a, \"y\", b, \"es\", suma)\n```\n\nEste programa define dos variables, a y b, y calcula su suma. Luego, muestra el resultado en la consola.\n\n#### Ejemplo 3: Bucle For\n\n```python\nfor i in range(5):\r\n    print(\"El valor de i es:\", i)\n```\n\nEste programa utiliza un bucle for para iterar sobre los números del 0 al 4 y muestra el valor de i en cada iteración.\n\n#### Ejemplo 4: Función\n\n```python\ndef saludar(nombre):\r\n    print(\"Hola, \" + nombre + \"!\")\r\n\r\nsaludar(\"Juan\")\n```\n"
  },
  {
    "slug": "/programming/languages/python/libraries",
    "title": "Bibliotecas de programación",
    "description": "",
    "content": ""
  },
  {
    "slug": "/programming/languages/python/modules-packages",
    "title": "Módulos y paquetes",
    "description": "",
    "content": ""
  },
  {
    "slug": "/programming/languages/python/oop",
    "title": "Programación orientada a objetos",
    "description": "",
    "content": ""
  },
  {
    "slug": "/programming/languages/rikmed",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages/typescript",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/web/css",
    "title": "CSS",
    "description": "desc",
    "content": ""
  },
  {
    "slug": "/programming/web/html",
    "title": "HTML",
    "description": "desc",
    "content": ""
  },
  {
    "slug": "/programming/web",
    "title": "Herramientas de desarrollo Web",
    "description": "desc",
    "content": ""
  }
]