[
  {
    "slug": "/data-management/databases",
    "title": "Bases de Datos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/databases/mongodb",
    "title": "Mongo DB",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/databases/postgres",
    "title": "Postgres",
    "description": "Esta",
    "content": ""
  },
  {
    "slug": "/data-management/databases/sql",
    "title": "SQL",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management",
    "title": "Administración de datos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/platforms",
    "title": "Plataformas de administración de datos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/data-management/platforms/supabase",
    "title": "Supabase",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/deployments/docker",
    "title": "Docker",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/deployments",
    "title": "Despliegue de proyectos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/deployments/vercel",
    "title": "Vercel",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/dev-templates/app-ai",
    "title": "Aplicaciones con Inteligencia Artificial",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/dev-templates/app-courses",
    "title": "Aplicaciones para cursos",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/dev-templates/app-documentation",
    "title": "Aplicaciones para documentación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": "<CardGrid>\n  <Card subtitle=\"Rubix Documents\" title=\"Rubix Documents\" description=\"Este kit de inicio de documentos sirve como una base flexible y escalable para crear sitios web de documentación o proyectos basados ​​en contenido.\" href=\"/docs/dev-templates/app-documentation/rubix-documents\" />\n</CardGrid>\n"
  },
  {
    "slug": "/dev-templates/app-documentation/rubix-documents/components",
    "title": "Componentes para documentación",
    "description": "Este kit de inicio de documentos sirve como una base flexible y escalable para crear sitios web de documentación o proyectos basados ​​en contenido.",
    "content": "## CARDS\n\n### CHICAS\n\n<CardGrid>\n  <Card title=\"Instrucciones\" href=\"#\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n\n  <Card title=\"Configuración\" href=\"#\" icon=\"alignJustify\" variant=\"small\" />\n</CardGrid>\n\n```JSX\n<CardGrid>\r\n  <Card\r\n    title=\"Instrucciones\"\r\n    href=\"#\"\r\n    icon=\"alignJustify\"\r\n    variant=\"small\"\r\n    description=\"test description\"\r\n  />\r\n  <Card\r\n    title=\"Configuración\"\r\n    href=\"#\"\r\n    icon=\"alignJustify\"\r\n    variant=\"small\"\r\n  />\r\n</CardGrid>\n```\n\n### MEDIANAS\n\n<CardGrid>\n  <Card subtitle=\"Instructions\" title=\"Installation\" description=\"Get started with Documents using our quick start installation guide to get your project started.\" href=\"#\" />\n\n  <Card subtitle=\"Setup\" title=\"Site Settings\" description=\"Setting up your Documents projects layout, links and search engine optimisation.\" href=\"#\" />\n</CardGrid>\n\n```JSX\n<CardGrid>\r\n  <Card\r\n    subtitle=\"Instructions\"\r\n    title=\"Installation\"\r\n    description=\"Get started with Documents using our quick start installation guide to get your project started.\"\r\n    href=\"#\"\r\n  />\r\n  <Card\r\n    subtitle=\"Setup\"\r\n    title=\"Site Settings\"\r\n    description=\"Setting up your Documents projects layout, links and search engine optimisation.\"\r\n    href=\"#\"\r\n  />\r\n</CardGrid>\r\n\n```\n\n### IMAGEN\n\n<CardGrid>\n  <Card title=\"Instructions\" href=\"#\" image=\"/images/og-image.png\" variant=\"image\" />\n\n  <Card title=\"Setup\" href=\"#\" image=\"/images/og-image.png\" variant=\"image\" />\n</CardGrid>\n\n```JSX\n<CardGrid>\r\n  <Card\r\n    title=\"Instructions\"\r\n    href=\"#\"\r\n    image=\"/images/og-image.png\"\r\n    variant=\"image\"\r\n  />\r\n  <Card\r\n    title=\"Setup\"\r\n    href=\"#\"\r\n    image=\"/images/og-image.png\"\r\n    variant=\"image\"\r\n  />\r\n</CardGrid>\n```\n\n***\n\n## DIAGRAMAS\n\n### DIAGRAMA DE FLUJO\n\n```JSX\n<Mermaid\r\n  chart={\\`\r\n    graph TD;\r\n    Start --> Task1;\r\n    Task1 --> Task2;\r\n    Task2 --> End;\r\n  \\`}\r\n/>\n```\n\n### ARBOL DE DECISIONES\n\n```JSX\n<Mermaid\r\n  chart={\\`\r\n    graph TD;\r\n    A[Start] --> B{Is it raining?};\r\n    B -->|Yes| C[Take an umbrella];\r\n    B -->|No| D[Enjoy the weather];\r\n    C --> E[Go outside];\r\n    D --> E;\r\n  \\`}\r\n/>\n```\n\n### DIAGRAMA DE ENTIDAD-REACCION\n\n```JSX\n<Mermaid\r\n  chart={\\`\r\n    erDiagram\r\n    CUSTOMER ||--o{ ORDER : places\r\n    ORDER ||--|{ LINE-ITEM : contains\r\n    PRODUCT ||--o{ LINE-ITEM : \"included in\"\r\n    CUSTOMER {\r\n        string name\r\n        string email\r\n    }\r\n    ORDER {\r\n        int orderNumber\r\n        date orderDate\r\n    }\r\n    LINE-ITEM {\r\n        int quantity\r\n        float price\r\n    }\r\n    PRODUCT {\r\n        int productId\r\n        string name\r\n        float price\r\n    }\r\n  \\`}\r\n/>\r\n\n```\n\n***\n\n## ARBOL DE ARCHIVOS\n\n<FileTree>\n  <Folder name=\"src\" label=\"Source Code\">\n    <File name=\"index.tsx\" label=\"Index File\" />\n\n    <Folder name=\"components\" label=\"Components\">\n      <File name=\"button.tsx\" label=\"Button Component\" />\n\n      <File name=\"input.tsx\" label=\"Input Component\" />\n    </Folder>\n\n    <Folder name=\"pages\" label=\"Pages\">\n      <File name=\"home.tsx\" label=\"Home Page\" />\n\n      <File name=\"about.tsx\" label=\"About Page\" />\n    </Folder>\n  </Folder>\n</FileTree>\n\n```JSX\n<FileTree>\r\n  <Folder name=\"src\" label=\"Source Code\">\r\n    <File name=\"index.tsx\" label=\"Index File\" />\r\n    <Folder name=\"components\" label=\"Components\">\r\n      <File name=\"button.tsx\" label=\"Button Component\" />\r\n      <File name=\"input.tsx\" label=\"Input Component\" />\r\n    </Folder>\r\n    <Folder name=\"pages\" label=\"Pages\">\r\n      <File name=\"home.tsx\" label=\"Home Page\" />\r\n      <File name=\"about.tsx\" label=\"About Page\" />\r\n    </Folder>\r\n  </Folder>\r\n</FileTree>\r\n\n```\n\n***\n\n## LISTAS\n\n### LISTA DE VERIFICACION\n\n* \\[x] Escribe el comunicado de prensa\n* \\[ ] Actualizar el sitio web\n* \\[ ] Contacta con los medios\n\n```JSX\n- [x] Escribe el comunicado de prensa\r\n- [ ] Actualizar el sitio web\r\n- [ ] Contacta con los medios\n```\n\n### LISTA SENCILLA\n\n* Item 1\n* Item 2\n* Item 3\n\n```JSX\n- Item 1\r\n- Item 2\r\n- Item 3\n```\n\n### LISTA DE NUMEROS\n\n1. Research\n2. Draft the content\n3. Review and edit\n4. Publish\n\n```JSX\n1. Research\r\n2. Draft the content\r\n3. Review and edit\r\n4. Publish\r\n\n```\n\n### LISTA ANIDADA\n\n* Main Category 1\n  * Sub Item 1.1\n  * Sub Item 1.2\n* Main Category 2\n  * Sub Item 2.1\n  * Sub Item 2.2\n\n```JSX\n- Main Category 1\r\n  - Sub Item 1.1\r\n  - Sub Item 1.2\r\n- Main Category 2\r\n  - Sub Item 2.1\r\n  - Sub Item 2.2\n```\n\n***\n\n## MATEMATICAS\n\n### ALGEBRA BASICA\n\n```math\nA = \\pi r^2\n```\n\n```jsx\nmath\r\nA = \\pi r^2\n```\n\n### FORMULA CUADRATICA\n\n```math\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n```\n\n```jsx\n[math]\r\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n```\n\n### TEOREMA DE PITAGORAS\n\n```math\nE = mc^2\n```\n\n```jsx\n[math]\r\nE = mc^2\n```\n\n***\n\n## NOTAS\n\n### NOTA ESTANDAR\n\n<Note title=\"Requerido\">\n  La funcionalidad de búsqueda del proyecto se basa en la automatización de Husky para crear\r\n  `search-data/documents.json` y garantizar que se realice la confirmación de Git para generar este\r\n  archivo.\n</Note>\n\n```jsx\n<Note title=\"Requerido\">\r\n  La funcionalidad de búsqueda del proyecto se basa en la automatización de Husky para crear\r\n`search-data/documents.json` y garantizar que se realice la confirmación de Git para generar este\r\narchivo.\r\n</Note>\n```\n\n### NOTA DE EXITO\n\n<Note title=\"Required\" type=\"success\">\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\n</Note>\n\n```jsx\n<Note title=\"Required\" type=\"success\">\r\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\r\n</Note>\n```\n\n### NOTA DE ADVERTENCIA\n\n<Note title=\"Required\" type=\"warning\">\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\n</Note>\n\n```jsx\n<Note title=\"Required\" type=\"warning\">\r\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\r\n</Note>\n```\n\n### NOTA DE PELIGRO\n\n<Note title=\"Required\" type=\"danger\">\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\n</Note>\n\n```jsx\n<Note title=\"Required\" type=\"danger\">\r\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\r\n</Note>\n```\n\n***\n\n## PASOS\n\n<Step>\n  <StepItem title=\"Título 1\">\n    Contenido 1\n  </StepItem>\n\n  <StepItem title=\"Título 2\">\n    Contenido 2\n  </StepItem>\n\n  <StepItem title=\"Título 3\">\n    Contenido 3\n  </StepItem>\n</Step>\n\n```jsx\n<Step>\r\n  <StepItem title=\"Título 1\">\r\n   \r\n    Contenido 1\r\n\r\n  </StepItem>\r\n\r\n  <StepItem title=\"Título 2\">\r\n    \r\n    Contenido 2\r\n\r\n  </StepItem>\r\n\r\n  <StepItem title=\"Título 3\">\r\n    \r\n    Contenido 3\r\n\r\n  </StepItem>\r\n</Step>\n```\n\n***\n\n## TABLAS\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n| Feature       | Documentation Link |                    Notes |\r\n| :------------ | :----------------: | -----------------------: |\r\n| **Feature A** |     [Docs](#)      | For more info click here |\r\n| **Feature B** |     [Guide](#)     |  See the full guide here |\r\n| **Feature C** |     [Setup](#)     |       Setup instructions |\n\n```jsx\n\r\n| Feature       | Documentation Link |                    Notes |\r\n| :------------ | :----------------: | -----------------------: |\r\n| **Feature A** |     [Docs](#)      | For more info click here |\r\n| **Feature B** |     [Guide](#)     |  See the full guide here |\r\n| **Feature C** |     [Setup](#)     |       Setup instructions |\r\n\n```\n\n***\n\n## TABS\n\n```jsx\n<Tabs defaultValue=\"js\" className=\"pt-5 pb-1\">\r\n\r\n  <TabsList className=\"\">\r\n    <TabsTrigger value=\"js\">layout.jsx</TabsTrigger>\r\n    <TabsTrigger value=\"ts\">layout.tsx</TabsTrigger>\r\n  </TabsList>\r\n\r\n  <TabsContent value=\"js\">\r\n  '''jsx {7} showLineNumbers\r\n\r\n    // Contenido de layout.jsx\r\n\r\n  '''\r\n  </TabsContent>\r\n\r\n  <TabsContent value=\"ts\">\r\n  '''tsx {11} showLineNumbers\r\n\r\n    // Contenido de layout.tsx\r\n\r\n  '''\r\n  </TabsContent>\r\n\r\n</Tabs>\n```\n"
  },
  {
    "slug": "/dev-templates/app-documentation/rubix-documents",
    "title": "Rubix Documents",
    "description": "Este kit de inicio de documentos sirve como una base flexible y escalable para crear sitios web de documentación o proyectos basados ​​en contenido.",
    "content": "![Banner](https://vercel.com/_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fe5382hct74si%2F5nVnDsvxzCbKSnLIm6IX5W%2Faf59967eb27c0fa46fbfcc81a9c427c8%2FCleanShot_2024-09-27_at_15.59.48_2x.png\\&w=1920\\&q=75)\n\n## TEMPLATE\n\nDocuments es un potente kit de inicio de documentación de Next.js diseñado para simplificar el proceso de creación de documentación de productos, manuales técnicos y guías comerciales integrales y de alta calidad. Desarrollado con React, Tailwind CSS y TypeScript, este kit de inicio proporciona la base para crear la documentación de su proyecto y su base de conocimientos.\n\n### STACK TECNOLOGICO\n\n* **Framework**: Next.js\n* **Caso de uso**: Documentación\n* **CSS**: Tailwind\n\n### CARACTERISTICAS\n\n* **Creación de contenido**\n  * ***Integración MDX***: escriba documentos con componentes Markdown y JSX.\n  * ***Componentes personalizados***: reutilice componentes React en sus documentos.\n  * ***Diagramas de Mermaid.js***: crea diagramas de flujo y diagramas.\n  * ***Matemáticas y tablas***: incluye tablas y fórmulas matemáticas LaTeX.\n\n* **Navegación y legibilidad**\n  * ***Navegación multinivel***: páginas anidadas para crear jerarquías.\n  * ***Paginación de contenido***: transiciones fluidas entre páginas.\n  * ***Tabla de contenidos dinámica***: tabla de contenidos generada automáticamente.\n  * ***Selector de código***: alterne y copie fragmentos de código fácilmente.\n\n* **Características del código**\n  * ***Resaltado de sintaxis***: Resaltado según tema.\n  * ***Bloques de código mejorados***: Resaltado de líneas y títulos de código.\n\n* **Temas y experiencia de usuario**\n  * ***Modos claro/oscuro***: Cambio automático de tema.\n  * ***Optimización SEO***: Metadatos generados automáticamente para una mejor clasificación.\n    * Gestión de metaetiquetas (título, descripción, URL, uso compartido en redes sociales).\n\n* **Búsqueda y mejoras futuras**\n  * ***Búsqueda avanzada***: Búsqueda aproximada con resaltado de términos.\n  * ***Base de conocimiento de IA***: Futuras herramientas de documentación impulsadas por IA.\n\n### LICENCIA\n\nEste proyecto está licenciado bajo la licencia **MIT**. Consulte el archivo [LICENCIA](https://github.com/rubixvi/rubix-documents/blob/main/LICENSE) para obtener más detalles.\n\n### CONTACTO\n\nPara obtener ayuda o realizar consultas, comuníquese con Vincent Vu [@rubixvi](https://x.com/rubixvi) en X.\n\nRubix Studios: [https://www.rubixstudios.com.au](https://www.rubixstudios.com.au)\n\nProyecto: [https://github.com/rubixvi/rubix-documents](https://github.com/rubixvi/rubix-documents)\n\n***\n\n## LINKS\n\n<CardGrid>\n  <Card title=\"Template Vercel\" href=\"https://vercel.com/templates/next.js/documents-simple-next-js-documentation\" icon=\"alignJustify\" variant=\"small\" external=\"true\" />\n\n  <Card title=\"Demo\" href=\"https://rubix-documents.vercel.app/\" icon=\"alignJustify\" variant=\"small\" external=\"true\" />\n\n  <Card title=\"Repositorio GitHub\" href=\"https://github.com/rubixvi/rubix-documents\" icon=\"alignJustify\" variant=\"small\" external=\"true\" />\n</CardGrid>\n\n***\n\n## CLONAR REPOSITORIO\n\n<Step>\n  <StepItem title=\"Clonar repositorio\">\n    Clona el repositorio de GitHub y accede a la nueva carpeta del proyecto\n\n    ```bash\n    git clone https://github.com/rubixvi/rubix-documents.git\r\n    cd rubix-documents\n    ```\n  </StepItem>\n\n  <StepItem title=\"Conectar con nuevo repositorio\">\n    1. Crea un nuevo repositorio en [GitHub](https://github.com/)\n    2. Verificar qué origen tiene asignado el repositorio del proyecto\n       ```bash\n       git remote -v\n       ```\n       Esto mostrará una respuesta como la siguiente:\n       ```bash\n       origin  <URL REPO ASIGNADO> (fetch)\r\n       origin  <URL REPO ASIGNADO> (push)\n       ```\n    3. Ejectura el comando de reasignación de Origen del proyecto con el siguiente comando:\n       ```bash\n       git remote set-url origin <NUEVA_URL>\n       ```\n  </StepItem>\n\n  <StepItem title=\"Instalar dependencias\">\n    Instala todas las dependencias del proyecto\n\n    ```bash\n    npm install\n    ```\n  </StepItem>\n\n  <StepItem title=\"Correr el servidor\">\n    * **Ejecutar en modo desarrollo**:\n\n      ```bash\n      npm run dev\n      ```\n\n    * **Ejecutar en modo producción**:\n      1. Construir aplicación:\n      ```bash\n      npm run build\n      ```\n      2. Ejecutar en modo producción:\r\n         Construir aplicación:\n      ```bash\n      npm run start\n      ```\n  </StepItem>\n</Step>\n"
  },
  {
    "slug": "/dev-templates/app-landingpages",
    "title": "Landing Pages",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/dev-templates/app-saas",
    "title": "Aplicaciones SaaS",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/dev-templates",
    "title": "Templates de desarrollo",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/documentation",
    "title": "Sobre documentación",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/documentation/installation",
    "title": "Uso",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/frameworks",
    "title": "Frameworks para desarrollo",
    "description": "Desc",
    "content": ""
  },
  {
    "slug": "/frameworks/nextjs",
    "title": "Next.js",
    "description": "Esta",
    "content": ""
  },
  {
    "slug": "/programming/git/commands",
    "title": "Comandos de Git",
    "description": "Exploración detallada de los comandos de Git esenciales para la gestión de versiones en proyectos de software.",
    "content": "La sección de comandos de Git es el corazón de la herramienta.  Permite controlar el versionado de tu código. Comandos como `add`, `commit`, `push`, `pull`, `branch`, `merge`, y `rebase` son esenciales.  `add` prepara cambios, `commit` guarda esos cambios localmente, `push` sube los cambios a un repositorio remoto, `pull` descarga los cambios remotos, `branch` crea ramificaciones para desarrollo paralelo, y `merge` y `rebase` integran cambios de diferentes ramas. Dominar estos comandos es clave para una gestión eficiente del código con Git.\n\n## COMANDOS FUNDAMENTALES DE GIT\n\nA continuación, se describen los comandos de Git más utilizados, agrupados por su función principal:\n\n### 1. CONFIGURACION E INICIALIZACION\n\n* **`git config`**:  Configura las opciones de Git, como el nombre de usuario, el correo electrónico, el editor de texto predeterminado, etc.  Se puede configurar a nivel local (para un solo repositorio), global (para todos los repositorios del usuario) o de sistema (para todos los usuarios del sistema).\n\n  ```bash\n  git config --global user.name \"Tu Nombre\"\r\n  git config --global user.email \"tu_correo@ejemplo.com\"\n  ```\n\n* **`git init`**:  Inicializa un nuevo repositorio de Git en el directorio actual.  Crea un directorio oculto `.git` que contiene la información de configuración del repositorio.\n\n  ```bash\n  git init\n  ```\n\n* **`git clone`**:  Crea una copia local de un repositorio remoto existente. Descarga todos los archivos y el historial completo del repositorio.\n\n  ```bash\n  git clone https://github.com/usuario/repositorio.git\n  ```\n\n### 2.  GESTION DE CAMBIOS\n\n* **`git status`**:  Muestra el estado actual del repositorio, incluyendo los archivos modificados, los archivos en stage (preparados para el commit) y los archivos sin seguimiento.\n\n  ```bash\n  git status\n  ```\n\n* **`git add`**:  Añade los archivos modificados al área de stage (staging area).  El área de stage es una zona intermedia donde se preparan los cambios que se van a incluir en el próximo commit.\n\n  ```bash\n  git add archivo.txt\r\n  git add .  # Añade todos los archivos modificados\n  ```\n\n* **`git commit`**:  Guarda los cambios que están en el área de stage en el historial del repositorio.  Cada commit tiene un mensaje descriptivo que explica los cambios realizados.\n\n  ```bash\n  git commit -m \"Mensaje descriptivo del commit\"\n  ```\n\n* **`git rm`**:  Elimina un archivo del repositorio y del sistema de archivos.\n\n  ```bash\n  git rm archivo.txt\r\n  git commit -m \"Elimina archivo.txt\"\n  ```\n\n* **`git mv`**:  Renombra o mueve un archivo en el repositorio.\n\n  ```bash\n  git mv archivo_viejo.txt archivo_nuevo.txt\r\n  git commit -m \"Renombra archivo_viejo.txt a archivo_nuevo.txt\"\n  ```\n\n### 3.  RAMAS (BRANCHES)\n\n* **`git branch`**:  Lista, crea o elimina ramas. Una rama es una línea de desarrollo independiente del tronco principal (master o main).\n\n  ```bash\n  git branch  # Lista las ramas locales\r\n  git branch nueva_rama  # Crea una nueva rama llamada \"nueva_rama\"\r\n  git branch -d rama_a_eliminar # Elimina una rama (si ya se ha fusionado)\r\n  git branch -D rama_a_eliminar # Elimina una rama (forzando la eliminación)\n  ```\n\n* **`git checkout`**:  Cambia entre ramas.  Permite trabajar en diferentes líneas de desarrollo sin afectar la rama principal.\n\n  ```bash\n  git checkout nueva_rama  # Cambia a la rama \"nueva_rama\"\r\n  git checkout -b nueva_rama # Crea y cambia a la rama \"nueva_rama\"\n  ```\n\n* **`git merge`**:  Fusiona los cambios de una rama en otra.  Combina el historial de las dos ramas.\n\n  ```bash\n  git checkout master\r\n  git merge nueva_rama # Fusiona los cambios de \"nueva_rama\" en \"master\"\n  ```\n\n* **`git rebase`**:  Integra los cambios de una rama en otra moviendo la base de la rama actual a la base de la otra rama.  Produce un historial más limpio que `git merge`, pero puede ser más complejo de usar y potencialmente peligroso si no se entiende bien.\n\n  ```bash\n  git checkout nueva_rama\r\n  git rebase master # Mueve la base de \"nueva_rama\" a la última versión de \"master\"\n  ```\n\n### 4.  TRABAJO REMOTO\n\n* **`git remote add <nombre> <url>`**:  Añade una nueva conexión a un repositorio remoto.  `<nombre>` es un alias que le das al repositorio remoto (por ejemplo, `origin`, `upstream`).  `<url>` es la URL del repositorio remoto (por ejemplo, `https://github.com/usuario/repositorio.git`).\n\n  ```bash\n  git remote add origin https://github.com/usuario/repositorio.git\r\n  git remote add upstream https://github.com/otro_usuario/repositorio.git\n  ```\n\n  ```\n  ```\n\n* **`git remote rename <viejo_nombre> <nuevo_nombre>`**:  Renombra una conexión remota existente.\n\n  ```bash\n  git remote rename origin nuevo_origin\n  ```\n\n* **`git remote remove <nombre>` o `git remote rm <nombre>`**:  Elimina una conexión remota.\n\n  ```bash\n  git remote remove origin\n  ```\n\n* **`git remote set-url <nombre> <nueva_url>`**:  Cambia la URL asociada a una conexión remota existente.\n\n  ```bash\n  git remote set-url origin https://nuevo_dominio/usuario/repositorio.git\n  ```\n\n* **`git remote show <nombre>`**:  Muestra información detallada sobre una conexión remota específica, incluyendo la URL, las ramas rastreadas, las ramas locales que están configuradas para hacer push a ese remoto, y más.\n\n  ```bash\n  git remote show origin\n  ```\n\n* **`git remote update <nombre>`**:  Descarga información actualizada sobre las ramas y etiquetas del repositorio remoto especificado, sin fusionar los cambios en tus ramas locales.  Es similar a `git fetch`, pero se centra en actualizar la información de seguimiento de las ramas remotas.\n\n  ```bash\n  git remote update origin\n  ```\n\n* **`git remote prune <nombre>`**:  Elimina las referencias a ramas remotas que ya no existen en el repositorio remoto.  Esto ayuda a mantener tu repositorio local limpio y actualizado.\n\n  ```bash\n  git remote prune origin\n  ```\n\n* **`git fetch`**:  Descarga los cambios de un repositorio remoto sin fusionarlos en la rama local.  Permite inspeccionar los cambios antes de integrarlos.\n\n  ```bash\n  git fetch origin\n  ```\n\n* **`git pull`**:  Descarga los cambios de un repositorio remoto y los fusiona automáticamente en la rama local.  Es una combinación de `git fetch` y `git merge`.\n\n  ```bash\n  git pull origin master # Descarga y fusiona los cambios de la rama \"master\" del repositorio \"origin\"\n  ```\n\n* **`git push`**:  Sube los cambios de la rama local a un repositorio remoto.\n\n  ```bash\n  git push origin master # Sube los cambios de la rama \"master\" al repositorio \"origin\"\r\n  git push -u origin master # Establece el rastreo entre la rama local y la rama remota (solo la primera vez)\n  ```\n\n### 5.  DESHACER CAMBIOS\n\n* **`git reset`**:  Revierte el estado del repositorio a un commit anterior.  Puede modificar el área de stage, los archivos modificados o incluso el historial del repositorio, dependiendo del tipo de reset que se utilice.\n\n  * `git reset --soft <commit>`:  Mueve el HEAD al commit especificado, pero mantiene los cambios en el área de stage.\n  * `git reset --mixed <commit>`:  Mueve el HEAD al commit especificado y elimina los cambios del área de stage, dejándolos como archivos modificados.  (Este es el comportamiento predeterminado si no se especifica ningún tipo).\n  * `git reset --hard <commit>`:  Mueve el HEAD al commit especificado y descarta todos los cambios en el área de stage y los archivos modificados.  ¡PELIGRO!  Esta opción puede provocar la pérdida de datos si no se usa con cuidado.\n\n  ```bash\n  git reset --soft HEAD^ # Revierte al commit anterior (mantiene los cambios en stage)\r\n  git reset --hard  a1b2c3d # Revierte al commit con hash a1b2c3d (descarta todos los cambios)\n  ```\n\n* **`git revert`**:  Crea un nuevo commit que deshace los cambios introducidos por un commit anterior.  No modifica el historial existente, sino que añade un nuevo commit que revierte los cambios.  Es una forma segura de deshacer cambios, ya que no altera el historial.\n\n  ```bash\n  git revert a1b2c3d # Crea un nuevo commit que deshace los cambios del commit con hash a1b2c3d\n  ```\n\n### 6. OTROS COMANDOS UTILES\n\n* **`git log`**:  Muestra el historial de commits del repositorio. Permite ver la fecha, el autor, el mensaje y el hash de cada commit.\n\n  ```bash\n  git log\r\n  git log --oneline # Muestra el historial en una sola línea por commit\r\n  git log --graph # Muestra el historial como un gráfico\r\n  git log --author=\"Tu Nombre\" # Muestra los commits realizados por un autor específico\n  ```\n\n  Para salir de `git log`, solo basta presionar la letra ***Q***.\n\n* **`git diff`**:  Muestra las diferencias entre archivos, commits o ramas.\n\n  ```bash\n  git diff # Muestra las diferencias entre el área de stage y los archivos modificados\r\n  git diff HEAD # Muestra las diferencias entre el último commit y los archivos modificados\r\n  git diff rama1 rama2 # Muestra las diferencias entre las ramas rama1 y rama2\n  ```\n\n* **`git stash`**:  Guarda temporalmente los cambios no confirmados.  Permite cambiar de rama o realizar otras tareas sin tener que hacer commit de los cambios incompletos.\n\n  ```bash\n  git stash # Guarda los cambios no confirmados\r\n  git stash pop # Recupera los últimos cambios guardados\r\n  git stash list # Lista los stashes guardados\r\n  git stash apply stash@{2} # Aplica un stash específico\n  ```\n\n* **`.gitignore`**:  Un archivo que especifica los archivos y directorios que Git debe ignorar.  Es útil para evitar que archivos temporales, archivos de configuración o archivos generados automáticamente se incluyan en el repositorio.\n\n  ```text\n  # Ejemplo de archivo .gitignore\r\n  *.log\r\n  tmp/\r\n  config.ini\n  ```\n"
  },
  {
    "slug": "/programming/git/github",
    "title": "GitHub",
    "description": "Plataforma de desarrollo colaborativo basada en la nube para el control de versiones con Git.",
    "content": "GitHub es una plataforma de desarrollo colaborativo basada en la nube que permite a los desarrolladores almacenar, gestionar y controlar las versiones de su código. Es una herramienta esencial en el mundo del desarrollo de software moderno, facilitando la colaboración, el seguimiento de cambios y la gestión de proyectos de cualquier tamaño. GitHub se basa en el sistema de control de versiones distribuido Git, lo que significa que cada desarrollador tiene una copia completa del repositorio del proyecto en su máquina local, permitiendo trabajar de forma offline y sincronizar los cambios posteriormente.\n\n### HISTORIA\n\nGitHub fue fundado en 2008 por Tom Preston-Werner, Chris Wanstrath, PJ Hyett y Scott Chacon. La idea surgió de la necesidad de una plataforma que facilitara la colaboración entre desarrolladores utilizando Git. Antes de GitHub, Git era utilizado principalmente a través de la línea de comandos, lo que podía ser intimidante para algunos. GitHub proporcionó una interfaz web intuitiva y características adicionales que hicieron que Git fuera más accesible y atractivo para una audiencia más amplia.\n\nLa plataforma rápidamente ganó popularidad en la comunidad de código abierto, convirtiéndose en el hogar de miles de proyectos. En 2018, Microsoft adquirió GitHub por 7.5 mil millones de dólares, una decisión que generó tanto entusiasmo como preocupación en la comunidad. Sin embargo, Microsoft ha mantenido su compromiso de apoyar el código abierto y ha continuado invirtiendo en la plataforma, mejorando sus características y servicios.\n\n### OBJETIVOS CLAVE\n\n* **Control de Versiones:** GitHub permite a los desarrolladores realizar un seguimiento de todos los cambios realizados en el código a lo largo del tiempo. Esto facilita la identificación y corrección de errores, la reversión a versiones anteriores y la comprensión de la evolución del proyecto.\n* **Colaboración:** GitHub facilita la colaboración entre desarrolladores, permitiendo que varios miembros del equipo trabajen en el mismo proyecto simultáneamente. A través de características como pull requests y issues, los desarrolladores pueden revisar el código de otros, discutir cambios y contribuir al proyecto de manera organizada.\n* **Gestión de Proyectos:** GitHub proporciona herramientas para la gestión de proyectos, como la capacidad de crear y asignar tareas, establecer hitos y realizar un seguimiento del progreso. Esto ayuda a los equipos a mantenerse organizados y a cumplir con los plazos.\n* **Descubrimiento de Código:** GitHub es una plataforma donde los desarrolladores pueden descubrir y explorar proyectos de código abierto. Esto fomenta el aprendizaje, la reutilización de código y la contribución a la comunidad.\n* **Automatización:** GitHub Actions permite automatizar tareas de desarrollo de software, como pruebas, integración continua y despliegue. Esto ayuda a los equipos a mejorar la eficiencia y la calidad de su trabajo.\n\n### CARACTERISTICAS PRINCIPALES\n\n* **Repositorios:** Los repositorios son el corazón de GitHub. Un repositorio es un directorio donde se almacenan todos los archivos de un proyecto, junto con el historial de cambios. Los repositorios pueden ser públicos (accesibles para todos) o privados (accesibles solo para los miembros del equipo).\n* **Branches:** Las branches (ramas) permiten a los desarrolladores trabajar en nuevas características o correcciones de errores sin afectar la rama principal del proyecto (generalmente llamada \"main\" o \"master\"). Una vez que los cambios están listos, se pueden fusionar (merge) de nuevo en la rama principal.\n* **Commits:** Un commit es una instantánea de los cambios realizados en el código en un momento dado. Cada commit tiene un mensaje que describe los cambios realizados.\n* **Pull Requests:** Los pull requests (solicitudes de extracción) son una forma de proponer cambios a un repositorio. Un desarrollador crea una branch, realiza los cambios necesarios y luego envía un pull request para que otros miembros del equipo revisen el código.\n* **Issues:** Los issues (problemas) se utilizan para realizar un seguimiento de errores, solicitar nuevas características o discutir ideas. Los issues pueden ser asignados a miembros del equipo, etiquetados y cerrados una vez que se han resuelto.\n* **Forking:** Forking permite a los desarrolladores crear una copia de un repositorio en su propia cuenta. Esto les permite realizar cambios en el código sin afectar el repositorio original. Si desean contribuir con sus cambios al repositorio original, pueden enviar un pull request.\n* **GitHub Actions:** GitHub Actions es una plataforma de automatización que permite a los desarrolladores crear flujos de trabajo personalizados para automatizar tareas de desarrollo de software.\n\n### FLUJO DE TRABAJO TIPICO\n\n1. **Crear un Repositorio:** El primer paso es crear un repositorio en GitHub para el proyecto.\n2. **Clonar el Repositorio:** Clonar el repositorio en la máquina local del desarrollador utilizando el comando `git clone`.\n3. **Crear una Branch:** Crear una nueva branch para trabajar en una nueva característica o corrección de errores.\n4. **Realizar Cambios:** Realizar los cambios necesarios en el código.\n5. **Commit los Cambios:** Commit los cambios con un mensaje descriptivo utilizando el comando `git commit`.\n6. **Subir los Cambios:** Subir los cambios a la branch remota en GitHub utilizando el comando `git push`.\n7. **Crear un Pull Request:** Crear un pull request para que otros miembros del equipo revisen el código.\n8. **Revisar el Código:** Los miembros del equipo revisan el código y proporcionan comentarios.\n9. **Fusionar el Pull Request:** Una vez que el código ha sido aprobado, el pull request se puede fusionar en la rama principal.\n\n### INFORMACION ADICIONAL\n\n* GitHub ofrece una variedad de planes de precios, incluyendo un plan gratuito para proyectos públicos y planes de pago para proyectos privados con características adicionales.\n* GitHub tiene una gran comunidad de usuarios y una amplia documentación disponible en su sitio web.\n* GitHub se integra con una variedad de herramientas y servicios de desarrollo de software, como IDEs, herramientas de integración continua y plataformas de despliegue.\n\nEn resumen, GitHub es una plataforma esencial para el desarrollo de software moderno, que facilita la colaboración, el control de versiones y la gestión de proyectos. Su amplia gama de características y su gran comunidad de usuarios la convierten en una herramienta indispensable para cualquier desarrollador.\n"
  },
  {
    "slug": "/programming/git/gitignore",
    "title": ".gitignore",
    "description": "Archivo de configuración para especificar archivos y directorios que Git debe ignorar.",
    "content": "El archivo `.gitignore` es un archivo de texto plano que reside en el directorio raíz de un repositorio Git. Su propósito principal es decirle a Git qué archivos y directorios no deben ser rastreados ni incluidos en los commits. Esto es crucial para mantener un repositorio limpio, evitar la inclusión de archivos sensibles (como contraseñas o claves privadas), y optimizar el rendimiento de Git al reducir la cantidad de archivos que necesita monitorear.\n\nEl archivo `.gitignore` utiliza patrones para especificar qué archivos y directorios deben ser ignorados. Estos patrones pueden ser nombres de archivos específicos, nombres de directorios, o patrones más generales utilizando comodines. Git evalúa estos patrones en orden, y si un archivo o directorio coincide con un patrón en `.gitignore`, se ignora.\n\n## FUNCIONAMIENTO BASICO\n\n1. **Ubicación:** El archivo `.gitignore` se coloca en el directorio raíz del repositorio. También se pueden crear archivos `.gitignore` en subdirectorios para aplicar reglas de ignorado específicas a esas carpetas. Las reglas en un archivo `.gitignore` de un subdirectorio tienen precedencia sobre las reglas en el archivo `.gitignore` del directorio raíz.\n\n2. **Sintaxis:** La sintaxis del archivo `.gitignore` es sencilla:\n\n   * Cada línea representa un patrón.\n   * Las líneas que comienzan con `#` son comentarios y se ignoran.\n   * Las líneas en blanco también se ignoran.\n   * Se pueden usar comodines para crear patrones más generales:\n     * `*`: Coincide con cero o más caracteres.\n     * `?`: Coincide con un solo carácter.\n     * `[]`: Coincide con un rango de caracteres.\n     * `**`: Coincide con cualquier número de directorios.\n   * Un prefijo `!` niega un patrón. Es decir, si un archivo coincide con un patrón negado, se incluirá incluso si coincide con un patrón anterior.\n   * Un `/` al final de un patrón indica que solo debe coincidir con un directorio.\n\n3. **Prioridad:** Git evalúa las reglas de ignorado en el siguiente orden:\n\n   1. Reglas leídas desde la línea de comandos (`git add -f`).\n   2. Reglas en el archivo `.gitignore` en el mismo directorio que el archivo o en cualquier directorio padre.\n   3. Reglas especificadas en el archivo `$GIT_DIR/info/exclude`.\n   4. Reglas especificadas en la configuración global de Git (core.excludesfile).\n\n## EJEMPLOS DE IMPLEMENTACION\n\nAquí hay algunos ejemplos de cómo usar `.gitignore`:\n\n1. **Ignorar archivos `.log`:**\n\n   ```\n   *.log\n   ```\n\n   Esto ignorará todos los archivos que tengan la extensión `.log` en cualquier directorio del repositorio.\n\n2. **Ignorar el directorio `node_modules`:**\n\n   ```\n   node_modules/\n   ```\n\n   Esto ignorará el directorio `node_modules` y todo su contenido.\n\n3. **Ignorar archivos `.DS_Store` (comunes en macOS):**\n\n   ```\n   .DS_Store\n   ```\n\n   Esto ignorará los archivos `.DS_Store` que macOS crea en cada directorio.\n\n4. **Ignorar todos los archivos `.txt` excepto `important.txt`:**\n\n   ```\n   *.txt\r\n   !important.txt\n   ```\n\n   Esto ignorará todos los archivos `.txt` excepto el archivo `important.txt`.\n\n5. **Ignorar un directorio específico y todos sus subdirectorios:**\n\n   ```\n   build/\n   ```\n\n   Esto ignorará el directorio `build` y todos sus subdirectorios y archivos.\n\n6. **Ignorar archivos de configuración locales:**\n\n   ```\n   config/local_settings.py\n   ```\n\n   Esto ignorará el archivo `local_settings.py` dentro del directorio `config`.\n\nEn resumen, el archivo `.gitignore` es una herramienta esencial para cualquier proyecto Git. Su uso adecuado ayuda a mantener el repositorio limpio, seguro y eficiente, facilitando la colaboración y el desarrollo a largo plazo.\n"
  },
  {
    "slug": "/programming/git",
    "title": "Git",
    "description": "Git es un sistema de control de versiones distribuido que rastrea los cambios en archivos y coordina el trabajo entre múltiples personas. Permite a los desarrolladores (y a cualquier persona) gestionar el historial de sus proyectos, colaborar fácilmente y revertir a versiones anteriores si es necesario. Cada persona tiene una copia completa del proyecto, lo que permite trabajar sin conexión y reduce la dependencia de un servidor central. Es la herramienta estándar para el desarrollo de software colaborativo moderno.",
    "content": "![GIT](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Git-logo.svg/800px-Git-logo.svg.png)\n\n## ¿QUE ES GIT?\n\nGit es un sistema de control de versiones distribuido (DVCS) diseñado para rastrear los cambios en archivos de computadora y coordinar el trabajo en esos archivos entre múltiples personas. En esencia, es una herramienta que permite a los desarrolladores gestionar el código fuente de manera eficiente y colaborativa, pero se puede usar para rastrear cambios en cualquier tipo de archivo (documentos, imágenes, configuraciones, etc.).\n\n### CARACTERISTICAS CLAVES\n\n* **Sistema de Control de Versiones Distribuido**: A diferencia de los sistemas centralizados (como Subversion o CVS), Git permite que cada desarrollador tenga una copia completa del repositorio, incluyendo todo el historial de cambios. Esto ofrece varias ventajas:\n\n* **Trabajo Offline**: Los desarrolladores pueden trabajar y hacer commits localmente sin necesidad de una conexión constante al servidor central.\n\n* **Rendimiento**: Las operaciones locales (como ver el historial o hacer commits) son mucho más rápidas, ya que no requieren acceso a la red.\n\n* **Resiliencia**: Si el servidor central falla, el proyecto no se pierde, ya que cada desarrollador tiene una copia completa.\n\n* **Ramas (Branching) y Combinación (Merging)**: Git facilita la creación de ramas (líneas de desarrollo paralelas) para implementar nuevas funcionalidades, corregir errores o experimentar con ideas. Luego, estas ramas se pueden combinar (merge) de nuevo en la rama principal. Este modelo de branching permite un flujo de trabajo flexible y no lineal.\n\n* **Eficiencia**: Git está diseñado para ser rápido y eficiente, incluso con proyectos muy grandes. Utiliza algoritmos de compresión y almacenamiento de datos inteligentes para minimizar el espacio en disco y el tiempo de acceso.\n\n* **Integridad de Datos**: Git utiliza un algoritmo de hash SHA-1 para identificar y rastrear cada cambio. Esto garantiza la integridad de los datos y detecta cualquier corrupción accidental.\n\n* **Área de Preparación (Staging Area)**: Git tiene un área de preparación intermedia entre el directorio de trabajo y el repositorio. Esto permite seleccionar los cambios específicos que se incluirán en el próximo commit, ofreciendo un control más granular sobre el historial.\n\n* **Gratuito y de Código Abierto**: Git es un proyecto de código abierto licenciado bajo la GPLv2, lo que significa que es gratuito para usar, modificar y distribuir.\n\n### OBJETIVOS DE GIT\n\n* **Control de Versiones**: Rastrear todos los cambios realizados en los archivos a lo largo del tiempo, permitiendo volver a versiones anteriores, comparar diferencias y auditar modificaciones.\n\n* **Colaboración**: Facilitar el trabajo en equipo en proyectos de software, permitiendo a múltiples desarrolladores trabajar simultáneamente en el mismo código base sin conflictos.\n\n* **Gestión de Ramas**: Proporcionar un modelo flexible para crear, combinar y gestionar ramas de desarrollo, lo que permite experimentar con nuevas funcionalidades sin afectar la estabilidad del proyecto principal.\n\n* **Desarrollo Paralelo**: Permitir que varios desarrolladores trabajen en diferentes partes del proyecto al mismo tiempo, sin interferir entre sí.\n\n* **Deshacer Cambios**: Ofrecer herramientas para deshacer cambios, revertir a versiones anteriores y corregir errores.\n\n* **Seguridad**: Garantizar la integridad de los datos y prevenir la pérdida de información.\n\n* **Auditoría**: Facilitar el seguimiento de quién hizo qué cambios y cuándo.\n\n* **Gestión de Grandes Proyectos**: Escalar bien para proyectos de software de gran tamaño con muchos archivos y un historial de cambios extenso.\n\n## INSTALACION\n\nLa instalación de Git varía dependiendo de tu sistema operativo. Aquí tienes las instrucciones para los sistemas más comunes:\n\n### 1. WINDOWS\n\n* **Descargar**: Descarga el instalador de Git para Windows desde el sitio web oficial: [https://git-scm.com/download/win](https://git-scm.com/download/win)\n\n* **Ejecutar**: Ejecuta el archivo descargado. Sigue los pasos del asistente de instalación. Puedes aceptar las opciones por defecto en la mayoría de los casos.\n\n* **Editor de Texto**: El instalador te preguntará qué editor de texto quieres usar con Git (por ejemplo, Notepad++, Visual Studio Code, Vim). Elige el que prefieras. Si no estás seguro, puedes dejar el valor por defecto (que suele ser Vim).\n\n* **Ajuste del PATH**: Asegúrate de que la opción \"Use Git from Git Bash only\" NO esté seleccionada, a menos que estés seguro de que solo quieres usar Git desde la línea de comandos de Git Bash. La opción recomendada es \"Git from the command line and also from 3rd-party software\".\n\n* **Terminal**: Puedes elegir el emulador de terminal que quieres usar con Git Bash (MinTTY o el terminal de Windows predeterminado).\n\n* **Verificar Instalación**: Abre una ventana de símbolo del sistema (cmd) o PowerShell y escribe git --version. Si Git está instalado correctamente, mostrará la versión instalada.\n\n### 2. MACOS\n\n1. ***Opción 1*** - Instalador (Recomendado)\n\n   * **Descargar**: Descarga el instalador de Git para macOS desde el sitio web oficial: [https://git-scm.com/download/mac](https://git-scm.com/download/mac)\n\n   * **Ejecutar**: Ejecuta el archivo descargado (normalmente un archivo .dmg), sigue las instrucciones del instalador.\n\n   * **Verificar**: Verifica la instalación abriendo una Terminal y escribiendo git --version.\n\n2. ***Opción 2*** - Homebrew\n\n   Si tienes Homebrew instalado, puedes instalar Git con el siguiente comando:\n\n   ```bash\n   brew install git\n   ```\n\n   * **Verificar**: Verifica la instalación abriendo una Terminal y escribiendo git --version.\n\n3. ***Opción 3*** - Xcode Command Line Tools\n\n   Si tienes Xcode instalado, Git puede ya estar presente como parte de las *Command Line Tools*. Abre la Terminal y escribe lo siguiente.\n\n   ```bash\n   git --version\n   ```\n\n   Si no está instalado, *macOS* te pedirá que instales las *Command Line Tools*.\n\n### 3. LINUX (Debian/Ubuntu)\n\nAbre una terminal y ejecuta el siguiente comando.\n\n```bash\nsudo apt update\r\nsudo apt install git\n```\n\nConfirma la instalación escribiendo.\n\n```bash\ngit --version\n```\n\n### 4. LINUX (Fedora/CentOS/RHEL):\n\nAbre una terminal y ejecuta el siguiente comando.\n\n```bash\nsudo dnf install git\r\n# o en sistemas más antiguos:\r\n# sudo yum install git\n```\n\nConfirma la instalación escribiendo.\n\n```bash\ngit --version\n```\n\n## CONFIGURACION INICIAL\n\nDespués de instalar Git, es importante configurar tu nombre de usuario y dirección de correo electrónico, ya que esta información se asociará con tus *commits*, reemplaza ***\"Tu Nombre\"*** y ***\"tu@email.com\"*** con tu información real. La opción `--global` guarda esta configuración para todos tus repositorios Git.\n\n```bash\ngit config --global user.name <tu nombre>\r\ngit config --global user.email <tu@email.com>\n```\n\nPuedes verificar tu configuración con los siguientes comandos\n\n```bash\ngit config --global user.name\r\ngit config --global user.email\n```\n"
  },
  {
    "slug": "/programming",
    "title": "Herramientas de programación",
    "description": "desc",
    "content": ""
  },
  {
    "slug": "/programming/languages/bestpp",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages/dart",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages/javascript",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages/python",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages/rikmed",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/languages/typescript",
    "title": "Lenguajes de programación",
    "description": "Esta sección proporciona una descripción general de cómo comenzar a utilizar Documents, Kit de inicio de documentos de Next.js.",
    "content": ""
  },
  {
    "slug": "/programming/web/css",
    "title": "CSS",
    "description": "desc",
    "content": ""
  },
  {
    "slug": "/programming/web/html",
    "title": "HTML",
    "description": "desc",
    "content": ""
  },
  {
    "slug": "/programming/web",
    "title": "Herramientas de desarrollo Web",
    "description": "desc",
    "content": ""
  }
]